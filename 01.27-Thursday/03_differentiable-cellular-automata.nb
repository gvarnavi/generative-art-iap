(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2578832,      46305]
NotebookOptionsPosition[   2565589,      46081]
NotebookOutlinePosition[   2566424,      46107]
CellTagsIndexPosition[   2566342,      46102]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Differentiable CAs (NNs)", "Title",
 CellChangeTimes->{
  3.559948400406288*^9, {3.6940927217181253`*^9, 3.694092740906395*^9}, {
   3.787777920516901*^9, 3.787777926080781*^9}, {3.7877843783043165`*^9, 
   3.7877843821022177`*^9}, {3.819778299979034*^9, 3.819778307514834*^9}, {
   3.819785068455414*^9, 
   3.819785075671529*^9}},ExpressionUUID->"46f0ebb6-da31-46ef-9c45-\
71befa538d10"],

Cell["Jovana Andrejevic, Nina Andrejevic,  and George Varnavides", "Subtitle",
 CellChangeTimes->{{3.6940927459658537`*^9, 3.6940927534315176`*^9}, {
  3.787777927830434*^9, 3.7877779526384587`*^9}, {3.8197782740963783`*^9, 
  3.819778276778048*^9}},ExpressionUUID->"50eacdd3-276d-4ac8-a6e7-\
95b7fc4a741f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"7c6b01f7-debe-4cb1-80d0-b3808cf2e13b"],

Cell[CellGroupData[{

Cell["Following along", "Section",
 CellChangeTimes->{{3.694093676858917*^9, 3.6940936816804*^9}, {
  3.6940937866096673`*^9, 3.6940937867661943`*^9}, {3.6941317124743834`*^9, 
  3.6941317126488924`*^9}},ExpressionUUID->"de87d933-2457-4f35-a065-\
f6c53bb382a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"URLShorten", "[", 
  "\"\<https://raw.githubusercontent.com/gvarnavi/generative-art-iap/master/\
01.21-Thursday/02_differentiable-cellular-automata.nb\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.694093199793154*^9, 3.694093228612194*^9}, {
  3.6940932838462496`*^9, 3.6940933356994576`*^9}, {3.726249112392106*^9, 
  3.7262491155801144`*^9}, {3.7262495833255453`*^9, 3.7262495839677534`*^9}, {
  3.7877780577882156`*^9, 3.787778077488515*^9}, {3.787784429038597*^9, 
  3.787784439979081*^9}, {3.788089486924706*^9, 3.7880894870496764`*^9}, {
  3.819778334924054*^9, 3.8197783575881367`*^9}, {3.819784865430065*^9, 
  3.819784865501759*^9}, {3.81978506501598*^9, 3.819785090967433*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"4361f01e-889f-4967-a9db-ea2b92bf8c25"],

Cell[BoxData["\<\"https://wolfr.am/SB9Q9ED5\"\>"], "Output",
 CellChangeTimes->{3.819785098802884*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"c8c7e840-c32c-41ad-a35b-d70f6a54c38c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"NotebookOpen", "[", "\"\<https://wolfr.am/SB9Q9ED5\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.694093341974367*^9, 3.6940933595080605`*^9}, 
   3.726249127923258*^9, {3.726249586284813*^9, 3.7262495868166833`*^9}, {
   3.787778082380721*^9, 3.7877780831460705`*^9}, 3.787784447309518*^9, 
   3.788089493525613*^9, 3.8197783737575293`*^9, 3.819784981176464*^9, 
   3.8197851029769506`*^9},ExpressionUUID->"aee06d82-363b-4b0f-a7a1-\
50dc2a947075"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"efc2bc96-d648-4174-bd96-7d2c764b56da"],

Cell[CellGroupData[{

Cell["Introduction", "Section",ExpressionUUID->"ffc3a815-1b09-436c-8413-03ed89068b8f"],

Cell[TextData[{
 "So far, we\[CloseCurlyQuote]ve mostly looked at discrete state CA, e.g. our \
\[OpenCurlyQuote]binary\[CloseCurlyQuote] elementary CAs - which could either \
be \[OpenCurlyDoubleQuote]alive\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]dead\[CloseCurlyDoubleQuote].\nI recently stumbled \
upon this ",
 ButtonBox["excellent blog post",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://distill.pub/2020/growing-ca/"], None}],
 " about a differentiable model of morphogenesis using neural networks and \
cellular automata, and figured it would be a great demonstration for the \
class!\nIn order to allow for our neural networks to minimize the gradient \
loss function - we need to allow for continuum state CAs, e.g. taking any \
real value between 0-1."
}], "Text",
 CellChangeTimes->{{3.818576836267108*^9, 3.818576836267812*^9}, {
  3.8186591864130297`*^9, 3.818659189165161*^9}, {3.818659643841962*^9, 
  3.818659651655953*^9}, {3.818757220150125*^9, 3.818757220629629*^9}, {
  3.819785129296197*^9, 3.8197852224806633`*^9}, {3.819785307257308*^9, 
  3.819785349593803*^9}},ExpressionUUID->"274cc22a-5f52-4754-bb3c-\
5a7b686103b0"],

Cell[CellGroupData[{

Cell["Problem Statement", "Subsection",ExpressionUUID->"57054323-69c2-4e41-9de6-1c1db67f2b72"],

Cell[TextData[{
 "I recommend reading the blog post above after class, but essentially we're \
trying to ",
 StyleBox["teach",
  FontSlant->Italic],
 " a neural network to learn the update rules for a continuous state cellular \
automaton on a 3x3 ",
 StyleBox["Moore ",
  FontSlant->Italic],
 StyleBox["neighborhood in order to grow and reproduce a pattern. \n\nWhile \
the blog above uses emojis, we'll query the Wolfram Knowledgebase and use \
first-generation Pokemon characters instead.",
  FontSlant->Plain],
 " ",
 StyleBox["At the end, we'll end up with cellular automata models of the \
sort:\n\n",
  FontSlant->Plain],
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzs3AdYU9m6MP6d3kMSQm+h9957771L79J7k94EpCkgKNhQEcVewS5YsGBX
VFARURERFSlKE/cXPfP9773fvXNm/vc5c5xx1u95yFZIdvZab9Za77t3EtHQ
RLflSAiCUvHsG7eQTNOUlJAsdzr7P54JqdGRCRHhtglpEZERKapaUSj2b9vZ
P8/ZP2gIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgr0cHbYnrwiRSzCltnAK0tVLn6HuY
TM5NCs34UswZvAX5Rx8fAAAAAPwRSLgWCoW4ko8l+EI8nO+MQ5Zyo0KnmEzK
TpYyfSdXlqkJ/j/uy4k4ivi1/QjxV36/p6vaMwEIEuVjKezg7cLflr7MaUdk
oPW5nqJ8kRAU+quPBwAA+KuTRBtgXFBX8XLEMhwGc58xQoERFoibdC7CP/6e
gv6fHxfA8Y/tY85vtyqITuq37R3sW0IkCoIESTb4HGwg8jDxIyYXcw4ZjP+f
9wL8/2VJfUyPICaKximcVpER2hb10rLDJFr5zf4NLnWqN2Q4D82IdzKMMZlm
LMJ/fpQO5v/dj5q1PMcxZLewa8YpozbRxCQZl7cqR/i6gi4ZxrN2UJttadSr
6CDULg5ZzLcXwNC/rX0A8DPRxH677YEmkf/1959/2QZj/7GV/j7PXkR8wa5F
L0P64Neiy9Cfka+x/7YD/Zt6gnUhvMbPMy7w1QkE8W4yvyRlT8ohXbfWVkhg
//WylpPEt3td5cKjvm3zf1n1bCiCkt+2B8XXOdTxXKLa2KzWXc0N0U46PDWY
5DtOpLhGSEpwnSBVKj5g7CN34vi4J4nF+HWoCeIPauZPo5h2jceRmixToHXd
mEcmsui2xaK3jJ3YtX0y1Q6BPr2P9Oyvql/lW3dste2QuAKjvTRZB0vnJfY7
HCB9ezQs/Y+9bJJJDRmU6OR/npTbLh9wz+TVpf6sOstF3oA1+HoxDy3ZfYcW
VYd5r5KCjKL4VQi2qOPMbN4e9isgla7Mu4Bj74fSiBZk///1r2RHAPD3tolA
J9SgRagtgvn4JUSr5Djr2289lBe+z6Daqha837YNVg91blI3Ym29FTSbOCsI
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
1Vf9KPSG/hn5+KZ0tzRDRRXefTf0D6hPK8nuTKZ3SBPV+vccwaN1N5upboMg
mvohI0QVBDkoOOkcT8vljhNnyNzyD+M8w7zGgGV+dO/+qxzFPSSnErw4IWgP
WYnixs7vr+Gd8dvZfZtGbsMdwYgjmTxt3Kf4GxWG7VQd1da91v6acCfFabJN
Mz5nWx67n5X35roUwLC37rvcsKybizix+7ErMm/Nt3CLLzOP3jESz+vq4BaU
8DUsWjx9nVfGx7fVJjZuyjX9spIF7Odoifyar2WuIcraD8MTdWJ2iImiWa+a
B+z43R2IX9HEHq/JeQ/MHCQ0GiJT79gGyqXXnQiTNY5XQuxY4xhq1aZhfey5
3jXbYYuzt7mIrXqbnDYMnOMQ9paN7HvYxWcX9jAO9cAG4e7SECx3CYIk9Jxc
SAfvSbsbG1kUbkvW+WxyVk+7bJuIlPScpKrNdexH4lHiNP1Hx+O3eJBTCGoY
b/pVHkNxD+Fb5iziiHqtHikAgj5xinPT2PONDPU1IYJdYYXRjUlnEWW4eFYl
a1zUXx1eTk5svxmrcjHza0nukpDKx5yqEhiuU3qTw8eOn6v25sK2vDZ4r7hG
clN2w0IGl7SvfIz8WIrAXmeTIMyc7fLRVCsP7reKhRZmzrLZPWmSNBIEZYZu
yf1gdUb6YDt7ZK43dV0aH/rYszqBnbe8fPI4y8Py4pf01CEDW7EVK9NTHW1n
5HpqNkZZm5upPNuLcFntUK2bd95OM955n92b4RRip9W4d+qHJM7jUXrZapOX
ZV/n2a4qnD7ILxqPzlwx+oBi5f10udmTGYER23jPzstZuu0+Sz4t17K1+Pxy
/EU7rojZ678yNs7dyPVKsE043ug2joGn4PP/9PnM73UKuZ+4F32OfIXzk9g1
TgltXv0ppx1G+ptZupKhOsHzNwPkukPk4waeDdDuOlF9owdV+Z76SviNTI9K
SSyz9hWdGhOO907xg+EDoV+Lbi+D4auPODY72sLwm+P8OdNaKZ/3vuVc38KO
G8/7E3Vr9W8sPZvsq2Caty+47+5wm+ENOHOrki8Yp6X0eN5k3GmLzrn7uhqV
hqn65w/JS9/kahPUihHm1BPOFXKIZs8ofHQhX1sIKmWe4Z5W/NH99qMJInLx
/pgb2BlsHNdl5m1xPxVduzLL3sZek/UJ4lHTL7YYWOdhC2kwv2ZcjFfihwl3
ponTS++EZ0eEIO/0ZQrvZbitLYVdVSaI/L5uRl4wvCoqv/Ayex2cuLV/vaMZ
DB+7cLlkij1fVnwq2Nxjx/77zN7aMV35L/yLGrUW7PmzoeNqaKtEzqPuNSGB
nhrcd14oY+3nDAl9h8VemDqYlB7n4nureFh9xXYndKXonHLZ6mO4bA2kWdp2
CMKpGpjLrIegIilYc19yNbe/yDbRLR6dPMPMozSG9I/u1z/eaRwnqh+Sgeox
LXgYfZDjkFiJzBHTHdrx4YFht/v6DewKI9jrH4emcYkDu34IUW+Mt01pm1Tl
VPX8GFw6psL5xPNq0J7JHVyfzLrdRT/iRQZd/D2vfMmNnsmgs+P0/DZ//bgB
e307f71snzV7HV24uSOEHVfrqaG1RFMY7v1SWbuCHV/9Q8XhfbLeowHN04Gj
yrm35uSVbLOMhZ5H0AcMVCzkz5gJPbK96KjBXt8IyorW+w7nEAY83BNc++/z
PgvDpxYPQFCyFSbQ8QwELYmuNW6qW6UirDKi6FSUYe1vQdLyL2bJjMj1S521
ScWXkwdIOM4f3eu/pYugi6ej75DQtBxua455MQiapLQQZxkQJI70/y/vTqgm
kHEQFAW9RccTHDFUvlOK0yr3Xa5pRCQ8TpOeENYoK8aXwTCfemqhLLtuz1bR
T96xYuxzA9c639joVxOGZIZXb8T8Ag+9xOLQsu0zBwWJLvxeX2eTIvfEbDSH
Yfte+YotOjAMd2WXwzbhXz99pbevd+dYFH23YV2J5a2vMMxf52Zm+PXOnvZQ
f/mA0fcNUr7TcpKP1OTP2A6aYN/eJfQY2Nva3IjkW+s66L3nNgTx6Cu5I3rO
cixGTBUxxssUVuZUVuRPqdFVIoIyBl5C0BOZa5bXd6awriiL6ys25NubLWM5
ne82MN3ub+cdcjBH6qxBgUl9XiBvoqib+Bub+/hQgiPh6k9zHXA9wgLdBhVh
lJECVEPCDLcd5zqpx+JZtnbCXNqDxhO5IpxFukO2lA0DBk89eWw1z8bGl6xs
jaqZtc70reuNheHmq5HN9a4FQ8dvBTVssZH4WjFvfs7UjR0/2PPDxZUwXDnp
eIo7CoabXlxftdP44njRE1LxcquTX8LOfY3cLGP/UrEY8seYRPdXW90wP6zO
sfOWOkX5q2pg7YxlkeYnpZshXiLrJVwkHfwQqLsseUl3H/a8yXTlq1T60f32
w6FfYu6hlhPeI87jZQiC5ASipshdSaLBuIq062OPylZzyWz3tpBrhyAoS+KR
ftqKNyrN1o56upu/JMTn8YavfkMuXFOT4sP88HnvUlW3w6vXqx6qbS51SGCP
r11nYly/xa95EJENw7afg05MxMEw5iVXVaoZ52Tic7vScPb8eePq/hU1coYj
DbuH47qN6e+cY1V8erQ+38yxO2Yxrb5ty2pnnHuNOWPrBxE7OS6l26lN9CJN
Z1OJnRDkovDVnGMtBPVKhaovxB7hmRfkFbS2J/HzMc9TILEf3a3/LqFoZcJp
rBNGC3mIWECTYuwXemWIt9TOs9UMiolLNn4uLlFjFxlwsZEC1dBviRsYh0ll
qAmK2ach0yk5vBH73kpVnlol5Cj5ZKJVY+WIbeB40qOIzV6OXxZg+Fon0eFb
/NJvWybBMOuz3pG6SBi+8jy4+pqV3WTvALkkjb0ONlwYycGqFI8c3iOcrGpK
eWueJxP0QqNnMCRsziva4NWx2Ez9jAFPmbsvWL7SJKVnJXzc1U5cYft7cRzv
vdPSyDcgyFhf0v/qcQhSI9fLckUhdXMle4RnAo959VjeUcJmrFVVVsRK1lso
ENMpGPLOn2a+/L+6oG788e/XS2sJz0lORIIoynbJ2W5HtEpjyoeChikeXmmj
dOe5EmG0PVWe/5WYmZCnbLdAXEBPnP0K4YjHYzaloaWWTtVDiTssS7Ttd7y3
7a/cdNm+ah6GXxzZbvstfpe6pb7FbSp4/+5AGK59s3+Nqg1t9kN/cYmz2a7F
8AtX8mDVa6Ob94wmaZhojflVvk+w0NcYdc0Yinpj0nZFspq/wslf8V2c8mW1
R6q0+iyR894fow9c5hAfzYTrZIYhyMlJNuHBk28tMBXYGBytw5DcIW7mUxa9
5IkyCt4V4ns6dNTNYc82qSCdJH33eDneXLE5iRd2+QQvogJxA9eP7f1/vThE
H7odtQkPQSSCHLWX8Qa/mrNf5JDqLjcFvQNa82vn92/PGnVd6pq+opK60TXu
svPGfa6NihNtT3YjMu+ZC717u2dPqYvTq6GKD14NcMC3+NW1DrPzn84vr7s2
prHriesTDaFm7ez4UvY9d7aYwLw7m+OsUDmq3Lo9Zlzf4sI1MwG9gyoX8mTV
u9S6ZPycykO9A44Zltnp6Xio31a66JxP2yxzSW6Yvf5ZcW/gI8v/6P76s9iE
uIrWR6WiNyL1SdIcIkz2eseJFn4iDEEXOXjE2mUeWJJ1Xkpa5yy+mFtzyy77
oesNvwQXB+0LGbtX+oQrG3fW73LNRlqdeT3WUbWW4db3Uvk5X6WY17f4wVsf
FMQuXHqPPamSMTLbfTe5qdwKhqc+5u3MdfaeMh/hyw9WLX/dfE4rI8iw5RU2
QXcZl3blEZrVLT2W4GbbW2uLaoxdnaoO5Kp7JKrpp2lJLGo2qhuuZNcLCgVG
kRUQxC29W/FZECdjlr+Yd8ZoHQ1NbSS8+OnG1W/pR2UR1PDyOG7MU05Nwe0S
EBTBMldtMoagE+hDdCJ+v3qHZCa9VvvAQ6sqCfuXt/QukpYnWXedzz8mFbGk
Wn52bI9FTptlxPMXHQ1N95dVj4gOCa0W+h6/c5v0EgsmmdPcx5hR98b237Nu
nraAYYO3Z3b4ufgu2LwgFJRrRI9uuIDPiNS/PvWk8nUUxXDdTcdYlNMOSblY
xumTbeMhbt2tO88kuZrdbj8t/0W3TuNmaDPtuVNkaDF73cvT9XPdvheCHqB2
83HZxeqEiMFCsq4cy9dbn5FCxtzR/6TMJ37dRJZsQr1E+vynP//5v3ULGsbs
Ya+Dm/De/AXirapbkOZSsN6YhwoSgiQoEHSdkUERwwhROXvTiwPsjvROXMgL
czM37CYd14vW1MSffLb3ctaQ5YYnxSdxG+753X05PkxsbPf+Fj9WY1fg/HTO
RP/BrSGOo5P9yLWFhiaLE6+4W7gc1sxqDnEVPNOUG/Xu0k3/oLcwXb3hfaKA
0UD/sewWn91y/oWP71vvzg00fuBxeXuVklvhnUz5csUIqTcGSKmbkbHZned5
MA62r8P23/nWhn3QjGyqWaBYHr+kfnEZwU1PQbhKJedx7FNHsfb3qgnaQxrj
/jD3FZFZ0Qtm4oR6YjPx2E/7/otBxBuoCjGGvK3+QoQo0GM61/QwiG7a11J7
sjXjpsfDzsOWy6Q1BBAuKNEPnLO4zRKVhnlyZoZW261P41YGOCQvaV7ZXzFj
EzMe2PPiGKFCaWjV4JG9w7Wxn18OkM4/8luYr/7s9sghu2dRYALX1Gce9FGj
XTL3oIPDULvKtMK8vE4In9QBiSyRPi7XsJZgP6MsuTFnojVVs8TCgC9NqUwh
w5WdbzGJvD4SP7qf/qxCidOYA+yx1xxCs12rfGWlwoDJKlHH7AfDtz6U6/iq
3dqj3MrtSAlTWiPIZJTiHCWxyreEhFR3bcFejKvebc+u9272r2nTg8YaLled
4lplM317Ys9JyfU8E7sGL94rXg7DNVOn7pYX1nzZPLy7LtB24f32Y1K5GTbq
s2ky91Q4VfPSN/NPclLoU8RWn6qQ2/rKKqEbz8ftMeuvyXD+bLpJpix8C0eH
er36QB4EFYj1yGDd83DbeOncUUqHyeKktbhdP811hd9rDMnE4TEsfDPUg03B
nUHTOU7i+xAQRE09ES6mt7Th/FNGDdX27FPFm0W11HDkk7dc19FRWHd6Pl8u
1ztcptQKCQx3iQJ6/bsLSlUBtqJLE3ffNujoXJ/O7N1/eno1DN/9ePJkw8a2
NwYjKv017Hri3jT9jn4JDNNfxdaZ2+p/oJ3clD6i27d0Q+i4Sq62ZtEZEg9u
GaEGd8Ct3uOrZqVyxM3R6m0ux7t18jUD+dSvZa5Sv2wRo5de0kogKhOMHtaw
m4Bc4GTIB+t3iesL29gqRs9bbRSrDB0wm1f9xFphlELJoIqQFn7a92v3Y5oJ
Ivg96DbIE30Q++3TCzzf38venHchsVyvd8P9KwVljSYCg+VXxtcgA+Se8nHI
I2qQdlgyTwbvdvxJSXGRg1ypChwNthf4arhtCPPFA0IbnHXS5t3uGnXZroHh
r2/unbHbHPFBetyy3z1G4svCJ7XbokUPYaGx0w0s28fT8h0r0gz1RhYKecqV
erTjyw7jElFlhCMoNeujBnckw1jjL8RatgXMPbhaqxB+VbuvFG1aZnvIYCqj
mdGrWWMVveHbsaph1tA4LO/IzAlkaDBrOX1C5Jllj5tIWa32aw/kWrcZHFRO
dr3DPSLIK9yvOYt7RjAiZvy0eeoxhBCCG7EflaOwS3CSEa9GzN3unqo0nLc/
2tDBUpRceEnISqyFccSMPXIJgUwBeYd9sqtS3GzOesG7WjjY82foQah0JkJs
+NzHvXfVtwwMwXDAxLv2h6PshOat2SoY3vVJ/xXXGtcXMFz+OK6Y/cvHjW0h
4TBMMCwTbxBID89j51IlKAHokdkXLQ/pWJ481zo7rOYFuy5BmpKa1CZ2XmzH
cZRm/bu/t/DvZhuXI2EeekHJadGKPm9wb/+VGzIl9hadd7M31EXR1Z51PeJh
8THp6Zrf7ruJuk+14ph5pYLtpR4YPrGHYg7D6qef10wE5g+fnH/4MGGf5DsY
tptQP+z/CobnX96pQsHr5wMXeLdxjV2dU3vytIw+f+9OYot44M2FEGtueUjw
c/QICYIGEGREkFK/6CbuWBw+g+5upeoVLpEXv4xPvrdkj8R5hUWWyzIIcuJV
EVJhH4ccg0bbz/cY34+r+gt8TuyPpqLFI+hNqFLmfPi24qJj9Oue2bsbK9yk
ZvOvZJUUWjs8E+BdRd9JvCSlhSiDlEl8qgOHqatWmGSfYZfr+62MYXhvt0g9
b2Daq5cLUgO5h4ZnYNj4g+CR1tcwbP/qeV3t0rfK4l3r6Du/hcyHyiV6U0lX
JJpQvrdnjC1uyncKvY7djYMgH2gccVtCni+YehXNv/NlmroxvYFwfmpVpZXw
A3rCI8cEyVUFsiQHEVhCxOnb7CnNmcLcYrBRrkZkwPRK4g6HeInBUHsDXkUO
ATENNDmbzCTE/mU+B/+/p4RkJ3WQvIe6bqeoXKjzo91VdM/0DzCc3x4dNDNn
/OxiwzH3kHGW0APaYxReSBy/C/WOaKo4cMi0fLOB3nF2ZnIQawLDlleGN5iG
WL0WWox85tQxOQfDfB8HD/qzx6HbG/emy1+/xY+4y+I9DKP6IwvPztpdTFjX
tqx48ou1jfIVoe1xid8/A0FG5QhZUaOwEH66g7ZS3nLzrvfPNm5b47E0OV48
HbZLbXUtgWM9iykzZQ1BBCiTQEY3mvYrTQolys82NUeaakjUdezaXzRvx3HE
wEfWwltlv9MS332BdgFu+QkMBd+MX/3T5jMQpAuJsvPPSxARcwBjjXzNamR1
crxnZam7qH7ipVnNC92UUeKDWYNmdqodsgK2c+/ebsEFdr5d04ltVA0uvG35
6M1174PYh1vHGGMJ+5Bzu6fuLYixZ9eyd09fNm1Jn4pcyh+2qOmZfDBy7/pS
Zsho27Ob1xnlMKwaFegwq9lT/e0ItFE6ZF2xh1xWXGcIT9VPahXIzxq8YiSx
GnhGxSHoOoaIXfjLfa/Sv4smJpKdQeijGhyY2nJC5S6KsX1ug1Kx6Yrp9z3M
VQR28kpfEdnB1a8XEFZqOi81F9fzOWZPg0/nzPazzxvkAxoeXX8uMdR01vFV
44TT2w2HFz42zBhORl1c94nySmoUuU1prmuWPm20iXtR4W3RQ87qnR/6+m/3
+rDzGq1y+UCKTkvnP45Cmy7K54Q7TGjAlTlfMpBWCLb5EK/m1C2bWMgSvyQ7
KIAxhaCDzDzmKgEImiOdJWb9H/bOAq6qbd/3q3sturu7u1O6UwQEAQGV7m6Q
llRUQgEJAzsQEVExERQUTEIkpKQb5pu69zvnvnvufnu/++45e5+95/fzmYwF
izXmGP/f+P/Hf8xaf4H4+Gt0/fhJx1hOWYI7c6olGbsWqNDUuKd6u2hIsRQK
FDK7HFKxfroq2U4fR7bZpR8YYUTi5T8YsPb1/Lit50zWC/fyMBejkdvjmSNz
dwambi6zTH29mjZ9cNN6SqTFYJ57om0isBIADNYiVkorYncOT719By92n7nT
9/SZbQYAXMhyc3NXar/3U1u+Uq1zdBM3ML7sn9N59rJq38g0rDDwjlS1v0QK
8DE5zZ+YepcoxshKd18cBpvHStItkYf0bqrc4QG0w/bnGVpyKdmfkn0paEzf
I/r72fNfTcWP57boSVxkTyQ90biY7el7y/Dok8nDLM71slHHZU8c3ntR/dGr
BakU6khcuqZM6FOT13wI77erSuf7La/O2L1WqMnZfW3qwGTfaMeNJ4vaq9iZ
0mu8U0pbUhO460ZzxJmwSTNQv571M8uhFQDgPPv+fWCx3cLYm/bnDqD/fc1c
2rupzP7gp7Zk0lwR6qXiwXVKuTVcDJewDL+7csb/UIXKzZspGVfcORQaqvq4
4jkaGcmKMJgf4jPGAZttOauBEWbUiriAjTXSCWtIuKaZH2FJf+Pq/hTjHBl3
KxS7MOt+ZjVeBuR71AiK9U/3PLRfYhmfTVig1cR/ZNGiy2YKJ/sJW3CWC+nT
a50ddtJ3+XAM/+541pD1yreQeb3z7vHwRcWRhS5MLaz/xJzGgEXVxvyH7a2J
zbMhmy7bhIn2WrfNj5u5o5y1lSvzn2UGZYvSFwS6K58BqeIzLw6/jGtx57vw
fZ8HCfnsMNDCLeBq4Aklj3KR5IlXQ4fgz6FjoHnvV3GBHYH1wbtRHIQk1EHU
GQot4xfqNSo/7m3+cN5k1klRCZ4MjsN8ezr3p/c6xD7Vmbx7YsYpYOft1Pur
xgkzK7bfir68r3WZ3F6p/nCrhmrq4yrfaNq5hdmj6/bfts4RgdzNrhnregDY
s3Jl+twxAIjvvf9sNTd5fq5uT+lxf93uATgVrADTJvYcnIVHUMNIcy4rhkgq
V+IXUQLXA4ZAkRpmHMs2uY0DBmMhHsXP/obnb/21yEM0oGCwUmQbdzbfJXpV
4RucVPzbrNKiWEVDcRX+doUS2UJ+RzYxCa/+vKI+C9n+j5N+5RWOTQDf1zf3
rySNbGysO31bqk1eUFrXe1t6unCicLNhpKyRcSZ3Nf6b1NmUHY3Fi7OdoH5H
N32+ppYCQGv/6acH0l/NDt6arnh78OFwGeh3PCgj4R3Y92fAiOOKeDEsMdRn
GB+IPmNbZrKVGFecZROgOiUty+ZOf530UcCUtMC0RLNGuyKjJfKZLlloRLFF
yIpKUdyfIY7mIG7pT3fdy69hTRIiGiHOkmZl5qTzuAr09EWwom84VGQvKlcI
S3J+VLwiBvA4M/EKJPQXluiZP/lwckKx3M4xG9g/zvRkNOnUVtG26dJk/cLi
9Prk27LyV18VtiOG6up1ZtjW02YONZ4FChdHpk/WAUD+JnHkQiEACPRLtksk
Ts+w3PtSleSza2Qd5w/bje4UCoalw+4iBnHlfJ/ZhRn02AOFarkNuTUUNuUu
cGzR6Mo8F6RmQBBceIron1Ksqb7Qe3nEmvJIfrS/f5clH2cUdsPpyqHDR41e
1Bh4ru3CSTw2iWHUYHhCM/KnPe/3v/GlFOOTsXG0mQyvSLaUNjoE7WfsG/q9
+BqhU3Q7PAzMnLFUqrQ2uyLpW86GedoYvigcEaq2tk4HcJ8SOjPL/T/uGwb6
VSqSR6+vHJi+VOG5mrUV9sWhSntWcFtq5GpF21TshN+nroYbU5LvI3uDjtDM
z7ZSPXVLt/zWdqf31BV/uY8TQvd4/H7c5/D9STIQv0YCRg25DadgvYiS6Heo
GHI5+Dcp+LsfV2z3IWEwbbwb0ZWiiR8VonAZ8iQJ0DS/8dF0zurY/6U5t9VR
asdpgeosdr86wD93YJTqWON88nTAF7HyxsXw1QtzDNWOK6rbNLPP63NnAODy
16kzQ/Pnv2HGRxtnF/O/Yj+X5R3fOtU9111SKLQm2B56ySdGZ15dpo8bzbp5
CGwZwg02DrbgDloVbEs6XhbzDG6IuoE5jbVHrEJ5zM+cJpBRR1E7uHZkHSIF
rvp/2KUbXFFooEiYS7jr6Bihdm4bFhWxQx1PE3ecDnzsmXlT6roHALxn4xqN
vS6t1m9tzBBLtDYL1yYm06pUt2bWs+YfV1FWtNY/TevWxk4pbA2Ot9QcmN89
ozRBX2e65jrN8AGbc2NH7sO55yr5F7ap2+tu7E/oWCHxnqNo06t/f2QyuHdZ
UD/Ej6scBQmcWCRaEe5FU0RlSNJj0KfjoDJHMdFysNjShWBE//D3N/xPg0aa
wHGIZGQ/oh4ug2D9m27UPzyPHZYET0cRMblYDQQclYMqRvvJYEQbWd6IJT4i
5AjvfvBBfX7upIMzAMRMPmtodctfi92hmo0sfLmls/N5pv80ALxZufMtq0pm
PWk5Z9L7dPK3oA3/ce/T5iuwWeOvO9X5m4GTHG98Mx23xN4lPYoB1+86nZ33
XiSC60C+DGo/hirQ/yTBlogjvn8TiSLiLYwWy4A8gvr+pKASrDwWg5sjWRDe
4PsI33i8aAMIn1mT9k+as/N5u5ZWvAoNlV04Jpz/wWNdliV5zOCorDuPtLIy
lSGVHIn7T3zc8ye+MDnT8lGquFmkhngVuGZUDmsOSCdL7DKacl7WNtbT8+XJ
e+yWZ5vWpHpTIG2v8d13Ft02Z2X8TYdpP155jT4x+Onygt8XvlOfFos35cc0
q13m1Zaejs2dEvy2Z/zzWHf5symv13Yfq0/4jd9u1+0g5ct8udnU3DwbsfaF
6eHCpdkIvfHWwlFnb6WYY8o0S+Q+4iYNDHYMdgj6tup/gAHth6RDRGNcqExw
Mphz9GfZxGmWSROCjAKK7HGMLjLm0o3CSVxjKlI2W7qn5c65l545H5LlNvKo
+pVn/ojTxxX+wfqTdTYA4DZx8bzRfgAwmQ4YlT7hvx2z8mhCqvog4LH5dWnq
XMoOfllzde85jY3hWfu53fU18zxDTpNMZxq/Cb9mepNSHLLY/Pjmfadk1yXb
T/vvCiYrr1ff5ItwVLnyUoBrjNYKSxEGIzz6FqTf33BDPIFJwpzgOlhDMEI9
Q28zNePQqPOszRIJ7Az0BWo2sp7C3BwphtOygaIk9hmjOecFCyk5/0jNttXi
RC/KQt3SxZocNwAgj8ZUFu023eFebL3g5A4AL7ZyJw0rwfXAJv1UQA0AEDbX
V40uAEDTUtJSyvlXG+3fguaeny1YkRnxmVo4dXsN8a7kdfcRrZWEjksPT2RU
rx188/jawWThDfoq5f2qcu5dTzk6sV9gcaIwmDqaHVH4D893/SsTCm5S2O/P
BXfBqkseZGzFukmw6dhKsHKn2Pdq5Ui3sdnvfiMTImBBz+sgY0sxQPElhy8+
e3tK3Nll896WfOPhvQCQMnarAuV0YENtjtQ04gEA8cDbiYtVAPB569HE8CkA
MN4qXDNvAoBDSweXOS882dw3b7DA3ai80fU5fvJaJfXWQv+rVxfz05b3PxLr
qExvX5d6/fKqd8qJLbOjOE+EgmU3DbMeOhWBk4DB8KhPCPl/yDebUfLIDfg3
lCSNAxYGayTNq90XOUZaVMY4imm1sE84vzDoknPhtDEK4zrEWk8rzG2IFyBQ
Y11/w/cs/Xujw23D3ENtIs5ouaQiKrbuM+mHs5pVu5iZGG+xe8HwSznj8TFf
pJXhda5r+vGmVvfuNT9IO5MerN/N8O7GQ8YM1QH2seudDpkfR5PGqF6VZ8uP
VI9h+9eyXk/4D6v08+S4TV14w/zKMPvO5LX7ex+8TQz//KgYfYbK/+K903H2
GY3OuQ2w7J0QDoOG0o2A9/qZAkX73rFoULkQzuKvIWnhcr+3cf5AxGLN0QbI
aoI9RxadHKVAZMtQU7qF76JnT6KDY7Gm//mBytlDFua9XexNMVFUu2c/6j8p
z8x0pp/z+8CcH21jtbK7k+6wk2nlvEjfravtoWcXokYJr+mO6i7tnur6mFsS
vSQ3q/uV6ejAyvSU6bTp0X3r+VPCY9vHatacx94OY0/ULd975/d6JC9qxf3p
UgtXksgc98u3VyihSt80+uC19u4JX0/eSAo2kU3q2GT3pn6CuU6GwZLhdNA8
CBMj7EGeRizii5nriY74Wc5zDpPyn/mmgu+dvOKVpmvXF3/VINTOImU5sHU5
2sPmznpq3/0SmAsA3F/EN4x5AUDVhlaVERg/Q4aPFCdZZO+UfCxrEAHnw6Yh
gZ4LxdWbLV/2DSkUimxazOybCihWArRmV6f0ysB1wdSnMf+TeKDhi/mwXoXc
psLHyz3bBVsApvPd3YKM2+sCHxhvXohx3BocK6zZdGFe9byTnlitrDlwmHuT
Iol0YwBHHIL0F35KfcbPfbfCfH/OYwBaQG+Yb5J+xjzuhOS+GFXOF/gHutGB
ZgAQ1DEUT7IGgPP3LKPdTQAg9LPBcWELALiwg2ta9QSAh2tGp7+A+earr7uq
DjieBnw/n6xFOm1us40cee1eYrl1aSxoTDk/ZKtoHjXzqhgAOueSJ4aPAoDK
lM7n90eLd2IH97w3PyG2Nd8f2NmYDwB+LyXvd2Us73i+E77VFBu/ffXj3YIs
u32b+CbFVLJ2/GcciyKhCBb4i8/VbcXeRkXDlbBCDMJUURgTBjrWJ/S5xECO
CTp1GiriK0ZV3FncEFr8L3Oewp7bidmRikuc0dpe7azguH9WSJKlnbxg4bms
lj1kLcHK9AqyV5C+b618xXrosklpPffZhCP7XWNbfO/q1fMFnH9l/iThelZU
0OBSz+G22diOMeTbpYfx8VLguk+v40li61TWi+h7nvGuE2/bE67sChT48L4w
MpfRbuqijAun531NqxjPfdb7zJXYgz4GvrLHigV75RqcFD/H5Ch9hNyDI6Ke
/tt+r+b/NG14d+x5VA3lgogtezzdLRWye7T2jrh9Wlqeqes9nbX2+coc3ypD
vefzzbPRO5bDvXVvLLJqbRuGz7xJTus20RlZa0fkHrD1H69/7nwzKjZ2VLk/
5Ln54fFZ04Hi3vnsioWi0Y1+wVz9pbAxl3dPjzgtt4wJv31Q9GK5bjSw/0Vh
ycq5j+NdGdnHl4yfVd2gi2mbmD5dVlznfuxBXpNKKWbPRlves5UiGWvzHv+C
DgcGwTMZ4cxhBCz6NCr2LxpDH6FzkEqIUOwnunyCAo6VpU5+kCuYmXnXxwxt
R0VNs7uLTepBm+ZdK++b3AMOGRZPMlyHRxWZBo+zDk4WsdtcnC7YPl9d7woA
n1YCjo5ai22/eMtXwGUIAG+7Sq/EBlpv2X7I7jHJeb59fuTlB8e881uPx89+
kiu8t1k/Nv+prMxpc+XL5MerJzk3HSYefPQ8Hr6BHn/0uqRQaetmX1uLdlLS
8pe7grX9fuNj0x/eV7e7XfmasehSfcTObNH4elv4lJzX/TXWSkIqzPkvc93D
f4YHpwZ7BePAOIqbM3LQ1iq+yYyyy1eRv5V62ypM0RQAJK/GHqzXu7JId9U/
eMvQ69uFm4j4cGPi7L6Js+VEa/GZ5K2ySti+5zuvd4BTwXvAfOUrXXkz+DnR
l4q1THuNAc63HK+2vz8ndORtfwpYIsby3zjkAkDa583XWsXntisHM/quHGvZ
fDzk9/ZhWeVG5VBRt0rh9PbLfpOW1aQj6933J+rvBH2bUxrarLDZu2vBebut
ltu2GXjS6JKwrJHx6BSDFriGD4Li569wiWWQdhdhlhuvoy8pxkJx7HZv0tXh
xUcKxthabQkdSBPNEnJWl2zLyzkCHMhUjz3depIl7rap8G2ls8J55+xSO89c
u3W8zvX2+1O360/Xe34dYWpzPXPOO318465mDWl//yhby5OTIS5PB4fOreeQ
zZ0fyyUnHnymMFq8tWfNHMP3wPem1YyhBBfS0dUOvqubTc5cWLNDYhf9Mclg
anNyOcbyT/Pc1f9fXAmz2M8oXqqD4s84vel61C12W6u7CprFR4aJWbopohpu
5Mm552rca3a8eDpoXKvljmw3JinfZOjZ3WczqRvG7m+M7l0tQ7lf/PT+sewl
g3DqybLuxNs2cXdmxfoF2wPjMfNa7zH3S+KdFkbeOTw8mvxuUf/Dq0dHU4RW
Cj4kPgiNG1qN62O4wxlRuLj73qszuAPrX46d2pNOtqZvJ5ejY8t1mxrm6h+l
NurpXXp5pi48XSOg0dI3TP0ya4uVoIAMnQKejZYWG4xeR2T/ab9f+j9jheVB
eyDLCRlcDXQ4SpVIoFmYpCWXw/7gDIr9vFpK22Ypj6eE/uyHtZq2gJRd3wbm
mwtikEZmo/PjUkWl1s1zn7+1lL50UlqtHQ8oETELXTLpRpX5O3QsbvfoNovF
Oix19Pc8PZFlvTo4tPf5VsbA4r3h0WdxmSWLAsMlL77mSaw0fw7tmSvQXV8a
SX19O895+/rnh92Iw7I7n94dbH0Tlbgu9mq9zsA7ei64b7Xadk/IWMtn69O7
rPkm+Ef6SruNrszy51+ye8/LnuPKqQWuBfgpCz8fUUvBncU0IZ/+ae9bQeHv
IAbg9Tg6JkZCAU6FTdROUfa4wF5/Ur2Y78guqjGtc3f9hYwvL/mehwfdNp7+
xnATF/nZ5NSq+2P1VBWL8O3LCx+qHjj7bHEuh5wmgOv3sXn/yn7zg8CtftsC
GJi/4F9FXq7zb92of3P0WUMeALAOHe12ytPZZB5JeZGYd2Zlfsis62PRsxXj
kaIe1RKGte7Rp2/oiuY3zMacXyfnOe08GbLs4EqcAu6/Z28KOuCzPTze1mDt
UrdSOX6nap9N/9rxBZGKFnCevXu8xHeXaFmVGj0SnAfV/3Yer+XHke1V5Cmq
Y+THuBss/ugy9CPkt79snmNOHU9cRZPpXwoXsy+SL8jJGixJszBG74bv5deq
YTkbQA6uNmXg3kl3jLPbfUAiqII+rdnjuRJ743Du8kG49terUUWnQ9INQlu4
ih2jIszd24QKTaJrrc62KeaxhHdbxLWEpEf73TQcv3w64o3LVZWT5Vt7n+tf
4nUNrTC7omBLc9lSX7tdup9iq4NX8hfbpKjIUfgH2T8TA7lkCNfxH1F2f5l1
+K+xhTuBaUVKkzgEZ1g6Kd6yRUYnZCQ55nw0Pd7rKYll5OfHnbfTlLU7s1Mu
6hktI3R19tpgiJ7yvgdzd94lTRhc7R9qnj4i7Wg0UtuqUu7isTCV9cCjdtw3
bf7D07jz7/0fLpK6ai8bhjxZ5OmiufgpqGYx/JlnA5sfbsHpgX7Fogdpluq2
8BEqB/jY3kaemA193a6WojP7X8s/btwsIOx3laA64VGK8huWPHPSMd/DR1uy
pUQ1rMFSXkjfu0BHXiKV+ZxcKXGNQINV/tOfT/jf5OKEMF+QuiSMkAPzaaop
OaRljJQOh8zBm0EnDLtlHM6sZfC56Omc7Jwuf33Idlf2APr2g8hzOuyj2u+P
Z5/TN537NL5Z0Gkwuvr6/ediYYuLK+PPk041efWvur0YuZwcIbV5tbf++tNI
9LrZB8qdoGihjTODEvdfxU5sCA4O378U17Gu8on57t7osrXhvqNXNYKn1tx7
pWoLPFJWo7sKjnLsHl1QfRCcFWDGOdzTfbjIw+TbJ52hzxVDpk4TQN+eY6eM
n4yhHj5J6dTb3eOTtWKrJ8iTUKPfIRhOCyhZ0GpTBRDsmX5v+/6zqAWz7lZU
LVWV0FEGS6ob0qmHGDXjRcry7ErCne+ra/ZkVxf5Ful2fhW87BH6wTByBXuj
O6LRpH5V+G5XQrDx6qrjqO6J2ybgvDYrcdLTGADKBmBHCnUvblm+eXbS1bFv
bfTN+FXpCBWA8IGlRTK+dWNy4P7dxrjhLbXPpx4cTLyw7TL87ZFucub2m4HF
h1RJ0Rvr7zhun46Cb0z1l57POPRu89nbi1VSbprb2u9CypbsjdbOTpw9ZWnt
srF3zqWh16x469i0dY29qfp68XBiLpd++LZkVaDXkIDypb27o6TC8GOWLQpq
XHiyv9JFxqv0X6npJD6hiOhDSKe/7PzXgRlGBSFOYb/R3CJdxNgzIPirWcbI
ZyVJqlsiKCZTi3mLSypKPPcP6e7d0esSmY7b8eQz5pbSTaZz/2iMkwmLMtkd
ZUCUsfObMfPQTJAIcfXX7VYQENa19FBnljbm9zaIVikVd+Bp00lSdBO5z9Gm
WS9DJ1DGHKAaIfyec5xmj9QU5w7zJBHHJ8fgRCuFG2F8hz+G70SJ/mXi5G+l
C9ODCkU44mQYCBR+rCPrJ+lo7nXqQh0VS3UlEidv0JdDPobvBDWKbDLQthki
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
CAQCgUAg/Lz+AWAGbLc=
     "], {{0, 168.}, {224., 0}}, {0, 65535},
     ColorFunction->RGBColor,
     ImageResolution->{72, 72}],
    BoxForm`ImageTag[
    "Bit16", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
     Association[
      "Exif" -> Association[
        "ImageWidth" -> 224, "ImageLength" -> 168, "XResolution" -> 72, 
         "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
         "Created with the Wolfram Language for Students - Personal Use Only \
: www.wolfram.com", "DateTime" -> 
         DateObject[{2021, 1, 1, 12, 33, 45.}, "Instant", "Gregorian", -5.], 
         "TimeZoneOffset" -> -5], "Comments" -> 
       Association[
        "Software" -> 
         "Created with the Wolfram Language for Students - Personal Use Only \
: www.wolfram.com", "Creation Time" -> 
         DateObject[{2021, 1, 1, 12, 33, 45.}, "Instant", "Gregorian", -5.]]]],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{600.5, Automatic},
   ImageSizeRaw->{224., 168.},
   PlotRange->{{0, 224.}, {0, 168.}}]], "Input",ExpressionUUID->
  "b196b845-6179-4e47-a4db-5b32832a3b93"]
}], "Text",
 CellChangeTimes->{{3.818511319483891*^9, 3.8185113354527884`*^9}, {
  3.818757236409433*^9, 3.8187572394564123`*^9}, {3.819785356074299*^9, 
  3.819785377122509*^9}},ExpressionUUID->"be87c24d-e61a-4fde-8a92-\
bfc61156c54f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Target Images", "Section",
 CellChangeTimes->{{3.818511409735784*^9, 
  3.818511411335927*^9}},ExpressionUUID->"a4014d4e-489b-4225-82b1-\
e9bb96e6bf22"],

Cell["\<\
Like we said - we\[CloseCurlyQuote]ll use the Generation I pokemon as our \
target images. We set some parameters, and query the Knowledgebase for \
standardized images:\
\>", "Text",
 CellChangeTimes->{{3.818511423072381*^9, 3.8185115010118523`*^9}, {
  3.818757250725135*^9, 
  3.818757250965188*^9}},ExpressionUUID->"c0c662e2-dfa7-4609-b607-\
9d62ca8fb63e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"numChannels", "=", "16"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"prepaddedWidth", "=", 
   RowBox[{"prepaddedHeight", "=", "40"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"padding", "=", "8"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"width", "=", 
   RowBox[{"height", "=", 
    RowBox[{"prepaddedWidth", "+", 
     RowBox[{"2", " ", "padding"}]}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8183543049459887`*^9, 3.818354318112637*^9}, {
  3.818386877252139*^9, 3.818386934109167*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"937d354b-38ae-4bca-9e60-2deb70ae1199"],

Cell[BoxData[
 RowBox[{
  RowBox[{"standardize", "[", "img_Image", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"width", ",", "height"}], "}"}], ",", 
    RowBox[{"ImagePad", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ImageResize", "[", 
       RowBox[{
        RowBox[{"ImagePad", "[", 
         RowBox[{"img", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"width", ",", "height"}], "}"}], "=", 
            RowBox[{"ImageDimensions", "[", "img", "]"}]}], ";", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Round", "[", 
                RowBox[{
                 FractionBox["1", "2"], " ", 
                 RowBox[{"Ramp", "[", 
                  RowBox[{"height", "-", "width"}], "]"}]}], "]"}], ",", 
               "2"}], "]"}], ",", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Round", "[", 
                RowBox[{
                 FractionBox["1", "2"], " ", 
                 RowBox[{"Ramp", "[", 
                  RowBox[{"width", "-", "height"}], "]"}]}], "]"}], ",", 
               "2"}], "]"}]}], "}"}]}], ",", "\"\<Fixed\>\""}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"prepaddedWidth", ",", "prepaddedHeight"}], "}"}]}], "]"}], 
      ",", "padding"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8183147566050787`*^9, 3.8183147869818583`*^9}, {
   3.81831491099899*^9, 3.818314946087246*^9}, {3.81835426678578*^9, 
   3.818354269593165*^9}, {3.818355948626113*^9, 3.818355949625718*^9}, 
   3.8183868869889*^9, {3.818386940669322*^9, 3.818386947526947*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"f22bd225-daa9-49fa-8eb2-4e18e2fa912e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"generationOnePokemonClass", "=", 
   RowBox[{"FilteredEntityClass", "[", 
    RowBox[{"\"\<Pokemon\>\"", ",", 
     RowBox[{"EntityFunction", "[", 
      RowBox[{"p", ",", 
       RowBox[{
        RowBox[{"p", "[", "\"\<Generation\>\"", "]"}], "==", 
        TemplateBox[{"\"Generation I\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"PokemonGeneration\"", ",", "\"GenerationI\""}], "]"}], 
          "\"Entity[\\\"PokemonGeneration\\\", \\\"GenerationI\\\"]\"", 
          "\"Pok\[EAcute]mon generation\""},
         "Entity"]}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"EntityValue", "[", 
  RowBox[{
   RowBox[{"generationOnePokemonClass", "=", 
    RowBox[{"ComplementedEntityClass", "[", 
     RowBox[{"generationOnePokemonClass", ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Partner Eevee\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Pokemon\"", ",", "\"Pokedex0133:PartnerEevee\""}], 
            "]"}], "\"Entity[\\\"Pokemon\\\", \
\\\"Pokedex0133:PartnerEevee\\\"]\"", "\"Pok\[EAcute]mon\""},
         "Entity"], ",", 
        TemplateBox[{"\"Partner Pikachu\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Pokemon\"", ",", "\"Pokedex0025:PartnerPikachu\""}], 
            "]"}], "\"Entity[\\\"Pokemon\\\", \
\\\"Pokedex0025:PartnerPikachu\\\"]\"", "\"Pok\[EAcute]mon\""},
         "Entity"]}], "}"}]}], "]"}]}], ",", "\"\<EntityCount\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"generationOnePokemonNames", "=", 
   RowBox[{"EntityList", "[", "generationOnePokemonClass", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"generationOnePokemonImgs", "=", 
   RowBox[{"standardize", "/@", 
    RowBox[{"EntityValue", "[", 
     RowBox[{"generationOnePokemonClass", ",", 
      RowBox[{"EntityProperty", "[", 
       RowBox[{"\"\<Pokemon\>\"", ",", "\"\<Image\>\""}], "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ImageCollage", "[", 
  RowBox[{"generationOnePokemonImgs", ",", 
   RowBox[{"Background", "\[Rule]", "None"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.818314635022943*^9, 3.818314666708405*^9}, {
  3.818314706223843*^9, 3.818314744875051*^9}, {3.818315010984728*^9, 
  3.818315034632063*^9}, {3.818315078409916*^9, 3.8183151080380507`*^9}, {
  3.8183153426380167`*^9, 3.818315382325733*^9}, {3.818386956502266*^9, 
  3.818386956701021*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"e6fd4f58-1fd2-434d-93b1-36f675103a46"],

Cell[BoxData["151"], "Output",
 CellChangeTimes->{{3.818511517905411*^9, 3.81851151914079*^9}, 
   3.8185680295843782`*^9, 3.818575838489832*^9, 3.8186586469841347`*^9, 
   3.819785409593911*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"3797a524-d091-45a4-acc4-3abea1b98cf6"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQVcVUn7+GfOpVNQFFFU7AK7UFABARWUUEFFSjoNQJBWQJRSGkVSMFAw
sBNROgQVkRIVbLER4d77/Ie6vqu7/939vfvurrvnO5/LcHLmTDzzPGfiyJg6
6lhQCKHNfOSPjsmWhZs2mbjpipGNlQ6brS0dzM0WOziZW5pvmjLTikH2WpGT
+5B/uBANDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0N
DQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0N
DQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0N
DQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0N
DQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDc3fGQbiJr/+PVvzUTA6i/agLNy9/XFut7+I
5yieR2XhIYy/JJJ/QxiIIo6Xs30WHUGH0XX0GO1F2egqQ5Lfh38Bvxq6MLz/
CMPhQ9e6ck8VdBbIGOfBxc/dwtWHqkKCSBbJU4u7ru7HECN35CH7esE9odD8
OeTgFtyMuTjbusa6mp+Xi6BzA98PvDXwJHeA5Me+syScqJ9e1e9PjuU/D9zl
vibrQZSJrqKRPVvqnANLxNf1Set7S4rfZNUy3fne9kKp071qtHfmXr58KVB4
mTSMzNfcJaCR2u6RdNqJS/30tZQVxgvFZ5Yb6gttFHvafwdf731G4Y+klgrg
r+F3wv0/f06a/xvd+UN1yVuM+JAkEkICaAjyxnlE4h6j9uJKdAqdoXrlZfd5
vD3X4V+8L80fCy9moTJOen+tT8fk0SzXCeJcSlyKZMuEs38HMkST6fbtfww/
5z8NFI2uICvq2zNGTN88y3L2lXElK8PNQq1vOpvZuwRYBelcqfYRPWZ0RvZD
qa/ByROXx0Jfp5T4d2mKrxesEXG97W149MSCT0sfayevWjR06GCdQf5CP73r
+56CMO6b0Oj8/nkopE2ZUJbUI07+fFLWVuVW69js5yC7KXhzR3rv/v04Ee/H
eZif6IrCSPG79vP/BiY1lhtx/Ue9XYu1sSZO/O7GWkiH5Oo78XMoltRhS4He
/TzEcSPt/zIeNP8bAnryaZmYDCOMcZLrjXATw5Irk9u7b+8ZwSgcvUKY6xpW
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
/hMuYfgn9a8XMWKISCTu/rZe6gpLQfONg5eSXfSvzopeB7IFFx4yV7/+XlKV
/Hi4iQrzylr7CxoBDhW0937HOF87OLT0bTpAxAm9SE6MN89p9AXuswGokxz2
trXAeEPstsdcfey3lKW93TAO4vPXrZufhfHJJeMW5gIAlrDLLcV52L9Fdbeq
Yp0UINMsgvUB33lNQVjbB7A1P8mbyK/0sqUc6xQrnUKBJIC1J6RiWOwxX7nE
1jCBe9h8DGplfAFS3QSr8i8CzD0fWaaK42/U6QXF9HYAS4w6c2fhOB6ucf9y
4kS+Le1l8VFY39EdSxQ7MTEfhhb8GcfxIuUQPwO9ObQPNpsKkct3WpH8O9ur
qgNDKugkOo3WcYwjN8xIOH75ADxMTKyBuouku6WfV24jmXfweGMmi9W6L/XH
rkQuMHhAKT9jf+OASwO1WNsweu2Jzq+lu45o3ZTyeFFk2JSY69T+/ZyKvFeq
+auvIUuu8yovCzrNYmKesH3ivrT5mdxPHhgPyiQHi1rEwPaL3MfKcLvsCtyr
3WaM7Rm+QKUW29EokVkt2ArjztJy3f1OmPcV2hlcwfGKKKXo5jkCOMdc07h7
Etv5WLSuKT6OOKSmF68HYCb7wLEY/077kb32dacwX5FRP89nisfprqcaA4cA
lhu9Tlp4BsdJ6xdlZFyPd2ahye7YjsvM+mMPe3yhXdBjik1zwP1Nmu10mNqV
l7slE4+Yyou6hmsfcpb0uF/87OA1XWT2PIeH3ZatmiOaiRnxIXl0ByWiaByd
+6da75eHv9+VFYgVcSCrqRKBBBiukXTJFlOJhVlJCqvDWBM4LaS/VVspDGG7
jDdfVK3E7bfvlq3cxPvwx5rMlGONz9FYb0hJ52gNUQ1Le6SuaTLRlKo+yd3E
+NRf1GJByvJFxhNnsyT1b3osdJzv+XYZkNsrsPHZ7lW0hHXRPKabikF2g/WK
yk1u1JO7eQRGsf8cWT3ODfzsDZqz79JZMTxZGJYtvM9YIW9k58CY7WI83qpf
cLbkdK2g3ep94a4QfBwWtd2WtdeJoSneZlTSMdpI2V15XHaNwSJaX32S+jzc
L57KBwkUbK099W35YvadnPOXlpA8iHqCfSYxJAdiRrMRx7+9/f9Z4SGa0BW0
dsYvaC56xUHHXsS6LneR2Xvxrteh7d2+t2STqPuoj69xaYbTMIIrctH+DsXv
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
jQJPxipqb1ubiwI0cFnuPrD9gsyv+wyIY8QyQuu3s5P/WfjxXuzP9mEHQSPH
yHfksql6mBKr0GtSiAlyNvmaMCeLyBzCnFg0yyZUQrpQ+GO5yGc/BwnU0/TH
J86bKndTeSsqgj2vAoj2OtSNZI/Cp86QB/0JAAdbtmf1RtLgXrVbIjfavb2F
buHP3AG6WnlNFqA+FL7QM206i7j0Rehlk7OTMOPlZfOkc0mw6HGBhqr0GhiP
eifYt3f/qLcSyafHc7lgh85K1TDN8lyP413bXDa/5R3c+21Z+QKhZb5Cvevf
rTx6PvROpvAGvnV9xpnKOjOV0M+uTF1DrvrKsfl7rdYTXORM8gNx9e834PAz
zEbfzNjPU49iTlYSi6fkxa45wr9+3RYH/pf87qqIG11bCQfmI7wTvm2jDs1H
E8GlmckhW4gOmg/Xmw0KUEGsLMdG7tBn6PnmkSNpdh8Eh9/FLVKjQcPHvBhl
xJFeL1S9GOem0ksIz6cn0f88XlL3AHHRsmcdtYx9Ib06DtX2XqXC+JPS6skr
b0Dj6Zaah1fHQPgprboH+8HdZ571zHj/RLtn3XovOnC2uYR/Pj0OD4aHosbl
AKhvK6K3Km5DTS9K8VJF/OFMnr62J9Xnz/Vt3K2zvHvW3NVLnEpOce8z95+u
1XA8iV09l5XcNDtslsfP+t8gX5MvMd73J7n+5a8//z9DEvGAqCI+T5W7jnsN
3zm+j8LZkffrnyLu2BhknfYtlZm++P3YS51ie3B6594fyjhv+E1Hb1g54sD3
wq9JTJsWh2b7I+770BfScb8IgOfN8m7rMtTH93NfqeP1/jf0rk2McyEqduQz
1kVQU9oi5yPu2GZPdRm1Bai+ypb+vgBA73phiQlj/fxVg5xx/H6d/8J0rcJJ
0Lxh497nIUmPc1SVXyJ2A3HOXBV1Oek3v8ptKD9N77jxRBTrFZYHhYh79l0X
eljSpDDh5yVeItbsAtxXSwu7GidB1pw36U3ROLzXSgmSSaWBlLKtd25sJV1N
/UHAnOTFNHMFVo/BSO8Js2N7+Jr2r9/9f2613z384b8XkIvIWeQjylnE0w9J
NUJ0pu0MYB7eFfuipOtgSwzVh5oy6Tf8gd7wtr+3tsIaTvXOf+ZRiLizWbWW
Jw35XnLI3XF/gPnP7j6uxPx7jw1admKs0UV7PIZy1ntf1m+I8i14q9Ptn494
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
Fxs/+uPvLxNBxGLCd1YzakfXUcQPn/55+R09TgxoPeIl1hDiROQ3vSqSTvAW
8mkJ5KinOuW7LPFUqxeMOpi4L+vyMU9hSeG7G00M7Lls6TNm1/P/17n/Kg2k
TtIgKX7Gv921p7iqeZQku9c7FHSXbn8deOxj9LmQidcvO9MbrVsAUovU1MPl
1o2/7qpszcRxkqoRvSZBIC7o++97CW2ceMhzv47OWfCvbJI/hSii7Uh9pr9+
0cx1OYEwwbY1HOTG5ZTlhiv36guxsLGsYVlGJyrwmH+PwMlF9F9j/hHSDXQD
DX5dEWAqsf/Ne/x3hPwVd/4aRkNQDPYozagUe9tGdA+9Q+/RRyRNsGCdLvg2
i4X4CXHIj2KC09QKEi44KvuhWIKHfiH9bPpZhMmylpUBfKWqsVarQopiXJ6s
N9MJZ01+9/CK4/aizUcAJo24EoVxvB/RTtnDEyV1v0KWeccrs/7csXWlIp9E
l4sj+h1zztCFI3piHCNPf0KeECMEsB0HIDO0FDF9a7iD34676GKQDxJEL4he
8YWSs6TmSBWauMWTi8doWx3u5LU2LqW1WblnPq6VgTGrqKz5GM+8NR1Obqpc
QWW0pOQUNO+FiG2R1hEe13u+1ytuoQwLB6swuUbwjaCiIM8K1/WGm8fFlVQe
LecSLhGTthFbumDdJ7EHdoM8UuvebdxiIrYqcI2c0N31f6uNpsa1pqBsjMNr
/qfV8S8T8tcVhxahSSRFdBLOJBKOFUwYA5xdrSqiLOfrKqlb4X4d43gz3eN7
Ypp6KbF6MT6mhx/QAvSdAzYfA3DQZtpzvbF0YmDbmH0HxqGbGLcwv+UoVPme
vwNRSNwhVtGtJc0iFRFq5HCSEektofe75blJmk0WJjvNnJsvDlyVJykb2mk2
L7brNMABk/bwhI5NlEmjjLA7nQXgbMQVtqyLCorGpeG1HdFgaLY1wqqbniqk
w+TjUhtObZ6VSreJQX46LOO6WaB9qA+l/XT9M5fQXozkn82UW1qAU4RZPsYt
PO5gTfEdOyp/gGeu34X3E+JGV30eHRCmimn42l5MsaM82enpZVfBQ001UwtN
wHHpmn6dlyTWUzvPyGp2yS3fOmLavwGELX+XUO9Gj1E6wTZTDgYmCQ6/tU32
UergxFuwncYmv8NcKtHpS+xmF0OmVGnKNVnCiitXnFIqd9b6UZ4ENUuezuZd
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
m2z0Xuux9UPzw8YXdFb7NLkn2Y+2LjFT1KxLLY5VDbo/58mAYj9wWzXDg8gh
b7Ah1mIrdBbm/UMUYsSfX90sX+yQArJHfl+pEI4iVcnWYkslWTM19YuKKuqj
XOZJa4vHSJvzFxCZKdBH60jqKKBMfjwYtfDn++1l3vzc5vZ0TXLIE7m7D7bD
BLjAzodMCCC1WtN14cZ2Bon/169/M7z+o+bxgyaknu+AmtvXLqvYKtWo5RkI
RQ0f+Glk5uZuJzbsW3kJ4+dVy7fMPp1T22nz/RK9gwn127dyVy47RPTUFfXz
3Xd+wDG5mtPkl9XjX8a+H3E+HWP9sWYjgtLrcJvBuf1zh3/AthH3+tUPxfjB
4PSQziMy6kzHDBpek4Zxp4zapKEFGJsEifbcEhawX1dhndxJRRPBeHcbZID6
IA1kAcZgCetafMePPi7iv8cI9EANxkNbRo65DKWNbpLwCW3P9JsU3GX2cSLp
Xs4dXYY16048GBNXh1WjCgdutdqRx3taCjazA9lVaCW/ADXPu+I0SjaGX16E
iY4i1tif2hE5onmgybRi7zCxKOX/KdfD4BZTIRnQ6pbFFP0N7QwGXunX02vd
RHmVNPmXUm5bzogNE94u0rW6SKa1pL4k516wvqPuYh2Jzzt0Y7TLtTSu90GX
SEk/JmMDXYiG3B1NZbuw9UhekBEDrLpbdtOt7n727IlTZSW/PG3oV5l8BuOP
Ly490ts99PMhjT0aPVWtBAPjlqJiNOhX+0L8XYSwIuxR6MbYproPM9UxHXNx
VrtkyVYd88WOKW09N3jrebUX6y4kjTOvc4odF7DKRhIPGrrQr1Ld6IuGmqfe
h1yylAu01o2QGOBkVu/8cbRH+IpWMxzvu3dxGKH0UHpB4GV/Xf151gFR8p0Z
E4xtIoI6rTDOqWX2jFnWZsCFWqnPGVfnjE+t3fFL0c2nqRgbLY+dbd31Xvng
/PETOrQ3HXGz/TCXs5J2JrxZfNHwAM1HucRO+Tvi7J+AItHDRYk2vwFlI3U0
W5DP3AbcDehqc33Xo0dJ5+6kYNzrzcvLIQkYh1UZlWUN7o6fHk7ZPWQyscdv
fzhnl4/xpbutL3Uk9lf7m5knJYlcTLm8ZHdIf4wjzp7btiQY48db60rS/V8+
HLsrfdnlHlkP+tx4XpVKrtueWLM9YiTxf+3wwlGRGN+0vWIOiqFRvLHfImDM
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
WXWwh9h9SwXhThFuJRQlXKWgHFYdtGdQ9fiE1f3nsWu0Tp+ttF5ytHJhbcxp
+7U9zmC8Y/WzseGl0bXiyRK9RVNsLlw0kFS1MHQa2OTPIhLPs5AU39+4/zrE
wvwVvb5GL1LOrIiu3URTO+zPRhukj0KQmSAdJ6ipKy/UeGPikp+a8bZk40PR
ZfcLpm/CePv20aV7D52s9S5bveRF5RU8ecubFav3YaK33yyZerAWX8yfnTl4
JcZ3RhUOf5JM5GFi9Ai3iRg/6dXNTzEYY6nQ3L6XIjDuHzU2tHPMe5wYuXBA
q+EYl0ZqD6geboFV46IiP4zTrnuf7pBkTvT/Y6nHxyRnr6lv42rf+lHbdZN5
obsEB2AnPIJy5AvtwR8EzTG/ez7TP4UdsAUmgZdA3pgL1QvlipTJGV2WO7w5
zu7p1NoLd3xjMH6Ncx51GUXqGX/rrrMMlyfdY/ezO5jZ7AXhWOFNrJPIXnY0
ux8tZjehZFQKD9ktaCG6Cj2ZZIiF1qQkb2AiGTsk8kWBUTFeaThbTtYqOlkp
/lnrw/mWu6XWDRmw7PaLDwYPJTIw3nn1ypGNpP7bL6Mk1UYS4y1SRuJV4hgH
KYyU7S2L8Wrtk5qamtpPhUTbi8iLLBO0B3hwPrCdmAWCfgdnz0VubXTKoiqf
aNSUz2mw/pZ9FqrA+PMvFx/eXDf5I8aBHyWJftquV22PSEf3BPHGHTEcYQDr
ylowr//29tcPaBqyIjbV4Z5Vnk/EutkcH8L4ezLlju+32BdneY0owLjkdcds
jOunXotR8PKqr/SxsjVW1fislDFilLXDpuSg/Vs2RqaH7D79yOfotfQ1b1U+
lJ+uG4dx7WfnE0+I/lD95ube6z3jHrwu7ZO13NPh0rguD+126HKwfn75+CGd
JfGzt+MuzBtD4vtz0h39KcQOL89Y2rZ36NLSYXf67TIdprM8Ze3QLebd+ou3
k3Sc/3/sfQk8Vd3X/z7nmlKmKEqoaBBNSikqKjON5iEyj5E5s9JoiMyEohKS
uUFCxkhKSIaiaC5JIdx7139L9Lw97/OO//f/6/n933U/2p1zzzl3n733Wuv7
3cParB83Tea7kjhEHEC6/3yK839VZiApkpk8RJydameR20U3ey+PiKClL461
2KdMLStoT11naPjtYpdQ6zxsB4M/venemNxGb3hH7QiIC6C2vKV1rEp8RPP6
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
JNdRtwZ+M52XIkVZFDDvvFXyY/gUcsBcO2MSaMI2WNZljoNdKGGZguN8fPBe
85D0QigKlbDclnloYn7cW4fPBQAndpzYFCJpO7c/liJBRTYEG4lu5tRUgf+8
2X4j0cOYRQ+xzcUfB5Iw8RYpM6/Zk7aTQ6D6VOtmAf79XJtPXbOiWAgbOJe+
fbizeqDyCCUu40JiQ2IldWOb9MP9N96A8aTYJwmcHw3GdnT3FAEUjxl2+Rdj
fxq36XYrw/auTY1+rozjZ+m6y9u3TOc9nCp3AGgme1k83AigHeah78GL+0eE
1ZkerBkjGM7cwfpy2EYDTj6AxBBp/SpefWpD1AXj3I19UG47orqeK62jj+Ym
zuuNLNPnLS5ER5AjkkVr0B7iBx8gzcUDbaSKdqHxmdO5jOfmK/Ezjt7Jv5Hh
PjK4y3H/WU3V23PrH9xIW0iFRObP5w//YPn8P1GkSI2Ewx/GLV7vltrCznfI
STQbfDUsxKlVfqHWd059quPS5FC8Iy509f2arSvFlnySqMep5AEK4HjjayDw
dOfDV0dyJ8U/7LsMWjcjd6cc0KNGVq5V7pyel/CYcmwAx69HjUMnRjHvPtAk
eapfG+BkE/2pGKztGyNP+OHr+x5JHwrAPC+1YJlkMrbnnRttO+MVAVr3a/PV
YTuKiLdsLpxex5I1ZGmJeUVpMu/5Fowzs0MLDIwx7zgUUKg9LkuFIOm8rVIb
Yqk1cgtWvl9LhXd+y7esl0zp+VG7QNbZesogdrQKbfvb4Y//rszOQ5+VPOSD
vJA/MYCS0FXM9mnYTi8sWyDDwyX5XUCGf/MpP2kOwe+bBk/9uDtirl+cZBSh
K6RJnL9U64m4q8BkeYxnsoahLI6bNjJKN3c0Urw9thqlHhkF/aSQyNFLfZRt
XvKmRtoEda0sjUgEf7p5tpyTLI2k5IU8k8WqviLPy7/GKBrtFSsGj4xMK3kp
H6pmuoWlqiQVvqeBhdr0Pr9pcZbuO4dBI7nRtExsEj7mrnM9dhDb+5596ktX
3D90yjV1lBK8/1xfE3QcyaP8P9T/h7/+e8hf6zEdQY6jtXMTSR5z+XGEr3nL
fz2Q1UYyXPHtsybGMhLOazW3T94YPmpJ3Z1dFGWG/ZF80ybOE+usEt7UIycA
RO88SFM6Ob0+OiRF9sQrqv9DvfxevYPAW3/l3lVXp0+bmPWZGJlubemmo6Vh
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
9zRUNxQwroloPx+AxqIsJMa0rhcVyp2dQPlzBBDrNxL2cY9/Fi8W95RI7WZv
ucZy2cDzybOH9fK5ErHz6L3BYnZqAcFHqnUG62yx2JcXzqvB251PU6y1jaof
p70mHO5xw4mDUeAAWpzVLBHMRi0JLYAQrMtRSlIbmlBhYTJfb578UYsiUrs5
whjwQfpo1UfrP7b3gP36mIHX0Ay90BvuhRnKM5S81Puor09VznAvmYSvD1w6
sOewF9yJ5IuInchCgxhTMIBeYPy3xePfCz+YIiPUD234TD11VvAuvxxfEt9L
TeA5zWxH8SI/wgZy3kzCqWuGPI+SeUxVrJp7tM+ul1VxER6KPnVNfKJHhPkE
VsTuU16mFCsp5zxJ41LXS7Lzx9hHu/q+8Vj2iJX7Q6ht2BQ8h0eZ5yxStm19
zs0vHBCd09axVS6pYeRhGKaBInr30OiRrHqbu86LCdJGt2ANam2xFfpcQN8M
MsTJQod564fcURAygnTBEkFXIXnZTJ4zPOZsXcnO9/Fyerh5IQaswIj8rw6G
QyBc5Aq8d4kn+khY8E/L2pbiZuY9Db+qisnLDWhsmFm92ILfuQn/UGE+aBCp
70r3PVw3ObYRj9jYezbvKIwvVNwyuWs/D2/a0MvkrLPChzXH493ZwzGWGpar
36QZEdse/n30kOhXhd+JPfBn+PU8/yIog6WwGSoZC/CCoZ9UTCLCDySjpKKl
6j2umkv1Gh+jvOii7Tm7LScf1Fs6vHbC+P2lAsfBJL3E6sxte9phbL9luuXK
/hjHLt6QZB+2A4se6H/CrWIFllqWvsQpv7pZee7K6aOzxrx2yLecLBO//ZZw
xsAs+aiL1Zmp4xOtYhbsD8tOjn2aPfutUNGd5JkLMR6XoThWJfvQ0avS+6S1
ZXpLBEMI0WwmwC/wABBiOOsPs77b9s+WvnIBIm071ll9Dz/DFdBj9FBX1AA3
ufJXmnWZKWISfpW+W+CcIm9sH9/GZKPXi7OURzoUT8X7s2qCrYotm55NWhK6
bf6p5kPjrX125GK8X2GilJvi3bi74s7i1mK9ZVoaPPWgTD2NpxdPPLvqkwaU
bFKjxhEtiY9TJ6pwalXEnZepCK+Jjl2FkphRpC6dAG9goHmdyVGDu2N27kXb
f6go//Dy9vXTY+sxNjl9YXfZjtgPkpdkDiVvwXiBko6claJxwN8YpX8JRqBJ
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
Vh6IG9Dd1aKzTq+J0sPHLh0rb00+IM0gFakmQk4UfsktIaRmEeBJ0o13y2ve
kuJq1Y3tRMR9NC0Nx/rDPUhHxXkfJWcTkzwZ+xfXBlEFZrURoN1gu/+0FsDZ
Ndb71+oywN791zw2Yx0ir/jNMMvkbU/Ysee7m/Q/927yqtLmdwbIXs64+AVX
4Y9+nEepSglO4hYR9HdfEHijtcgdXSex42jKhlbMP+3PeQDC0WEUgp7Nnz+x
5CXTwGJlroM0B6joacQYtyFetBklIx20FanNz6/+66Tv67H9hmMviSKimBid
DywDa0+ve7Fuj5SuQB3fyKoPx0KJBOINEnq/WMdcsXw/gNm4YKVdPTVUj4pV
zrYzx47mVFTUAnwZCa+4jHPbGYPa7GaAtY2PH519BhA6GFT+sgbHx+mvbzTw
/o9Nbrk92D+ffusrr3wzt/5D48d2zFM703Jd8ynQUh1/W/fBOEjN+NedbZkC
g5FVFWtrvciC/SVFC17vnoHBnWWPq9/OsA9blIXWrCfvGrR81VNxjBw8LV0b
07qXvCgu1Wep66eZPIeMQx8lqye8TdrUaiSsptsYEd0euugbP59zdjSjBYoi
fW8pE/xXmuCfSp3sk6wnFy/jsz3MrqKq9t6VvG6GZwsfje73ozQsp3h3Lru1
XNsov35fgcZjAKvae4+Dsu9M079ouJGaBvAufoUzp9cw5Zjjo4PDh1a3bxzQ
fRP7apJCNd7X9r72BFiPBnR8rRuFptEdb/c1ARyf3N430woQP9LXfRFv01a2
Pma4D5D/4uTtU5hP7ihszdC+BmDXcaV0oADg0yjD2zstAIzDp9rGcT3gGkGt
HdjuQyPibRfejEP76Kl2J7x/6Btrs0r1IHkBXOp1xtfP+pLScKkC4IOBiHa6
msjpn89L0LdQx9BoLEvbxSA8uSnNOjFigYuCu9BT2XSV811hQV82MJ1gqGH4
LOiEjiFTzMZeoSR0HQ38cu1y3/2NGX0hhIgGtIlqL0FLfEQm6Ka486oNy0yC
r11jO1opNQSbn6maioqem7EvGjV/tnUSIqOn9B5vB9iSomYVi+Pfuge2jn06
mLffGLVerg7gcr/DydAAoK/klH+XMUB1wQNvuUMAl0LlD97dOwrWRxrFZddM
gIfiTcEZzu3wSSlwxWLWfdOjpjGC99kAWJQyuUKZLdppecks9vTuph1Fab6n
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
fsN8giuhwtQM20srpdz8EI6P9y6yHNUPBmj2OmVqi/nIifPTBgrYHiedLTTZ
sf913Dzn656K+VFWoidvxhSQryecEML+eyfVzEkRx9PEGyYBHVcxP4rea/cB
239vxphrVRqA4BPSBcXHG2fsCrhjIwoAqjKP+ClkAEweCdjjeYj3yk2aeCpt
mvj5CSb4qdRJnFRf5p878jitavOxpBu8KUtPZcTlwjkBYY7nfCuMvh/99fqz
XUGJ+GNGfEOdqBexIbYF44yZjDkc+QkXLscmEl/NB3VaZvuze8LUu/wPb8gA
TS0tXX6gc9HB09AHgLWm/17Mwyk4R1nZcLQN6+9R22rGBoD4cfoGSgvAugmh
5vB2gLefb9S01gPkUGY6I3oBymt9c8MwH7Upu5cWgnU8VVVjWn8W9vPCI/FT
2G4zrR73R/IAlpJtmkn498vHMxtOYh77ekyptqxpNi+qvoR/p330TkVrLUDv
aH8FdR2uH6NDFR61EwAg3MTZBXDUhd5kyvzQTDZNM40hLcB9Jgl6NXpm+5/P
vxWJo53I6JfVeX8vbSA+oXEkMR9HGwk/wol4tcjbkl71m/bXNKXb3mczZ/tT
j0R0lOHymRr50mJREwYnx8zalfD2qmn6Xq5mrJ+ryp89z5mELQOWNa9eUaB/
wrbrPOaNFsPnOzpw+Z7/uqIttW623/XwU71cjGtt4mXPi2ZbWxk+m3bP5sMf
V+G8p7G/6NtzgHePW9K7sP2E+t7UqL0ESBo37jiLv+8+7N4SWANw4ZtWU1KV
OjyfTuq5iH/fJSbKz9CHpl8sOtbim929KdXnT88KReJ6k6HomXG2bOZ6jrrv
pdDi6QlvdwO3o9eqVnCdXuLIRln/PyulX8+sJ5A+ZsqH0X5uoaWObKbGpgd2
yFLt3TVyIGO1i+4RAIlC0bOsltJAVbAnEMyxDisS8L+P+ciqAFqDt3IAqna2
RmcwLznuI2T66uDsOiyaRrO6EKWsshJWB3j+Ss+/zJgCammlpzXwfnb7EZns
zR4U3pQt+tckMK+0rZasXjdQ2baYc4E3nZ0i53Gt7Re59z7IyRI96CUMwJTd
dWxmmzJ5S6uxe5UMwLNWsvt2mUl4UrHTUUAKQCSt/bCeGLZPbZD7Pcx/elo/
BITi3z3WmOdyHB9PbeT2KMT3afdQ+fi4OMB0zT6n89IAVs2LXaekxyGr7r4j
IfWV3N7T5VUjxwOyqZGHbMXaGnWJWuT1N8Ani9YgDpTyY+vXa4f7uKd4T/ju
xTqzHjCGdfPXqYLJBe+CpiXhJll1oA4cZ0YnWZsmoWd0+mv6VQq8G+7+VIN1
MNXQ+o/5MQDbp3SGLyVg/lG/pKoO85tbVeSiSxi/iI5Pb0ywrk5quV31Gett
uS7R+uXnAQ695ssXx7yTqNd/vRvjXVJbbo1vEParF5G5aW4Arvdo0kQc3kJi
4fIcZZ8XMwEvyDk5XgB1K024+ZdcUx3cVyO9XlTZZPjb+oH9V3Bc7LZtTAtv
nK7sWtOYdtGcrP9lV+/I5Xo4eivw2kLbK6Xfn3KAYGdIo02lVuWqpyqjOkMa
m1+PdTW2zzIU82cV//95op6bx+dn9duMeTYQnCS++QBSfzRXG+lnJ6hNmjQP
9QAEjEV3fn1fO2M7Qtc20zcN7JMandUfZt+70tcFdgCkVBs+OPUMQGxipJoJ
4+LoiFSlMI53+mN6VY04Fx3Lq5LG+Hhr5G5FF8azuJFdVSvw9o6x7BpbfD7H
lGCdIca9wemHdVcwjnkMS1d+bXoLfKMKVWtbwoHj273XjzGeBr26d9PlXsJY
b2ncrR3ZHF+Ksn3jNl89274sVsA/NTj26Sbb00Z8pnf9jISYBJ+unpH6/jSr
fz2H+v+Ufs6TmUvlSRVNFT9vT3dbNwvJE2WhAJFj+RTMI4bOdbEPbJ6JmPYa
2DYIsOy9UusNXO75ZeLV4xi3pgvyyjZUY55pHhwjjnnKLRrePc+MAbY9v5AV
8gAgGrg6qd5h/vOZukwYn+88bVrTjnFU/OXdOz7ZOC7b88adzzAh0/oPJa7B
32dPrYp+EiNX9/1uaKlXEqKEGPEZSaLtaAc692cV178sDaEL6DNaQdqAliI+
tBL/sSFuHPELiSSClWQ8b6daNtal1std9rcuqmZyWzy56fve+7RetKNUu2gr
Fllymy9qXZ4j/HjnkrUB4hnG3Eaq4iMGoy9k7Cxkh7Ee/3YySNoF46e+HsOu
doyHnFsjbPZjPUGtZ+e76mofaMp2HWq1BVgsoSovq4b55gZ7IdXVZFARNOcW
4BqBpGUewqY7AViEI6TEDpS3fJJEItr7WV+GiLJs2a4on3hjoQuPNb+/zM/7
baPNXuS/ePlSVS72vQJa4yl7NegOfMPxOSh0QonVfTU5PiJS50B4HGSHhatQ
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
c91IM8CZj9SlAlWYz46/f1ONcVNspK3+TAvGt65bL6sxfyWGj9bn4fNyJ/lb
0zoBIsfra/nwtvVYVmUF/l3e4btl4TXT8G1co/pOA+atd8tD78SEkg8trWK7
ww5QwrmNvYdtupmL6jbWdtcXCmN1chw9JdbM9TZj/1GPf33eQjM3Dv2391j0
xFNUgbT/0MF/L/cqNmAf0OErfnj3ZPrwh6XkHe+et96gLB+60MJR857yZSyy
gxOXm+z4t45XOA95qfWQ9w4AY29q+VasDzrG6Ns/1s7Ow3S3pbIG64gpxm6P
RoBTFf2PQrG97SpoHw7h/Etbw4v0ZwAXmo0KWZ9g/x3e1haBz08dnWy/hL8/
PtbewYuvTzfq1ub6BsfFEZlWp7l1PtL6BtvGQbWlv8ATf29t1HELUaxnHGNT
T152YiezF2bcrr+5FvY8Vkwsj5ehNKc8jUq8INcgKnthr9IeRncZUbbVzGt1
pJ/vDhRbt1VRfduOis0eInY/2gG8SS7IEX84MfNhxBaW/H3x/Onp9eF1e/g2
p+REOdCrvZcEeJDKfWK92vWpHXkubvyz60XlmDvtPPANpvLE3X3wdmFWnF21
FoDo+XJTa5zHxsT5rnMC2J5oYZd0CEApV9fZ4gDGpbxX7qOGM/h6wrZbtCLJ
F9zIqmE7pikbNYiNUitHkq2pi4m1hDe9riuvTIiAfaFFLsPRAlEcH9Or9G6t
vzkTlslobIK3P71l9JuQmwRSa4JH1L7Z9wwiXiYy+HfSzI98wsdzagVdXPD2
/fomFyOcH20Kc3XA+XRp+ymfPRg/cxrM3HYAaFRstheTwvhZEGJ3Qxaf/6j1
ZKPsG/KzF2dPj0gDXIpk07oovK/uZ7mcJ76iEORBrEBMuJ77Ivq5Xtm/Tn80
hrkPM7L2eu4haz4YqwiusKozjqI+sX4sq4mYyf4gMnCkAEB9xOgzFebvL8Zd
BvUx/viO2w6exbnQiMTnjNjZVs/nXx3jsM7+YN9zHONaQklm3iTW2VVtd2o8
ML9Y1LKham8Q5pVtfTVVOK8peZ036AqwoFGlfLY/Rk25TUG6DwB9plqKEOaZ
foXMOWEeAKdfBOXweC6ksD+8m86C8XDQX9vNWYuoJYeHhEu49RVFjr7+YpKB
8bLHtIUx/DOZqne0pT9yDTR9iuqRwPfr0jJVezjk9Vg1azUrMFXw/Nnl/a9O
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
cuXOAqhPXGD1Nfbk1JaM2jOeSatAIJHVeGPcG5rz5btGKdgvN7JWWoqjfe2M
NzNwj2EZubjLfU0C3w671SaHpVL0qf3O+YdC7G+9oL5ODzbjTHGiH04bP/MO
cWZQ+vUzb1KmgTVGzuBOGOrDW9+Aag7wPkzG3S4C4GTAChcFtM+5l+8lv0T9
jgbZBGhfALgV0K/H5w/AG8uha4F4/3aIusYI2rmXc5ucqE0rvc1WXHqj+WsY
M847lqwdOVC6+BHbIfaOY7cMLgs7684saM49ce7CNTwuIs7IIPAMbSKB5jUd
MwFmPhqqHq6PadZlvKXzS6LpXlKKYq8k7awNLWeeumjc2iQc3mHo7p8CVa7v
T93F8aVhOCnSpz3Se41pJ4VO2fbrKPIPhRvRDBcRSNhSFlLWUlh/t0tP5sfJ
lgG3Q4QaAPy6W17pwL1hen1N8zka39iXhqetVBAe3VOvhPhDfnJGEyD+qPzA
/li6BuBoU0fOJPIFh4rQND/k6+mv+0s6ngCYTB9rXcaYh0nX901CvTRl53jn
XQR4krTUTwn1yFZddz39FgPpNHaXI2+f03gkV64IQKtOPqcSJb1L+s41tPcj
I1H1Dox1H8YnGpvaxiFgKral69kL2qL3j0pHqgA49o3viOO7kw1bu9bXbagX
P186cDUse/TDqQh1lzvusc0ikponZ0pttFnL67bNn/fhye/3y0Qok6rkaTLi
9/uf/U/76lcoBoQcoUgkIzYTIA4QF4l1M7tZvrCYsW0SnsEvvfuWupN3h3au
kVzhzWhB40tW64bg6mdfe/Rnph+uNs+rRn/2wa1RsfI5UAdkWs+ivs6Phvd4
YX9WjeX1siDPSBgL+O25gfXom25ZlDYjuV0HUSoMH+ycgbyjfyj1+VgjwJqR
k12lTQDZQ9HPm7A+NrKtOwv3rx5732OJ7SXGdvXGoKwfYfltu954a48Tnv/B
dPGrPsa82lhP7yGs+w3N6QzC45WHLJ7nP2UkKY35wNG7DPY9eXV7R85BWOHE
qk8YXO57L/hm20a+RXYSFBHyDGm76J/3jvAf6r8OLTyGeHot8ZBYTDEj2X76
eSnCxGCOaPpOvgz+ZNFzmmoAq6I5z6SqHKM23bpvr6JsSc3Mc7B7qSIJbgUd
Dvy4f6KA3VFIbRzeFz52tMM6a/GoY6LaO/qGkjZXd002cElnM+OWu/+5esFF
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
9SgP30jMfoR635ZJvyKA1xnvTNFfYov4xSRdNEDXnLYtKE2T15sG905fO3JF
1ezn+2eHZzxj9mLRZTsXqKLu5GPz6UuCuuE25A3iwVtU2bwM6a+DmFVs0R43
xh8IfhrNB67eb623u594n+l1UjsBx8tcR2k5t3Ob6DzByZrmeH2CqqcPtsnH
tn8/e/0vb6czmS5SMil/y7NxRYTjwM2Dly0iJoWbDiF+KBzxrVdtyaVWjH14
mtMGoD72oaEU8cbR0dL6AfSjVyYSGu8h7ng/JdryqQPx5LRHqzAeNzUR0ViF
24XHPzZpoZS4KRUSjXGuqrQhfNkNjI9XXtpXhqA9ta4voCC/X0CbasvuArjc
5n5rC/rpp9Wv0x9hfFxeGp34Mgfg2reAuuYmjLPfdtRkN1Lh7QOFlDMZAIuq
C7OX3JwA6XbR27PvvRv2H5t+OrudMUMw0nGOke/p04nm7Xhd90vlHh2rAODe
xrqtibdC3gbjhSXGj2KymKwk037n97/q46K/DSM2gpWY8988J7GaazOLffZs
7v4125d5ci1Ts8lVv8J0iRzN+HyrxaPmNvS8Nq4dLN0HM4bjOpUx/i0a53nh
jfpMHsvvtUa5d0y5Nwglx+j5bjXU7+fhp52fsd/fDBd2PkNpNvqq+wbizp0j
Ql2sKGVG5Ls4UCaMuvR0NjP2v+n+hnJkZGa3NkrVYcHO7Xic0QhrNx/WB0c3
9JrjedmnTrxkzK950I++Y+oeBt5W+0d3i3zpQ1fBW8xfHRJt+eQ11VQf1q77
yqW7wlOIg3KRjCB9WHIoI+Ryyn5mI0TmSsScnx3zfb7p18WpFwh94gRhSM6k
nCZpBI1wZtpFuUwqsEZY+Elq7l39YDy7ytYeccapQl6XcHUAy7xX9o9UEYdk
c9i0Kk3DtRvZdknKALa37zkew+1GRfaOimru9LiHz91ktNLgwOU0o8VSa/rd
Fk3NGZ3V+Q95/F/zsi81Zr2iXxk1Lnl1PfWlZTRIfFkXMa0Uwn5815og0Cnw
Vxfh6QT/1D4FYx4AqduD2nF8ALS7rXocuxDnPLAxLNmNuKT2mpnsPhwXN6l6
e/cAqHSKuuiKAbxsybG/KQzQ1CbpOCwCcP2urknpAQCfRypnBvYxziNslLl7
DKyeFtpNC0XDsd4z7mzHHtFO1LSfyxTko4stDmU1ZBHf++N6Bcls5MGhf/q8
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
r7PEZA47/nhXZJYf2s9JfWfzt+D9vg36Fa+sT4UntWXRganhrL25Mm6e3jh+
7cboXDAoitCjQmlZtE0Tf7WTg6olbUTy7/aL/enD678txRIfZBB3Rt9TFHHJ
c+lx7RbkKTsUezvJr3teb1CZSQ32+/u5ofWR/axdbWLZdMQ1tX3tZdzYz3bf
63Ip7N8VfV31jFbEGwOLe40HASoGbnXr9+O4G2rsMRzA/NDG3hKUaoMre+aj
tO/f3vWSDrB+wKhLC2XWgEO3EtY37Tft2oaSOVDeQ8d6DYMrvjX3vIDGYZV6
5ZaLrFlJJzytfe2HsiXe7cjdt/PhfGoctZgyoZZSX8kQEaM0iSSOv+o/t1P/
gon6uW5mDTlPzEg8tYdYkRCyimoYZz0xbYrPXOtFu/fGStXVRHFbThzDf1Dk
13WLOe5xTeI2nDNtPrX9zPG0hG1CtP2+Msve//o+FPvcn5rFGYAsLJxwcn6g
aFQ2NXd0PTjHuCCuTB4ujm+Sa9bViwd6CbmVST9Eu7rIa9dZ5pNlzHoVldMj
cXp0qJOu5gOgGVBzecELxFVBFQYxyD/zghTNOoKuMR+Gf7mtEAbgIAJifXIN
o39fm/ImcyhzRAjs+A+q/3Md+n+ULLl2SHaLikr4P0uKF7t7Ph79la+k9iQf
OWaZ2p2dRy/iuFBn7tRC3hyqcW2bkWIh3BF3EHuD+ENmlvb67N0AujPrph7h
R3spmCwwTpB9vsRcgVkCiBcFKmYuRsk/XXrK/kkAU+aKr47cnANvNhrr3fJA
vLnimPJ6yyvDnrM0Dp1TNCjetivsvL0Z8gZj+ZNcKCP8D0iWufDBUfMZB7uR
19uZvzv0UK8fZC3CDh/G/DfbrOM1FodYQ3780tufAxTr3d3ppn2nVWJ8HNfm
8XOE/+ye/Z9KM/AjQK6S89R16g6VOVLGTdTJmMsvry7QPP1+Wmll3davAEcq
ihrfdV9iUiXCtVe/ATzLHV8+sxOAnhVUwkDeXpbjUjYB8x05D8sa0V8yc6rK
ylHOLWirXIrXqxS1VBmhrCsZqp37HWBXaV6dKUrJUpk6VZRrim9VM/D7z0X9
VXu/suNiZVVHoZxaoF1liNKybGyjZw8LJmZqFHl+OsxIDK9KJM2Ia0UNdsge
EvP4k7vx/1py2Z8tE6c0jimzc6G4ofQ2xiUlhums+yrA+dQ6q6EBYIHcQuMv
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
utd4X4f9O1/hZhbdVqrm3FlUO9xS01LZKsCfd/8N5h0jyuYRPaJx3JgVP1ye
3U2h/BEkuf0DEuGwa3+n3a4I4sLqg4+GzRXc163KW6nbjnHZcQHRPWIx9p4T
mPo8fVtWJ/cZri/dfvTxui3ywQAVwTCI4BcYZNfJutbKw1t5w9r0RWM5r9DL
Ifvmzcd4X03EHtUFV+oO3xm99dpcpfoBt2vKxs181mB1rc06NG0HrrhWs04y
6Qk2rpIukkp6hu9eW7pu5rSnWPn6gfUl009jzyveBZypo7DGkT0Zy0KHNyjv
m5kyMOhE3dC9Mqka/QPq1+8/mna/P8ZBZTPiZ/bBeE7XNY7nTBcvRNJVMoxC
WrPAHAMGYAPuoPaNeWYp34LXL4anrza2OoiADjyGs7AJTjEhyAOpIKfvB9TM
a9gPGSDNCnFnIGmpf+k8WX+OGTAFEmAfPz9Xi14U6Sy6oo1DR2MncyeMO3RK
d77njPFIyXzBjUIYd9RvqzlU/eP1wwXj1gjmbL+qaHzTYKlBiXObYr+i/PnL
jzgfFj5Uu/jSpWMdejtGW9h3nio1UUJV5rRkTalXieyKIXfnSJZLcCSDlHjP
66+eopKtJiV93qBcx1UvsUepWY92p42HJa/Ve6x9Tye0M++6juBItNnRaDjR
modR/fIfR4Tbr9661dlK9iUKR1PQXn6Fp4uk0VUIZlzBFtqBCZiRGlKLlMyu
0AW8iEbbHXzJflFz/lrzTQW1LagSPaqlP9zPNc79ryPInV/JGIxIzJrAMv55
JbkDMt1kQoZGCe4VyBIY1I53Xt+o1qBW3+ZmgZqcaqyKzs4xEAOTYSWrQGJY
H9wEONwQW49fof3G/ipNkqalve4x999D/OM0uA8eqASdti3s7Bf0JrZ/YK8p
n5fkXO2ACpEU0zKvwwqlPRqHdCPt/MI2z5bd0vmpdqDflINLZat4vwui0agS
ZcApeAFySAcNg/HEfonlP4dtbjmkUH5cEMxE0YwhOsO3Bwbp3HTwVX0Xmbx4
9Wlm4n5cuGjpEf/ouLrVcUNXjhmSUC+Y1+ZsPLGPVnU5Pb6tY7fKpruOi55B
ZexsNIlfINQ0l5gIKh1KeN9t1WIfO4yFPJ6lSZuXNCz1ksgKt+hZb+I9a/4N
S4xtRU5Lvhassmj9ZhICkwXy2THaSfonzc5qePtH9NAIeee+ZebS4YLTtHpk
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
EMGPp0G+om5+tnNSe5TF5TxLwjh0r2WBVQbGx7aNzXOaifGebQ4rdqSFNORt
3b9cc8al+p47Z6wcnk7SaVNA1hNiDzasSZouPgzjx67TrOQN1iXzwrVGn4j2
sZUR4j7X7avxF78K/Yk95s9fNyECRgsc4MzgbECKvSZ1HdRliMcglSOK55UD
+IJpNBPHODAubKBABGcJZ3ybO1KrhV4IrX/XJVjKyd0A4y4FBZEeTtpYe9eH
7PRIjLsfX12htX0zLqqIOyK6bnvDyCpcOaqU2Nm3hG+PJPrK+N1XtqTGYqx0
Rersw60kvbpv8FPwwrjpaRj3svTVLFFaX5c8UMe5v+nChuo+fezDja0anim5
SGSKkXIros7mcFZWdfbe0dHLw9TNKAqNXxcWNx2FbxquH7w8RkvPpK1B2xv8
hSFmQypMA32+3iPKHWdG+3f/ORDoIRH0CA7wI85YPUdlpJLVmP3p92IHD8HY
oLh04cbo7h/GjwsOse2O8a4Zm+PeDZr/fmJJ1epPCZcPdt+2cH1oKj4blXww
9tjQc9vdHB9YXjSOvTc1S3PaA1Jej+afm9uX2InKq2QyX4xeV9d2iGzvJR4Y
xwjLCs4UPOvGe+56kqLx8PonrVdbrycdgZoEet8/+b354mvFokQ3i+++Uih2
T2y/tO47P6F4oW7icw6FKD1UeK7ody9Hd0Pb91p9nu5QlJR3kVNcORqtITLr
mTRD9F81SCc6sCzIwMe/7ct+NSRQCerLFPPLy3k1a+OrTmJDenZblAS7MI4f
+iBtQBnG7nMulW65ZIsDY2es2HZ0ML4cX7zmwFmMd0xQWWF2hth1w0fOG1Mx
rEF68PiZNjvRp+cKXbU8TJK6zdF6Yca6Owza6r5ncEO8+cpnPa0mdsi5fzVH
xk55o2Z/a+BKWX1i4Sihocj4Jy0v38YRfYbD0PU7DobW0fL3+SOaEr5Fv1AE
JfInAeZE9mpDn+aZzX65ZPnTyBE7XIJYhJNhMxoA4vwEyraSH3dbv+TgaZ/C
jdfsMJZwPpg/0My53jGsZuOk7vW4ZkxR3vbeGNd2sinsbfMRn3QpWvHeCmNj
r87jXGwxLuj3LJHjvqFhu5/42ASHAlzWDY1Z5oSxlue9SAcbjAMdjRPvmWF8
s6P16kHWGCf4+m6sJPfN79az+LTDhvpB44225vSuq+ud4bf9+Wg9vDfBfGX4
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
ynuE+cZLLd9sJUkASfPPeeIqAHfUX1xs34DxjLJnmjFOn3fraFoCPt+7ueIS
n1gNHJOI8TNc+wk2bz5vvlo05tPVrQm20yX5PssqntvNLMzSnypqp76bP6ZQ
aGnrxry5M+IHZz/ma2KbsWU2fQpdHTnsT49LJmcSTcqKib+bkD3xGQ2hFVMn
TJgGSceIx0sCJEp4e+e5Hc7Zkr6mesmxMLISbcVRntWXwvbdEjFfiflffLFu
jwLG/ec4jPtUAUpjgvUYNgN8zLh+WNoMYGbYkDGnDvajK46zqU93jznDlsbE
ydi2ZvwZK5HWVPsMG3EE2wZOYiUSw1Z1wVT+SN9+szAuYUcayBlbA3VUgejp
z9F10hsw1vO4z7rBcdyCkfE13Qdy4IyvlvgE2ohTX4rOT41D+NWFbsLPfW8f
OY0M0G60iMRK50+6TRrfr1IQx5Lpgv0+qZ7Q0W83aJzrpR0M4JareNj1yErq
45wAq3BHXN4XN2klGH+GfWd0Ni7CvPn0uQc7t2Pe9lpvl+oA1s9LqwvmT+MG
4LgsZa+K62vPNesT3uYAbDeu+LJivj1cZ+7HiXl/SyHJsQrrsXk8x5aNWO9c
qsS0hQ9gPb3VvnsU80Pb6qp9JS4Ago8PJu3PBrjR23a5H+Ml3gc1xzmjAJJb
bp3UiwGYP0RpNG0FeNqnm9t/HduDjqtBbDhe8yF7xKezAI+7NGJFkgFozUJH
mzB/WVoTqb/J6iMY3bq3jWSxG27doW5PtYqnXkrM2Hx++wtaM+MJ8giZlf+3
S/LXlFHUhV6gKIxb/MfXjiG6BESEzIV6GPms+mU6tyqfn/7gVYyZzV3Kzlaf
+CeHABbEF21et0dwKNBuiUieWm7ddpt1MnfEnCiJJ/t23RMNhZ6MLRZ9G/tA
Lm/F/uFNC+DU1cW2ILGeQi5wtU+SoKe+vbLShmeDE5XnRoXTeSkqxatxtt8H
RVGK8LPakByVOEpfiaDjqk2ZwB5we5Mr/j5i60gHZY5+gRdd+9w+RwBEP1M5
mhgHsPOZovdoLID606eeC88AWI/YlqSEY3P+hb0+JVwZyvr3+y/D54szdmpV
2+d8yV7/cV3EWpHl3ugCxkocqAy/byz69Osr4L8oX+3Ld3jCPLGPYynipOsh
8ZN4pnj+8A5HsSvyoWdfPLQOScL6UtioFHI7jTJ2+d7jEP6LALtq3x2rSRyF
z3eij2knYvtZN81P+gLAtHqSb0gqQH1Np88qHK9Vs8dbLwXAoHKXs2oGBS7W
ynvT7+eirS6rsl8pY0qj2NSK5mnc6jmFWJAosZWVmfBChRhDiWBusQwx/Gnq
4SAXcJK5hARvF8+68fhG5Zunfcf657/oB9IDppab7Vs+9qckpx7JWtaYrpOq
k6sXZLWUNwb/TghEC0QIfBAYlT8pdGK99fpHOylSZdLmMs+PuuoSevH6PKfJ
Rpo7W4xdzmvpf9bXNMwJeyogL3hfcNOWQHQVCRFhnKusA82LQ4oflpydEb6z
HuDmpvkb+LdRLkzmq1C8Xaxmk3rAu5Umq2asajBcQ+dJFqV/NdeEbitZjG6M
hR0FoDakTRpn2QvQ2b/ZF+mvtU45c/TsoJEYYtjizsyieY0AA9mrzx28gu1Q
6LljgqFl+VGyClIkWR7Bv7+rjWggyvE/0g/f8W/PO6/G19/H2P8BqYH0hJSP
qEayhtbGpFXFlmkWu/dlTY1fl8IYSAox/gaB+47jP6AeNIIo344Mp65/oJav
vErNWTQgQu6EWiRR13XtfUYp5pVz26KrEx8CPHy+pKP3VQrFql+tnWMgDkab
q6v4WynwsWqgsOj2GDRU7y3KqsX+tYOn7tLjTyDfL9ImOAjg1GfeOuvVfMqH
gS3t1/Exg8eY/Ur3I+7/YDH/1+UtKkbn0DoyD1JE2zCb1Z+vMOcId4s6OXWu
3YgWwOeiak8x/TfUjPxc16AdLXDvWp7XLgOAdbnxnvn6AD2Hzmmfk8I451Ki
5yeMI7Vurjh+fwdAYmmxXwU+rr5J80d6ALolhwOkjfD3U9Eb6L8L4KpBp/xV
zDecDrzU2ozvNyxbHlC9E/OSq6+9vXC6mwtrvUzG+xkKSB4c4+MqCrQ9lHDo
fvWs21Wc/mDeTRc+jIcyMxY7vNKkgnHi1YMKakupTdmrnEe1usFO97CMgJB8
2eR73kCqaD46QGgjTbQV///PJuQJFM74be0COozCtyI5tJIoJPwJDSKAfIlk
RppGWkdmJHUSEcQ+IpruLVmWzMfAQaogXIjrZBOx/FX7eOW9++MLjpw1VYQ3
kf0O64zYKJ9OR7jIGVBB4pT4wShLgFXPbK7ytQMcGFQsceoCONnbfdHhPsYf
WdKOMzAuEfBt3aOkjXFJ5FtH9p2f4URogK2zwdCY/RllV0OTebBHcJivbWGf
HxNiwNaUAX0hgokNRN83B/3Xsa//s/z++g9ZO7cYzNkx33Xrs4hetntY/x7I
PGCqeUAbbe5r2vygCdbetCmJLwFY0RnWYY3raffoldHedwDHnw53V+F6WtbT
1h1eDdDxTvB97iOAtnd73+/C4cy73XUh+L5dt9wrIjEP0G/v7GDB9o6gXvkw
WKtBc7RfZC6/ZXK+k93Tj7MSOJi5OKaAVbHybLk4aeEjvYkJkUleKRCbF5rR
GDoNNLw0XA8fEKnNF9i6WmXNGbmKGdksb2bcY0Yzw2fMnSnAos96b7ovqx7z
Ztaq6Q6silPh/1oR/ynk53myx5ds5Dk9i3ltbDNX/c7L3GMbCumye5LiaOmP
wmoVk90h6v3i3pm5FJDuT2lXSAeQyF+dUh+J7efjtY/D2w9B5y3lgrEQgCs1
MdeCQnZC5oJr855yvVrBhvk+LzpECiGsiQWE6jd/Oune/6hw9TuMGEY1yAkx
TUW0LLmxwJotWybz5t2zCoZX3xEVqokPsL+xrNl/TeLEsbGax2uadmVWU5e9
4uywvjBAXTqS8ZQvMxaevSV3KaR+hPp3Ll0lSVSoHs3rVkgC6P589TERQQOp
1zdrI2y/gP+r3krOPZ9A//2suw2HlGHa6JV7YG8w1vVp5gMeR4CjJ5vdOTTn
dSjuu2zss2l51IetHzYPC7A6+BJ0RDAyIXZi1mJPRJDGbSf5p3mjf34h/q59
7Ht7TCvmTpLEh9/9IJNEn0lXb9l9POv49CgFzOv2ezCcUbtCT6HfftjvRgEF
an13+DfEAGT40lyLAgEUDRSDhSsToFqP57hF0SKak75JwIXidMp77p5l9us1
/2b/6VaMfuPppTG22IZEpmJ50Ep8REZqSB8dxghEHumgA38zvon0O/OFv/Za
fNd37okUx3ujxlvihL59tz/OF/jvT08qPLzM6KpK1M2jlaPnRLwAqvL2Rqxz
OkbLzukMeXMYwDgo/MAFjBP8eZvm3uBc/62fUwO5krnIN0gWDDMm+jmZkfeK
xuUP+YLVWAuuXV6fdulpiOHT7ekagd/wdeb3dQsW1iw4Pm85u7iQtwDHGhWF
Fi8zt0I7z7LFeemZDOfmP6evhKLr2eaPe54LPIl4gPk7zxKe3kVBU+v1chPL
CGaigFF4eiRzF3P+SilOa/Yd7DYzNk2crZqqoK8zvNkmVofhxP6akxhDL9D3
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
9Tw4ieUMTaQKJYVymJJIzicfUbYadQh1qeoVpT1W9Nh5dYA2/lL3Fj/rDOrq
Ya46683obz88KXuy5xtod50Kd4kDkGxl9FmYCfCw+a0rK24PNst6ZiROjRMi
3ZkSUD8NbY6cUVOjYrItNk/x8joz66l1UsqqJ8w10K7S6sdsHLwBgnvqrttN
zS/XHeK/WB394+01RoZT4/UCOg8tRP12BXAeOYn2lxl8UXyTPtZ76AuJIWM6
3C5daj8izES/8UDX69kRAAMXAVkxCc2eqWddQsma6UL2E18JXXIrsZxYR3z4
3gOP4X/g+sYzv+t0iqmfICIIGzKccCc+EospjPMY58Yt2SYcLikromJp2sNl
O26w5SbAuAmn1ouEG/TTdquNyzIAZE0jNEPRH8rFe++/j/Wt2uyjOYr6aW52
NlJHf7qtuVFfCo8vaJqhX4Z+1K217XwA6vVCUcpxMVcACa13sn7ol9n1V5zx
RP8Zo/FKuscD8a1nvsZHZ7S/m/sdAnxpsCg+VL7AjBUupi3j5kQ9Dof0cMmd
yR758RQj0+sanCZWEruIxF/PEf43kyi5kzxE/vweGDrdDtHgG3zliPe1DJH7
BqWN9wESapWLuO7mUtVbaJUfWxFPD8R07HnzFe43LC4Zb0a7SSkL6Utzn2SI
euQ3G3lc/rn3OpUmS6xnmg4b9FsZeqxKexq9rRbtSKvzNItZf3NUdFKQOPIu
X4Vn0jNO0uxsz4noLdC5w3E7YW5QZhLaa/m+9CO1u6g1eerxaiXKsD1TOGIj
8pWvj4buSj+jw/OHs6u3I79oq7lTaIq4VvkhrSqnDaC2tbNmIcpXDTvKLjSg
Xd4rLeGqR7/ZFHeHGcu5p/tG/arHVNjVV/4g4bkXveT9nJ6A4T6wy/+cPFrQ
OcA7p2q22uyu6fb4N0QX0U98+bfr5f9MWktsoZwhu4nH03H9tNAqjqvrWtNW
ZYnaPJYFIONvn0845kXVTfA4zyKJOD6h35gVJXfSWvM6PH4g9bGVrSJAeYaX
rd1xgDVpg9bnFQAikvIsSvG4RKKP+dR6xi2J+80eSiOuSTY2vTjVLpuSZskm
j/aUZGLei/vPJXob++N1lyTrWHjIAbQnZVmwoKxImGO8FPdHJgQbR6DUTVA3
XojyUqKZSStepzX5vEU45tudlG6xQP4c1GR42rDh/UVcvFU3HnhMO8Zwh+Ed
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
moXRXtl1b4VuvN0Fhl5skb4JiDcbfO9OJPnSXO2tY7/dALi8S0Jd2zvnlvys
uXMbF5ZvDN7kJ3BZriih+VCUhR3yyz7py3YPkJdQpDfanY7cPyF52MzJ7jzA
7GVn10dxb9b5VY8iYhnpTs7/nZ7/vHbKwCxMv61Cx/iaSoPQJJSJmUQs6U2a
kjqUGGYd5jnMa6b1zKk4IucpfcRbaky6//0zY7j7jelt9dMltPBBm3cxXa+h
vfRmxlvkbU8rxTPNsb2appaPpr0H2DPw8nXLU8SH37neiT4DOPlu6fPTdQDX
663uzrmD3vrBjmr/CoDaiez3Ge0AgSP1PZ5Y/n77ndqGUoDU58r1VmU0YOlL
e2J/F+1y7HKvBJ5vGBd/b4Dlnb7W99q2AuwcjOqOxv5BeXP02ck6jcnZwslC
2fzLdP99rWnMnMr7xCd5C+68jNru+g3x2dndT7aUr2s+8atEhtvKY0WKce12
sXke9sYjE4rMXkzdFOpi4k+WzsxNXXRm6QqZIdW3Xo+TANTVtnjzpGymXldl
8f2U9hD0VZmdM09/B1ZnlwAyDiA4mPNS700A6TDXvNmVAMaRGwrqbiPvipG6
NoHx0zTS7sp4OcBU+KL4oxcAcu0yzoVjfDqiYeHH2A+3VTXY2w7ta1j9mjdT
lid9oVKQW3DcGOzZwXk4mC/hYS9fgt3qjc6NZrJS2c8FAE7JnSiMEASwl+Eq
2IbSRTr2qio/8n/Z6CtpfEHwQXrwkgrfcvh+6EmOH38sHD8odIkZz28/JJpf
ywewRWx+dv5egGqu26bk+t2NT5lcZx2jZE7Pt7hHVlCCSXGKGWFKSBLx/8bP
MFjyr/ehfx77U901d+m5uXZS7C9eGgsw2ifwlCK7YNDdTTObZnDM8OP8Z9f5
ajXyRKx7kWTVHW7Kh+145oGuRs4OGdrNxjlagdzqdOuO9foFO2nA+VTvaM9W
Gmy6yqFyZRcd3J13SZsLI2+WCjvwXAJAzPrUfuAF6PfoFPy6HcDOO0JIhPF9
hNeTfe6YP20vwO+F0vTA+P6DGBdLV6+QsGbsayT7TdhWkg7OSQdl72yjw6lb
dLWcnWOQnHdHkYtHhJ51x1E3nL8MtJ4u8Ok7eoZecVncguNIA32u+wNep9VL
mvU3xS5sZTNU/lWfr2QDIrIvJOOd9WLid+b5J9LX79PC09sOSBx+TY9sfma6
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
3grPywniGJ27KGlB0hzz6XXHl5EkWUMk/EXt7p8nFsoAeZV0mO7Ay3d3c1/d
TJeJ6YhqvlxsOYbqmVD6MRpxbVLpLdoeWE+I9wIk0yPHh98w3ia7jC/qQf5O
rxp3R2kAyhP9PYzysRMTKAfG84elOlAPjyrv+WF7v79xPOWiAfKB9oyimSjv
tIYWPkV+PthqXLgKpehLkfILxtivKhtTu9FPSjZw5LKg3w15kVj23ZixP0TR
9SJDgNwnFgVNBu507f6mKl/k+QtucacsVvMeDWOrZz3D/Gh5M3GN0CekiRoi
k9D8B+va/NVSKBFORBBpKE9jzC76sV4rM8aCYCKQOEVcJmKJfOI2UTRdz5m/
7bTyz9LPUYm/rW/3nHShrGTinyZU29dSuWp5P9ms9a/NvtsMoHEi+kJDYwNV
z6Mh3b3pIwy4Xkm0RR4Y7rwhAVD6e/VnnX2KvMBw4kzVfbRDsdkW3JEAupf3
Fl6+BcDpCsHiiFebtMaPL0c+8Y3fX90N+d7YtZuFaWWScN1CIVADeU2mmLG1
6zlhmpb0TlulSCFqnMx6+/PxiKP4TJT77DKeNFG6mUxn0OecJj4SYmQ3aYit
UkkY/OX1+ysJoE45CXNiCSlCbia5SVUmfQov5TnLG616tZcK4/4nH1fXa5TP
+KxDEx0yepFB/zalM9DVzgnbOh0fvKoGePfCp8a2BWD3+/1NHc8AgqtPZIRd
RT+XZhIzLw6tuDotZygRgK+fv7MH9fpluLZHqhVg1rstz8RrAba27K7qQ/7A
9ii2svJqF5W1I70uuRTg0tEJ5arDsan/2XqspAyRj1E/lWQAaUXWMHUyiTB9
pXD/rtRD8tTBoL3j2+0uQISjXQX6gxzdYZm9IkIND5lvM61j+rwgCdmFBbL+
/+Fm/i+n9lWBGyW291R6LjuyauF6+RtNwhu1pe2c+h/qWoS153bAKfVXvjUp
U3Rt9ULfulQq2GqMeadhf1aTP+o1lQQQE3bD6qov8ofWnS4aodi+PpmWZV7I
1+S5/c5guRH1Gb4RKN1UPnjpYFxl1/QN2MBYb0yt0jsLj8uqpXinozyqoeB/
M7UBbmmeCjyT1kVn1pDw68L735vryt6z1OfvNniZiS2XQGwnZNnvL3NZeGet
3SyL+XEsz/lzZpNLs2ZpHdg9+zm7G2sJP/8So+U27OVr/ln9VYkqQpKQ/DdA
h0F5Z/7G6f9w9fyHiW5WssOVY2U+m8zHdY/Zw8+VUJ6TzuQq4hNzHSWGdJmZ
S3gSIkQcIcF6lpWYuYCI8KxTaRR9ktXxqj91uR8nfHtKSfLwXTN1r2tnio8P
gKPDFaWpg2aP7PUfeTqeLZ3MsFof5X2dBql6et4qqQ/gltIt+2bEE+GiCrrB
nhgnxQ4bnQ4GeCk8ZjI3HHmcYIBRBPaDtTvkVUPw/LbtzcriJzAOch09ssEV
wGPLLPkIFwCvHaJKy1xb4QS3joa7H8CTzVVyFxy0qP4mrdKHD7g1sXR9TK7G
3zPRppwg5pVOi+hsSD7jE0cvrE525UdeU7NwF0sFU6XAr3ZgJT2JnUTyXw6w
Pjx8fN2aLdzJK9uktHXtkVdVLVaSMPGecKz2VTYzXQwLqxcrzzJtAu+6YNWD
Fh/BLjteMlED4WUxs7y//iOYvF+nLmgJoHg3VNvFhgbSd2NUv5sB3KwDLQMr
gMVNQZZZ7gAyD8/a3ka7HKp5qSaNuOLb/VSFr+iXlt+jy37XY4xbKKgvMAeg
16Wp0vD6pfWT6hcx31hzUl3BFGDRHXflTYhP4q6oyjYhv9c5sWh/piTAwn0s
e5ORT77ddFhEFe/LvOuNuDKiaS9uWdFsCyqwcq8QlbKwoI3xlB26Zx8AR9ay
bVOSfPdQiukus8TMe8zy5F0yhlLIvJzUIj+TPMydBDuZTBYw7SH4CRVCdtoA
yR9fIM3+PzXlH5L0wlqsHOUG85nHz+feVDEF+w9LkyQkmWh1A19TnGRo8GFg
MkWMsY/ip7Up26QB9r6hx1RL9FOftfecVhW7BOudU5Qr9yTf+XW/9I28q/au
PDu3Qp1ZmG1r4/Ct2tGazXUY/84mRx6NT5niWPwIwU0c9bQk5y7b1V9pJpff
J6hH9MOF19t7H3zQhLX577K+Zx2jHSnUc3LYYUi7U78g5I64H/XNg+pgZ2Ed
2lizSYjjPoDnGfOtX+1Bv/yyMCZKchRuD39O65QCCPvolExHvX75eC0JJAAq
B+QyazQBqobl8pUsW0DuRXjU5KFuusE9dd/2/Z50n92WXEzrX5mkOdUqyvFt
u/2p9ovX0wMA2tWunoDPKZEx5PXhfBz3q37nVENENvOtPa2pcH7fi61ypX+M
1v6WjpAdhAORQNEkacRNQpdoW7CE7SIzySvwOCd2pe5aasOnoVyqGRNtb3de
GCm2gr7jiae/DtZPr3T98VChCRi95eC+5sAnSPS8pVTDGMexcDxothL1fE80
5IVmPFAKp85u8kZ+/lQxfbMTFSaHrMo40K99KeKMFEa7rMtvSolPQz93pySE
oguw3d1J7sYaABZiBzP3DICUJdnzyuejfWfLmrCjvm4MdmewIH+Q+ppQ6oh+
VKBK9GQ+L0BecIiUuiLAkczyI5TjABznr8kqoz1OxdyUzjOfgKzzS+R7jnnT
6cX2ps7KX+mioanS7EqzBxLJI4QVkyq7EbEb4yAztgA3IU4I//kD33+QpAle
woAYna6H0Mwg5lDWfh5V3hXcx5S4qnbtWrd18vDbXCn5QVGNk1VgoZOuMPOs
Dn2r5VZd9wvoFy1rdW3S6XDZ3EjbIxUgwlJM/3YGut1jnUcXJgDkO1hKrjqJ
evCYEHmOeH+R2erDOv7I93Vmqe9BnCOiv1I5DPHoJb1GpZOI8xt05yndQZz6
VnOvQmgA4h9VBZkL6I/H5CxFlmD/4JZ1ETZwpcEuufmiQR4dtAr5EVE3r344
sbV33cNDzHWJzNrkJ3LffGVCA1lSLrGWWE0IEmv/8nr6x4kJ4/kYQSF3Yp8U
IeQIzem4nuD00lzI5UpY/eXYpNnXETfefnil8R7izQchZdeeAPVl/XBxXfNs
2mCJ25W99wsg2sTT0seJDpKW2UYt9pMwlJWd9OwOHR6G1oUPZkyBq52L3RbX
MWAp/FigX3KPFum8y+FhkDG426ub6qJ+JnPnxmdcnYB9eZxJ1EKAFRWzciWr
ECe1sd83fA5wvPPtA72XAKs7yhtCXwDMedn2sPIVwGhvcuuMdxhX+6LbrD4A
JL790sb/CaBw+N2rg6No342dlcsbAViPU+1SnNwir0jnSVVLt/0Yb9lCpJL+
pBfpR37641Tw30y/XxdlhPhCfCaMiD1MZpQOsmtajz6H9u/0W381v+baCtcE
JYCdF7qsn8tepXpm6NmKMtY/urjchlUe2/9ipLUJSpuMRz/WS9qXze/C2D/6
araXi6UygHNWudMD9HtO2WtdVmE+MtvHuVCR8Z2YoEOLPGM/aVlbVbxOLnO2
vSPKmKyjjtl4nCWby7EMccvJrEuOlzG/NPeSc64CY/1IcRdPvD43f+5xHXzO
1uv7XCMZ4xvXrV1vonyU73M8RDkdREsOefKpS8L68zzmqbIAO1gjWIpYNkzP
675G+BJ2xIW/HB5ljD7wE+HTClxCPiYKCaaVFt5zTczlS0dqUp55sSJurIg5
5GqjPU5/EMnlbK+NcSzS3DkN5enI9c4HUL6I2+d2BOOZbdKWEwv0ATbHB7gd
QZzZEKN8fA1K/5jk47N1AC7HibjFoRw9s9SxHHHGdRUJccY8JI8zsQ56RwHM
Yn3c3qMkTy0zpWE5lxbp3DN3AT50OBc9foDPKWQP7kC/+s2T1cAH9fY2kMNG
HfGpbvLOE6f1GePFg447jwqCQ8JFjyR87ooA0kJR8fH4VmZuppOUz7/ta8yG
bFyfkCFe/4v6U8SVq2at5F1pMbsxSCAgzmcgZ/lXvq8P+gFSJ8YmvrwHKH8v
9V6n9eDkRv04HVZ1C+9/fJdaJlG2YNYlM92WWjTDQ8Mb94ZmjWePP+qZByxD
6kMN7Tfo8cNbvuR0jAPfsPXwaMcULPrM/bnh+Vqq/NTSqdp+YUhVMlDolnlg
z3jj50csI1YzrWB6TvnC9M/WU/r13cNmYhPBg//LwOvSCCFiAv+XSFwjU0kO
spzwoHwgcojzxDjBhSWFp8ct/vzzKLYFFJyoNryWxAQH6Q/qNEHtyuELVSeq
Hw2nz42d7yDQ9Kz385OGiwCq1R6FreEFA0rKC44sOFgisYxYRSwm+Kbv0yfE
JRi3FdSUps4PL8P4pPet+9P62hdTUmML3l4r+ADZY4ffZheMQeDInN4XGDez
Ryp65mA8Exne9bqtACDrc2E3PR8gYyS6pwTPF4ze7FPFfOrg2ldvr6Ef/Aaf
OBsw7g0lv3YrpgN9JKFnJV7v17OxtS/7A2xuk6xlS1SEbS/DmnhTvsLOBvvy
hadLganWoLQsLJG++uHzW5FRABJckxupqybEfv5qCjFI3ieNyF7Kv8q6nz/X
fZme1krIkMIkJ1kwXbGB3dt45LYZ7HwY13iG/2TclXnNgjUtV2G4tye54041
O9z9pNI782Eg7Po8/vZyMx0MBjT7Lj8EuN8v1L0aeWBHR0MzvQQgodH8TmMK
QPSjvrJzyCdCuslKW+Tdw+0NJbbI18tb311nQb4+/vTKdVOUtc/eF9GOYfxq
/pbHGM/1z1sTOQ/9ZcLj69eGMC/8rLjo/LEIyHo2UjRxbIy29v6MzBEtmJgU
FOZJXC5z7NfvbyEDyRZC4S8X1/6rifLbvOMVxFL8m/cflmf68b3D38YdBMk0
cjZl1fT8mcqlzavnbnLhHzWTCr2fFzG43yYrZmvVRfp7b/fsusfF9I6TyzPG
mgBaT2ZlZD0CoJ2Ym3moGWCV1eHYVMS3R9UOBraVAqw9XHQiGO2SHmubfaQc
4IJfato7tHdvndZTtWU0uHyAx6g9hA7dZs89+c7eBlOFWS4z4rghS9LDVi7S
irrxcKGTIfKXLNEowz0BNu8WzQqbM3fhvun17+KILmIbuXdav792hf/XSYxd
gS793VFT8xjDQ5oB91+97myNRXyxYureJ5N2YVp1b8PTrnoD+rYWidK0KiX4
+upJ1UHUz4OXY8VbayfA8lr6ae2zAM+eCtQD2qXVsOwrB9SbaH9P6wDqraLF
p6oojw6xj9dWPbqaDj71fmU6OV9owqVBOesSgofVrWKPBR4lLgiyxM4QnuE2
R4T5JVMoE7C6Ma9lfs/kPZNgLmYKYVKYYUxqkwfJ/f/UQUby9G3L23ruIF/A
DWc9e7nnvZFKrh+tEMdKtPOu2TmvIGCm+ozdM2LZf5W3Rx4pR+j+4Q73/Qrt
9Qlb1KvYltRzLFw9Xr5YxFeLYiPxfsoMzuZfvQf3dOQCj6YzQai6gt/n1Cng
0PTw+5IGMCTT7zoai7jxYnKI4XnG+p4PcxWLAeYb+bmfPINxSk01aAp5vK9W
fEATlnfQehnIiXkfDUf/euTz4mqd3k/Qf+5XM/A+xdivUU3TpyNlED6pF/hR
Uj2p2kd5g40yNCF7qdE61y06FpcIbTKSWMyUSoYwKVM8/ssbZQoRYuQ8Qp4I
IMxIb0KDiYNYQywksv9NCYa/+evMu/6VPHTUtuosi80csKnjvbhuScXvz8vP
8MP+yzb9IS7bWWOpyG3vHwx3jAV/MSoHi5fHEnefAJDVyhAa2LE6upCTmy/r
kLpHqmdMvEbhSTC3tPY5GEvSnlio+pLxI8Bp4n3yVSTAIlvpUxzJAE/tmc5s
zUV+YZsaZpQBUGo1EfoO8dIs9blO8xj7xAkVaRi7IH8QNzaSCEQp3WdZFwGw
/fBNm0Nn34GV4jyH0bM7aR808j1GEmIhc5becrHNX4zz5KN2b9/EG3i1qzZO
zw3ArvlomLfVmYm6tnnWxEGAdZbP9nKtD43UZrZg6WMhiWJEoRKEBJM2oUQc
If50y5r90yTDfIAiSlm+5oybBJ+fSP579duDKrtMADZWcar0ohS+9UGx0Ogj
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
wzjtpsh8wJdn4JL8NVEPMcQ1M7IsnTmVPKjsmT4/xh1WZ+bZWaF8lsnh8EIe
7TCjy2bkMLZ/pqx9F+a/ZH10ZowXzM7hOj6AOKU2M9ixCnFS9MU8m2Ysl5Cx
0VYMrw/I4LLzRNmWMW5/FqV21kZH+yP4vMu6x7/g9bzXN7gm4PVaRQauZxFP
hRY3u4/j73l6s9I3lrE+UMUc/0wtgMFSc78ilEtLT/jkaV0Hy5s7/JqPhtOn
0oXtJBE/reN13/V+54rp9ZdUELEsJeJZkok4/IugnCXOEOGEHPoixqrQlN/e
WzD/n5roD0lrCA785Y3T+VkEYydqg5mE5TsVU/GLL88n8njGGgAoxwQcn6fN
TV8YX+J2TAdAJTrTpUIboCDS3DkC5ewY9uPBjHGJuFRXEcb3DTEsrm2Yn8Dz
jHEJ0ahc58sos89LeIghvvwWae+yFNv3uVeEsTXqd24sxVUVj8tHXnOqwXKx
0ZPHv+P5E54ueoz9PMJPcKsK4H2XBVVofUfcqXZyQusenl99ztGpXwPxVTyz
+zpdOqyIzHCyOGpAP5Wg4JGFv5vdslhFVry852ftiqZfcK9GbS0ixv7X2/v/
NinIH5Bll+R+/EuWymfKOkgaPX54uFR64JBuc6hyvAJd5mQLb51ozaxytKPP
Xz+PDl4Fyfbj7UQb8nTqTPqeb2gf3UGdN28CWCyqmu8/x5PLHyNMJMYZPyYh
pnRKzvQLtncCsTxcW0X2ZHV13k09EzW+aHzfe+9CtKOBWR9E61qnegcuDQQ8
+UqVGbgy8L6VjeZPZZ6gPQPYcjnowpWQzKo7lHWUp6Q5hY3kIQOJN8jVrZC1
WfyuVr93H0f/rt55Gz1WlawLXxPGf25z0hqO/4+9t4Crctv2hufzLBBQVERE
pASlJAQJ6e7uFqSR7pRGQgFpUEBQypZSUARE7MBWULAbGxQVFmu8E4Nzzt53
f+fe9559zt77/cb6yXA+PWuM8Z8xhmwcl95ibc7BmXV2HsRb/NedFCO2oGl9
sYiY3tJxjmAnkjE/P8P/VfXwf0taHu/WBOu7hk171tG9eAYEE5ZFaTu+Lfut
6787VlakLJl1gN6Hzm1mweSR8FF/DSu3bVjzjG48hXH4W/X77s2mVK7Pdc90
W6bg5aeBp9zNk2BGvflK8BANztzmu8hSPQErH5ZcPVAPwPvszE39na2we8Dh
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
m5ad1RvjGR+frAyKmNCcfG/H7LP+gs0zalOT7/TEuMsMVuqNvpUP7/Ve2D1S
8wI3kFsDsYBEYHOnF//ny+WLM3dEnOuud3T21VPlBfaj8JOKDSH9DK89CEPn
idxcK5YPHqD1g3VlLJSnSs4RvOz5HGKhGkz5tLvly8UKY6dVFqxupVIfU+PB
DvShB/ig25AGsgxv2/gFYe792UwJ2gT7v7Z7m/ZXkxAflPj8/seKWLuJWOBG
YPlbm/SmB7elxt/qi/G6A70Kb1l2a1ywe3O+lQ3GTiH9LfiVjyzsuD8TfYHB
sJgRZFxQPYRz7SZbZX8pYUEV3+3bRuakkvLoo7NKvqdIH856Ap5gYLheeZRE
dtZW9649XysacxdaOYF6o+WgxeJts3dk/qhk/wv4sb/f/svmgBnjzfgzJ7kK
ZBKvBWuY8Mv+G736Os72qn8Xlh+U9jJQEae5d7cdEKGKNezLTD2HYlzmLtC3
G9FnB11HWfcleq6L2yHrsblb8WGXq1aviJy86lppnU7OS1mdMi6NdWlO6yPY
o3fygmYBT2E7HHsfCwZMcbe2Ktz9SFFMDrosyBDvtlylVGGbRee3lgEVkCY2
EeWX4QimRM+M5dSzRazRKA3lonGoGhWhMag/qdU20B+WcvXhvhSnhHmJNvZv
0k7GH056tGJHxsL4e0lGrx9m26TMSg245BZiM7AgMJcbpzoFeaNkdIxT3w5z
5OJezv7qLxTw/zy/YoyJjbGI8dWFR7Kvp4/MPopvxdwJU4nd9On1QFm/HgMf
NbcEnw94E3QWZ5QKFzmVfsK9z1sf8jnfhNHh1ds2H8Z4/aJ9s4cuxvhSrH/k
iRiMSyKGhKiEYdwvsCIgKhjjmmU8S1PrMb4/ecfENZNIPbNOMdtjjvG9Q492
rTyCcZ/LG048uUDq3dkhp8TPY5x+buu52CsYnxomOHQpsTcVUiS9ThN5WZSg
4eZhifGbIO9gnwiMS3epb3Xbi7HSxclHrC9hfO2y3WmPy8SevZxx9iw5fnRB
/fg18txlZ+8eW3GRPCcnJVOZ1OMyv15eIf0xzhvkn3QsDWOJoCK/wQEYW+dI
DRYi8uBUikOCZBLGGVHiob1DPuPNKXlxreP6q4fUpLtnvWg2q1s8K61OCV9x
yXfa7Hz9Lw8kkk62wZAN2TruOuN1I70XF3kVSY/Maf4yfuWE/Cpiz41SLW0u
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
o8DAkNo7Cnka2XqVEe13GYt23J9KLOcroMkSb1s3VJ/7O/5t9uXvjWCbtK2F
QIiEHDjLOasgeFjORMFdfWjmvT6m9vf9cvbaOQr51Keynydbj/aIzyJ+WJ/D
XgPzid9pGuFqmY2xr/gqyW3KfiN/7vcGoplwFDL516gN1DPtN/kYn+VM70XE
P3Sx6endO4eUG49egf45Fs3mbs/91qc1PXayELXrOmDS4UNSa8S9ZFy58wJt
YSqshbGofYT998fT/NV0zBvjb5t/woYA5IqCkBPn0zCOwrveyZ7+4/VGNWSC
D+zhHj9iDWcfZYvxbJu/dpCTteTNpI3Th0s6rb2X78vq12TOG/7ju4cyq1EW
GoI6t6f/ffPh1xKFpFE6dOH+Tmz9UCNNOjo1rYefSlexUL/2syxYgoTRaGjg
XNeqGZk2C6ADc9AjPpgAsNFCCIGBpP7xts1O+h69yN09wA1mMpvQdvi6PPnn
KrngVL2AA83Xgse59sP4UIhLn2ZltfrnxPatglSuXNzfth6FASNL8kSEeOod
6LB9mLNoB/9TMQeBJzz9FDt/rzbIgzAUdTqbhlLAEbSgD/eF2W32178nHmgH
YagfkkIrmDKSfqkkJQZ3zZZbJt3NquCY4I4Z8zEWOSC7SXvOpRbjbbz11lOe
fbK/4nnUauXjxog7u0/zrsbYoJiVpRlqeVmF2K1+6MBPVuRzRHtFobvc4yWK
e+R8pZ+4vQsZ6WNqO6vebtqAsYMzw55Eb9q4dHgF3weXjeeWNI2/8aJP/4Ou
YlbPZssKnOEbzJvLrwsGoArBqJrkXRJdB+J3p92euMc9zs7wSt6Vcpo32UXN
aaZTxd7PCYXR0tHROdt73Tbe2LPDj3Fg8THP0Tv07/fDfyl1itMUPRSj2ePN
60zXm5pvrE8PS1ZNxdh48Nq0XhkY8+U9yArO3tdyZta0qUNmYlyfGZ36hZxf
EiwSMDeI7COGhuBwjGPSXZPk0zGuGf4wp2G4e7PkGKMRIWMtm2uiF4XZR99t
SU1Ki/FPvI6FC29kPyxYiS0nzC3VrYhsVo20Cl4dbtUEUeuDIfRCMyvtWvzV
+J0tPNH2oUkhDtgwRjaMCRuGZyWujN4T24gFU9XilOJW4LuJY6OuR4g1P41e
G7oiVL+pb5Ct/8wBGs1dIkYGHQiNbZkRpxchEFOOL0R7RhyKxLglamvYgsgU
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
HKjtTYZvVnvVfBQAnFOfO+1QlYHaAty/HfGOe6ksrr2I7xhsdWVkoWM+Z46f
xYlYMlZOOEKIwXdRUX1/LmXrb62h+G0l098n7y3VE175HXH+x1oZk8KEsEDM
HruH6WNyOIlyjqKSImNNNv/986knPfQscyRiV7lLfLYcdW1ZkbUGzLsIz1/E
6i329G2sfZL4hRT6yrTxTqofOe5VamNyyhCZarCqrjsplUz3Aq+YiI8j3ni9
oc0m+wnsaX5UzBdVS0pLbA5rsL82DBD+IbWUDG6fuYY08qzBYebj0CTKt5Iz
+UNP8gGSptb1TeaicTBwoU4T4Spiz9Gq9CiAC30G1f7IzhO9u6uVkU5/yVXJ
j44nd2wvJT0sQ34+nmUUsJO8L9zJPlbNBvpYyhm30EXK6iH/wzE7ilP4JBaP
9AGMGSHSXOSHWzBWhG5+6Kg/6F9FVn7/W4vdw/Xxkzj99wFIg93BUk4f5nh+
lFmoo02nfFvCmc8Ni+2DPvmvyPOL6QNXHtGC0ZeV3Uv3EVg/v+talYX41fTa
rptIb5/z6XmD/KbuC1e31NJzy2+d6p+gfhZ6ee57vSvxyqbYDw5k6LFcqc1/
bR4oWBeOJXGh79/xkT16yZR01n9AlffiReK0W55yNW8hSSv7klmZxDAM1Wi5
5Mh9g9YgqTtWoiTQZd5wgngRQEVbSorpAoBItLmzrX4S6VOVf6Ze8FOy3z0j
M/vbp+v4NXdcPyVlHpj2lD/OwP0JcbzpxqPVyI9V4gX98iyGJi4nLfrPWwkO
jUe+84w3IrzJO9izV3XnRpG/2i7/TpaeIliqQ3N+M+vuEY715k2STCYZubYg
LhKsuymZhWggXmDwNm0BtC7M3bQJRfkn/15JVgMa/0Ok1wYTACbyL+UbUNwS
bGhr1XqJ+JVqgRq1xtI66hWeCz4AesEVoXExAK3tPl14P+Ib/Ll8PIIoHgar
hO1Cx9/ITcg5XkV2e7rvmXM14g1Kb5TsbwB86aYfEBxfIFdI8mmA9yuQ5HKX
CbIWmaukGCZkUFza9vP6BTA+7CaW9+smqL9YAhAbTMKrl/nglx3cOyl3WWsM
+nr5zwV7QskdTp1CvZtENlMHcz3rrxBmdMMkDuE7fU9m79MBAB3lp6sfNQGk
KF+5sQfhjZSsfXnsxSgfaZXfuauH8lOrd9f2AYBFeeYrx9A4sJ6y/4oREb4V
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
aamP485cd6kjOVjvfh8DRrbTAE6sPSZ0WRjbb966IpFqAIYny56veQ8guLv2
gG845u9KniZl2C9/1pCyUo7/AioaF62uYTt3UeO3yIg6NL5IU9b6Go6XK3hV
VwRKbi+ZKsfA/Il5FeyxOubZ8flzcNwVPlvcRXmA/XvTlTOrruF4mTqY8agS
wP+EXf2LXoDW5AcZYZWd7wtX9QneXtt8YOo5msRWwot4/8Mf/a3afzuh/9bj
c6q9EYhC0pGM5Pdlg9iQwg8eYfYL3nnhPBZQkVpeZKZX6mqH+bWuVtrBsGwB
GD4iEHm3MODcM+OjRpe2nv+Jh/w6X/V3qZv+n5nlLouNu+fOdTvUEKpVXPPY
VyP/gGHGPSqh885RD8dDfw+90K0ZzDVT168kxfGmSloQ5sRugvvbqHbKv904
CMz3pB5KvOWIVZDg27aYi2nopw8Stayl8bv9Foi4PrnZ8aKcXwkgQ2jfqhez
kP7PzzEtIlPPiyn1O+WfTOaVshz8+bwz3STXT+M46Om7b3yN6qtLlTVZYfIA
Cz9HPOYy0aYlfG6/txXHvyM31Tsn13OItT9n7sYNwBX+2jdBDMfJ9wwv9gTE
wQZaxweHI8PA2PClMFP42eiYufO2BL5npwsd91qQgg0D/nE6vqySPRMJ1Zzp
bIqY55z+UCSvgO2+zjlLTCqZ6tcwmtOEn19T8zozSVZ/wqYxJKcSX2d6oN5s
2wq6ru+5jWcqJA4RsciRFMJRcC569033vxPPcMatswz5UxQJfmIH4ieHxfXX
Fs/u31ryTvu6mlIhHHu751qK4mrqqwts9UYyjyAynT7EeTXGJ87vLZwwXsgN
XuHWhvHJ8k63ikXSAC9PmKdUYFzZmBMUxoDrhyEh0PcWrnfDc9R6PYxb1n9h
frxu96Qn1XsZvhHgzMOi3hqM+7tvCJ613YCv71bKX+VwA/za5bJlzPxAufB5
kLwyQEq+WVySsMy97QavNVwWvLJczMI7q56y/pfvEd/HBfz78vGf5fs477/8
iTSOb8xIEp0iiogutIX4iJ4jZ5SL9PAZUbScuIxa0PLp/pQ6rHpbBVSeK/O/
f7+3wqBaJ5haasykHqTq/pVh7wu9pZv6x5SkQkWGFn78MTBp8JeOCJr6V9RW
8DxOCqk+lUGP9d0WaOlyXBTgkqyO2DiHWsTUdVsYn1FmzZJS1k1aEqitSKUu
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
2wi+Wjplj28k49r9mcSNGy5LGfJnkg7kaazuE78p2bZg8it4muwUTlMqGFgQ
lUDxuBKH4yg0DcuiUaQUywHdCP8T+fLreNsIHUKVSBONZD7oYpFlUaH0+L06
LjV1Gwc/mXMouyxM8z0sWD8tQFo7ncGW7bpeVZsBwjsOJ1foxsKb9HPhaVop
3bpJ7msKCd2zJ1nGTfbZ0rzbptaW3XaxRf952yORF7ai7Kgp1Ak8uC/grzc/
I4CEiTQ0Q9n4Lv6Mq5n4PD+f5lWy/H3NlxzXullNAGsSxhSylu0H7s31VYjI
QSlz+pyV89QLfyvfKcaWVlNmvU48XRnR/qoLwLfA4RA6saW7psLjxIQLhxmv
Qt+n3suiv5ajraUdpiWLZqMGdAQZIU+0Eq1l+vP+tGLrPwYVqBS1oWVMxOzj
Wsp1j4dTVC8gJ0AmLvD105UjVq3dAKAZNDNoUcJFxlu/Cj+7KP6+opDgkFvJ
DAaPpa3FMzvbusGvHbEN9sYH8D4aP9EDeZHJUK4c39Hbt/mCTtyJ+aloagFa
giII3T5haWNJZJ3G3p4Rkbmhpvvp4+3h+R2HCuHq9qD86IO7Ga/Xj40pI3bn
Zl8xX96okN7M+IqEp4UA6WNrxnKoL3IYzncvrsNc1Lq/aFyebyA4EO9sJNqC
dhMedvFbP46doDZ70hSve2FbNjDSU/rGlqjWebSt69uWenO7dbUIjAzui1pL
7EEN7we+4SE+vYnmZpbBNtezf6+85QLGgluFHsg+0D6sf834bHzjYlcfWlhl
j7MXi69BWCrcW6Louz9YtndRhGsCbAF4OPe4U9HiZ0cGv36JviJxrIn1sDSS
QfLIj1g4/TumKLQI+RI6PT7Qii7UShWjOnQayVAX0Btiq9cM2aPsQ/2Z+12H
8vwhuPz/Ad/v85ZG4oSDaqObxHbaiqyYdvgWHg3uMI4b8jOMynTHqIpsWOXp
6Nw8PbpSxXXv3JOmzWWOdm1WOYZ3Sv2mcxlHaHIV107OMkjU3n35q/tO922O
RJ7yOvGO5TE2iUJRKAg14vPoHLEndWn/PE4ZK6HUfs9ocaSOVNAY1Izb8Gz8
Ei1H94UMBdJ4R89fRI0l9d3MjKN7nzKgjmNjZuDjwe+HjwP569LhMAzug2BD
eSgShaEUbIumEcm/G5mysrHcp4eIspfrJHbFeL82b6ksaM39BNekk4W5ha8x
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
Uy70GnyAZ/0bIp+FImuDTANzr+YKygiE8d/UKWCGM+aMFrsB7sJZmMeNR/N6
Ot9z+n9f8HJGlrSmN4I1EA8j4BbcRrOQOUpjZrAambHMG26H3pIxg4eN7vsk
SaB8ZXFkGsbayusVK2VtjbuDJdGBk2Atmops0GqGaWmHozTDaulrQJz+QBb0
JOXIlGgMW5EU0xOdJvZ2PHpILIRfZx/MjsofubQvOvGmZMfiyMkYJyT2SO01
BOPa1AXFMiMw/piND9SOw/jussJTnWIw9liadbrfJIxLkubsWRCJ8cmQXctg
sOSTye5i45c7am/apjrS4rmKd79ff545tQv/Jlr9iDItdZYIiJLNHcqQCGPN
iLCkiZY7BP35ciOEFsFBuPyLfn72D9ev/u/T6pe4qY+2abzuGAiF0aBMasYc
UuM+BA/UFUWiSX+4424k528NY4KCYB3osAqJFrOI/BMkz2nOSzbniRQKhfJf
pbm9v20epwu4Ep0nFq6j22g/OvC75eIxhf4dDBV0XWoCFgRW+1au9Ax5HPJi
6IqNTta7rYstH0UEiISJFAh3NGp/30AIBn8YiqxBnWhZItz6sHl9svbr6f58
LEYP0fQvxpdnh1wymKG90bzgw8rD40S2vhr//uyFpv6FlNdGO7oyGLOfxGRF
SGOcUykwLVl5a32/qqXp2yXT64+/nnKsA4Q1xj3rUaAlibHzDfOAF/oncfY9
t2EbdDFetz3S9l7XoIoIkTiULnCA5EOTz/J16AOYQwwM+RdT4HumrZ1jE7JD
JyAKLUJiJG03sSZwNAhB1mrUD72ChHZ6vGy7cteJ2w6TMClmqJfLAN9habah
SbbpcUO7XTKI77JB+ojcLamL4sNb7lPghpdRGJYXOn3qCbVDr2c/D2Djgv2f
BqT0cG3Im1XT+5RDLV4zV3hYsk8jHnnQIeyGby0ecOPhgGWmGKtePjVwgVV/
bHLey13fqqL+8LUh/Y9YWeKQUosAhT7GZes9DW172z5RaX1OT/QY7sOnvzDt
KJQ/Tj+mGF1CbtzycsCsg1acXq7HsCMd58xcgvG+ddcmX0pYgPfuEZzXdXEF
Fr0VuPv6/il49yvBY4/PJDQmPTPfn3K0T71+Vei2Dnty630eum+5s0uowfe+
zjr7HSPqta9VLfVfa9Nw8fTBvOelFY3bj9rO25eLsUuRdlTjtPv1m87ghSPJ
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
Nush08iaiJrK5iLmuflus8NGDuEnIxrCY4fzbO8e8zr68OiThysNPA14dDRC
x3oM9FBzmWsxw7i38VbDkG76Ms+lJ0qVq4YaZBkM0LvpnKcYrugmf9229Tmu
zCDGjnnEdCE6vwN4cgsUq2X95Nb4UX5JArHBpkAw6oaskCoKQG/gArEhr4o9
HHc5asboT0cP7mrc82IDxrbjU8bdDPWsy7YrsvQ17YL9He7YzbXC+GW2ZU7g
/GL8bDWsiy3og98tDy/ol9WAXQrSV2zNasSB2XuXbVuA8clZXmlFRD+VnW0z
p2c8xhdn35pjmVCPk1Ks5vVMxHjYZGZa+rjHONEq1KTKsKIh3XyekX1njNUc
c+zqyXN69y52HtZzVZ1T15WG7vrxi1ZBBIwFUa5e7EZq5x5frBfxYyEAQ1kR
jB44szYQezsF7UUXB1RYWvI4eS1siDkC8Bgb3wktPi9Q2OD67M22e/aXsMMz
x2V3iYKicnfF9r15GF9+VPe44izGs09e3SNUEowvrDuTkZJyqiGwYHXmxLju
OLibcffZJlr9W59YD16MJDr+Fw+kbdNbFqNySARBtBQekL3L6JfXfH/zdR/D
QdhDpM1gMIXOIMHV11Lm3g2VG1YyqM+VXsP2OGIcd6g84LjL2Uomf4NXVU+r
VfEZO11vOBWmbDgT7lrfzaCu8UbOEOEeGHtdOee/xhzj23c1QgcbY+x4ssRn
l83Fup3ntrqzLJfgQzVymyeYPGmMrHN/fsTYrmHBh+NnXptMwdteWWzqbHAb
W94TLJ8fjPH4uuoPI25h7PlZ9Z3NuQO494uy+wrbMN7zMuuhdRnGW99trR5N
9re/NH1oswnjRzVTn6zYinHn64eOlS/DeO3JygAlG4yHX033VrIWxj6XcnyP
d8P4+lHfUbN6OFUP3WE8aLbDmsubdvULtfYasvWZepTaLPUzbD6OJpbCJBOd
RxeF/ptZ86/SERSJnT35q+MSur46aTq93RrzdmY9Wjp5c9alWYe9Tm55IVFz
6PaEhxin1Yk9OFGNseGH+ycjrmLsU/Nq35FTGHd8cmWb3yGMZ14xW5G92aC+
vMR12sgUkcuPxu3p/2jQpjQF+ViJOskbmu2fF4zegRxS5Zbn5n76n6edRoXJ
QTvQO4bdsn4fr1GOeo1mmgPvbYkSuS0YR1Zc231954LGARf6nqs/sh8bVW2+
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
4iBoCLD0LWlTMsr+WNpmDUuMU8vGnpCxMcSF9UvvLOo2iPvsxcGfG+x2f8Q4
/gXrrInTCzgZVwyXCvzNT2Q6MEkQxEGiiiJ+zEFYmbl7WpRh6vaQ6zcP6NpW
4a6XavatcaltED9fst/AD+N1p0btMvGY+vTl4azNDzrbXH8XNmXYRfW186cn
HZmsrT1nzYRLx/dX2GGcMNLC9+eeR7kNKUcmDrMS/rhSZ55mnJBlu5brarAX
mWeQJGhgydFKVX3AETFffXXBsZEetQ0pDaqPpXwi6seX5x6Ts+S10D3a5Ihx
27TaaZv047Y2n2UtkDvhMAw0iH1DofyTrCV2ux1MY4tRGvJGK76qvy9VWKcw
RGHWrHdjjP2nBWPsu3Ti1MdxExuGLdGdajIsrFFtxcVpx4IV8YZF1dG7htnU
Xd1wIIkdi7He6H1eJxzDttp6j3dsYxkU82x1t5SUscrXgnLFo6cOTqmV7bPU
GWyHVfl3XWDm2VYptkQuSdZMdq/FbJQEGyFPaADMhtGwilieSkQztfw7X813
yRFinV9DxwXp/FE/oY1y21SnmfdePvF6Q9K1UrKqrNG6we5hZeWrGiOs/kjl
pcT7Wjzt4YvnM2owzrlr9mTD28cNCyuSHt6vuo0lMqqymcK7N11m2CSHp90/
xn5sbre+eDvt8Yk3qfU3HqQ9b1tTgpMfdq28XVON7R5ZvzR834hPPy59NfZD
Pd5+7+RT7yqMrQ8Fn+h7yZ97Y0fJXs0zExufr87aGLPvwFtv4ZnCwiKg3HK/
mTAPCmHoN1sxCvHCJ/8dR+EElBBtJhpFoUno5W+e/4tFhYVxp0vdXyTqzEiZ
sa7YhelN7L/lzD60H+1F6bzVu9WJliGH5ElYia7BHXhIamKQeS59QVpedevp
n8/OO6/8YOjH+w1PuHH43pueNZJ1s7nytdV183E17n5jQdm7CoydbrpUiD4a
0nCa3w9xO2vmvPk5rwUVlgiryvZkndhAFIRCUKQgPTi856P2POX7pLm/AfHD
p/ZLeaYaqTHu/7NjOD9in4YxCuwmyIPtsEtQrprnUbSUq29W/P3pWBF7yhEm
fLFdAXGhHxolSI/meQSigv6K5v5SYaJTKIMmOIEqkkJ2yIaxZSyYCUzeb/oH
WSfkyVnPisia9JXs/Trm+J3D8XITIrcTqyUyIyS3AONXYWuCHs0j9eD4iJGb
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
ZVxxHAxL8/+A03Wh9v5zcPoptM7vgDtArNd1FwrGOxG+29yCHXFcDdH2rXTD
dhtU7I3weXeCTH0eOOPzvKVdVbDeUh20rTdhv6hrXWYsje2x0nK+UaY2vr/V
C6NwvL3YMtNQHG/bGxpoqajSgMWKxahKSxfknfNsDU0BjOz0LKMMGycq6btn
xc7avehH/mJxrfP83bxhf3exJZYQdujNTH5L5NSkb7O2Kj14FFnhJefcDJDd
HqQJID+cWX9cU4Li+9mjsV1zCBTG2JoEsB8N/Uir49J8SMupN7xOVXenWb8+
fl0enx9Z/6bqAPa7h1/73ri8dHo+bLvbp/H+Mw1rbwTj9MOzWxU62D/fqLlV
NlfNgerwGJXfVwPIq/1U1qLWDfI1nGVqanJTQm8l74rj53yOFPXNEPhY2cI4
j/Ec4cGwkwglVqLVRBDmQfNw7P27iTPmu9YYeTIQX1AHxtUSJCkSD8l3Nmve
SPq6JN8nnA0R1VKVVOC5w3+p8STGky7P9E4pO95l0bUTX7WgKXyn3iep1wIc
nvHcYyzH6O/KHTLgFRRj/rh2503eoqjs6f6enht9E8Unre5yBH6U6oew++OZ
7U44zj3R2m60cgrevbc6uBfz/9LhPWeZsgA8hqxOl6YDGLYPFn0KB0i7L5n7
xWsCPl1Vii+1AJi4/CLVzrkAzl/JuqBxZmRC+kxC0GqdWtohZwkVOsGDxf8x
dzr0PaYRBht0WLYYvbh/7/31ZRMy48K9L999pGacGNpbUbijNYwtkEWemUlq
epX4AXQV1aEqdB7V/KHf4f9WsSSkCAo6R5wkNhH+RAVBx9k2ex5bGt/l4w8L
56Y8eeUlPSK6V5BVaxvhTUgQKTNx9JXFcn0l9d6E81k90Yl+Eg/+3ecykw+S
dpAqyNtQGlqNVH83Dmk6EvyVvzt8k3KimnhPDP9WwazeW4fYPUqrKde8NnFP
r6/gZULTnD6A4++1+7S/YJzYNfJBggqw9/Hjl+u6ME+78OHivQqAN+Vm165V
UEFgr+GxZMyzDz9NfWX5ngakmoZnbNir+j7b3zA9X5LhsyOvD3RgfFh67Lw+
vu520LGEMwkAKXdVHjW/AXhfv6yltB+AuU6ykasTIOrJ2Eu3Nhz/ylOumTzE
8fPFrsZ33Zhv1nU1cnRvhO01ls97mgna05sl9088d58C/g8L+wWiLP/vuV70
hw960pg/yaGtM9vE9/Vwf3UhvvdU/SHfvtap/MvrRNKcMhyzs0+c/d7fyLNV
rfP+x2dTi3pEP06NAdzrXT20aeIzdPQeHHKeAPAfoI0cwefS1Qc1abUDFDXu
bAl9D7Ct8dHbDqyfzW3lHay9ADe/j0fo6Wv/KIj5fWhbRYcFrj+3B9k+W1IA
Mj7v/lI2/Z3i04UJY1yPHk9mf/1uceR5+kvu1wD3G1a/XYfrTfXHXZ/1qWNw
qEd70GIcQLk9p3dweJBSPEAenYuvELtfXav1fGzQhyeDx4tHf2bc8PR66JuI
pT/h7V/ff2oqFEpXKtb4Mt8eK+2uFaTVH/m8lnx2PRhlQrDcOmwXSVH+RLot
rHjQdYHnhQHtZHXDqamnuyjnS3jX552bM9VXIJUw/wAAt+5ypXmGoYeKlrLJ
vdXaFMiQ2xumslMRZiV/8NbM2UazzqoOPZ/zCHaGnHd4Gwlw2uua5SnMA6Qj
ypy5ogFstz9L3b0X87nrqgd8HgFsuBhRwHgbwKKco1DoLsDV9QoRBbtx3NyR
khh1BNvlBb3tAlUAAmd6NxdeAbi1eTJ6G77+1DrncBbMO0pXJqzoX0WDxLzO
6G1bqKCzusUfZd4CI8d+/Xke4tTesGRH2RhXquuiXXwPF3HMrMN5h4gi2gie
rx2Z2NDIT+Oq/8m0y3+CHEWb0RFEJfxIvCQnkiFZVpFRdkzxjkivqZP2Z/Pj
hxZLFAk3iAeumifjLEonqx845BfjlBtscfmOVIeIlMwJD2tyLWmStHb2JR4B
LgueArPXwgX8qcKNQf68O+aq8LabFNP1kD3p2Lj+72+RzmTAHct5gnu25iPr
HsMntkVbE1dR/UWTpR4apKaEkbJWNBRHM/kWJ1y7k6U0WzpFuTfem9SKvb72
TP+WUiKCuETwkBHxBmMwrxn7+TbO4cdn+F/fjv67RYyYSwQSUzMF4bvYXFhU
2sx2sfpZFXpjneTXdPPobOhZOa3mbp6jyZ8VJ7fHJNE/S2ZqV6P/yWtl92iN
j1eWmJzdCsb3snctPITj6ePk/euOYX5WP3V0/DS2n20m0Vb/h72vgKtq2/ae
c21aQAFFEZGQEGnp7k6RbilpKWlEaTBBwQBUVMQu7FYQAwOxCxtULFJq7/FN
JM59nu989773vXvP1XvG/ulirT3X2mvGGOP/nzUSAMJlVSVTZwGc1ktWXWEA
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
x96T/fv8zV8nbsCPsmxKxxSrqRlm78+H1bffJvzq5ZFW+x4A4/sRT10/HOtv
bmp8uLhld1/2tU23r755Ss8+onFs3Il2elOLy+svt01h40Bf79s2gJXfZnfc
eN0DHXsv7qnfDhBrEmQy3QzAe0vaZul1AHOemN0Puwgg9brn8Y3zQ+vhrVsO
NRD/eCuige04gMSFsEtGVwGq7/I9vf2eAZJ3zz6+1DIIUQcFj1251AhNN7ju
db1iheQ7Fx6fb0kB11ua93leASw/k1079Wbx4NrKddUZB041fi3rr/y8o/JS
VFnP5tBqjrrl5W5bZu66f33V+upNutWpT3evll6fudHzqprmI61+3ZCx+b+e
OBgnYr6fzh8O69Fv7fMgOo6uoNu4l6BDfryedoz6QCnQ+pj8aNtpr2nFlAi3
HXcUt9g0y3Nfa1dePff2ZNvsjhri3XQejX8u0RYwyPQ+/AtnL7GPbSYdjX09
sPH95q9behlQ3Lav48zQfkjXQxsride8/HlKp8o3gHHX4m8cJO1mw4fFX4K6
ATp7qO/xx8919vU20QFw+65uv6H72iV7GslxYrtoj/wAgNFXq25lcm7Xm0RS
DcC52xfvKj0AmP7k/YvD7x/CmmcrXx/4fG3gylvej2x9pH1dsbp564FDx1YR
e1E/scyxuGNdmIF5qHrqv5bHz8LjaUgw3MD7aPTzXZPvHa5ZQdrzi+SLfvK5
HV2u0Xs9UDztw/4U74BZGQA7inYk3t4A0JNmGeSYTfxW8op5Q/NkrXx8rMwD
b35AyJg8L3pcaG5jHG3FmYOyR6FUs5bg/aRoH/78ILpcqL7j6ngGrA+Jn7s1
CuCb/wO7haEEb/qmWV+dD7DPucLoAcGpCaklAQmZADPKcxZtqQK4uto+8TX5
3eB17alvKwFWrwiNFS4HME/38B/aN+ReTW/x13MAizdYpjVXA+iV7E4qIP5y
YvwMb5EUgGXJVfPSyHsOBOyzuxbeChn+lnZ2wffplgVyCyYvOw0FOtWKLnp2
K9w5+lmdOT7w/1hCTiRfzujN2PmwX/x363f75/lpCaLJivgA3oaD8B5sRavA
84biK/yDdqrtDxcA9aM7aACtp4bLk2Nk/JLld+Oa/+kyWi6jYolMkSd6/Ifp
p/FYjivjmDDz1bXXm3dXGwxue9F59lKdI1Q+2X1s0pkFYHInqBIInlW+uXqj
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
Fzn8cv1hfyRzxGxF1URlJcZXS5XR10q39OY9TZ+aVts8BasiP9wiNJrOn0WP
/SGH/ow9qrsUZTXSNrbZvDBabgVQHRMcfDgUwLFu32F0HIDzWE119+4z9M6q
h2tdN5wctD38uUpsuxd93v1v9RPrKgZb3i66v78xdTDvfcmjmU1vBl++3XB/
7y2bwb6nvDfq6vkH+26wnu05GTE4d9fHsrRyU/q0rb4lVutuDmYfLa7u2i1K
P9qQcMrxLMCihKSwSuI3690abDcT/7vcaq+hiA3LK1ON7UqRmrarF0yM55k1
8avBAaZY2ivmHqVTKoLye5S1zgxUvF7lvwxgde7n1KKksrYBVmXWHpZesf9a
KsJjGwPxISniC2T/dRXyvyyxhKcnok5UinIJ/wtANSzPWQpYx3FlJeyOnRO7
uym2+M2ScVHnar1CcjyXWPklye/tWb9z8bOWl4s+R93wzN82XzZeeqK0lPHo
8w7oFKu1ynkZrS18mTo5JPLIZnpBy6t6gB0Lv4S4eHw4OoQF5dE8Jl7qGrbD
hViRnCmhjD+zCP4tZC7h395o6d9NtwWfwF1YkcaCubEsTqdcsQOegX+LW7V+
0gX+Cn6a8svYL4F3o/X3qHQG3w/5THB/h9T9rE8A4d1NDwq+AoTtZS2etEes
RyLigd8BZ+vrzTtzq/JLJHs69u3eOi4r5Uu0B22urW5xDhexqj0o9+8CeBkk
QmpWhpvu3et3PuhUCmdN93HF2oSXd5pdWnQ6ARjv37fPAYDtn+Z+34dJ7I3B
x4N9ABNWZ60V3yT7TME6xNZhjnLE8NMccCtqR4NICU9BU9BUpP4/L9h/a8Ej
qwV+Wz+3BlcQXJj9O/9SMDNG2kSGS3PJitdFvhsuVQ0cfnOis772o94DvmdO
HwE6X7G+9yTl+fzZu9dTSXk/vVp/Y+Y9AMHB4TjUjp3uvQMDTvTeds1vtYMn
4MTL629XvCf841b27e13yLGJdm/FA6WRKNiExyfdTm5KGT8WkJHONIXZhpmd
eQBhzIE9fgAoP88+S39PhvdDGdr9jYnUy8wfvv0t26PrkIuwH96CrSlVJIE0
0GVkLHJoWpVop4bmYdONrmemfz5buSp36/42xvpUB//KXL/ByND0uZei9SEg
LMspdwEDVKNfuRfH90NWzAoPv4UMuBY8dY5FBAMUXY1M5vn0gb3repMmnwLY
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
fOdijKsv1JzqfhljEc9oj0de/TJahtsRXYPpUMKZCnFE5+kkyPD8/smW40Yp
v8YQRorX3tJ0vLsr276s7a3QijO/5B/PwTjkdNb+kF1utZ6nTuaFkuOcEv1d
Wls/47hCq0zJjRi/zmuTMns1xhMPXN/cbV0tnpp3KdltJcY+G8/Pd54mUleR
1WrFmvle9dNH3w+c4GNTXCb0iXuG6yibhkYRWb6RiYfhxDI803j3P25eiz/4
EXcTctEOIj1TkSJkQCU8YG/EzYgzGNdpc7HUdsmFkqKKo8zHdtbtLBS4VUVS
RV/FTjDxsRgOEzf1bxeoDfNcxUERxmgLSa2WsOnWtaB/fwt7Uk4OKQ7s1Qfj
LXmZroG9JtUeSFO0T+xmXZudNM+rzYCLtal3es2ZO1Hlk9b+HJf9vTLq40yi
FSPlS0a3DH+GcZH+kVYZI/RiP4+I9RXNjA3TC5DyODzBT+2p8n6FE2ZvZ8bH
zQyWObckP3tb8JrX+JejJ/Ys2LC/LusQszNh3Se89nD0Lp+kD1juSNvdE9fv
wmLH2bwtKUH1EksmTzWJ7PreJepJkK7X7DMS0RGh2713XONHqLqg/cAGzMEM
cv/CGP1n0J9U5pLInzmEBqBAFIP0ND7IP1FIMVl14e2WxCxNUvNdvSB8FePR
L9jDh49H1Yi8ci/QPsLF5U/dtsGeEmzw5Gaa8s5ybPxUP6NsZzHe/WBeRqcd
K+vtHpVlntvx9DPGg/fdP4wxe3TmwtNL819OFZsvXCLsruOOPoEIOke0rV2Q
D62ZMbw+he7oGOqF3NEidifqivqgDuxn2Al7wRdVIDc0EjEwCTqDNfRE7dBu
Yn+OZ1uj6/AQEhv1af3G/SWE/nHjUNvsapMjvHJh4aObG68Z7thbv2zX5Oy1
UxfWeW3pu35B5Fu8OO3ehg/hJDUyt28yi8JYe1vh5rCRDfMgDLd4hMXWWhZM
2WM8CWPDqRUTdweOTzMmtWI8iYWVMB/s4DOzAdaR/7WJvDlE7PSJjfKmtLF8
zICjJs7GKWYfOxwJ7xwmHb9wr9jcndOfJJ256j9mVOS7ySEH/Tokdqhs90yj
5XMv1bXXzWstJiq3jl05eeK07NodfTOHz8T4VFrcxmExGMtlpG7sGYvx5R76
3duZrzRS4K0lORHO9ehtm2MhrPn84IJ9CxPOVMWVxB7uOwvj/BLnozbzi2o8
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
3rBTYfS1lEp+cnukQ7PmbXerhSA9XfAwtKTU6YP0uI9hNv5ID5UPK65XTEPN
YMi7tR/KSAtvM96lvAdIuip3xV2SufJbObJ/d8KDLC6KWpTVd5z687K/2zpa
ToexfeK7T1+nfcpQaItwoWdTb0E7Sp+WH0y3jQW4nDIVuxfx4Vf3vaKmEf92
j37mv8YO4ZRIoseEgy0YVQRnnEN8cVudYG5R2jzoRe/xmLcHEHZlNl6C+Py7
rD0ROkgfHOEBzl++J+8PcbMbNQFQjhlwlbDJhK5ocNlpcwVsgwJsfI2noIZL
cXMyp94NH07qTXLbai8UHqbbo33EMnObWMqFeNGKd/HqTHfeyMvPxh+02X91
11Utmj37dmluazmUcitM2UpytcaJW8FK98RbnUOibcJJDv21q+JLoqScrw5n
dtq3Sj4AoGje8SQ/FYCyZ1lnwJd5iVV85VrR3eQdiacjC10+Asms+O55bUPi
eZeHhpIWhnBfNUvq/E3FtjKKExR3KWJXe2KOmDvGj3liJpg5ZvqXbwjf5v18
GRn05fgZXrJwFxQHkynY8OX4ByyPYElLsbSaOovd7Sj3/rpd7G+71KkUh6Vq
yFZhbG5ZmiLkbh8Hp2cOCI9aq5lGBQBMWaua5/kC0Ou7KYlrk2G3s//xSwcQ
zijzunEQxUe653fNLHSGYfX77VH0AQWwo32jGa2OBTnc445KirgciOuKqrNJ
cdfJbmRhtWW6cEERk0SIowA7jvjfCMbxHXf86Yd3/ovyE0d/YxD3EO87j4lg
GxfzN35taZxr+Pdt3kba5nZMcc/8RgMOjtP4inma20vrmF8uZ1r6cqnwsQ1G
JeJH5M+PSto2yphrlJM1rY7JdN2dIqvcvSfEj+IYs0I6vz3CLU7a5lePKiG/
ablEhuEuwLCOrfiYMsKXopYn7l5HuNT+ktyee2Rgr2d2p/Iiw1z1K1dKTzKU
PjS33mwrQZZLvW5CNi+A44/3e9EjfTdXXHGO8CTCqnJ7pwvIXxhW3HS28gGI
r1rnQvYDSKsfct8WjPjLkyLP3hAitNa5u2FBCI/GH9ObMbMlTeR2WsU7swGv
6ZNrKTfTu769decST6Tv3Xgrxo4xoLie/59Tyb8o2/G1+AJ27rsfqFjEw2et
Hc3D1QYvZ/voujtpmCYcz9qZOuvZm1sniotcv7D6+4fdaoLbWhKjJdMa7mD7
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
q4IGMS/y0wzsw0c87Vvuz5G6C8pD7SIe59FBzVjIdIO72kg7eZ48SO6ZmHd0
G70BP1H26wDK/2YqFFO8Yn6pdpP1l7i6fa0o369trZo9onSPwZEWyW5NMB9R
a275MgxsnQJVLI0AN5ufFW1/i/xuqOhdP9ZP60uqTW1G/QzovdNsZeprb3Vh
E/K35oqCJZXIC6oHs18Wor4S/Z/sjQDgLUqIuYO41L3QJqacuf9GSfgzhRzm
vpiT4k8+BzhUKhkfg/mz0u54GubbS9PjEzHvqghK6nwJ0JNXGroD7fNy3KYn
0eEAra9z0y4ir2xvLqjswOeLGOb+ROvGeNpqX+ZRB5BfNDc5F6+vXsif8BLv
K91okqdbDBBYFJF4GsvqRSsyyhCXpZQtSXfG9nes6lS6HeZTKqSSLuB9T5S/
TrDNY4BS8nK/bU/L4Hl2TSggr9ybxumnHiU29lfrT5jSSHARwWw81LcUVtL1
Txfe61z9YdPwwuPH+M2aok9JVHfqqt1LGFVAnnZgufiWE/qhBqvvbwtalSck
7k24rzOKrdse/yw0G3m2tZuc3RXbPXAoUMh7iekg7Hos4PMWcYtMaErcIyeA
uif24Y3I13eIK2lNRx4oyTtHIuIM4p+zsuJzMJcv0XrzIPJ7n2JpK/N/M9ri
mu/lovpjIN7Z8vkW8vFXj409phg6f6lcMHfB+KzYLadJGXIquZbyhhwmDUlz
qivxiXBHFreKDCbZyfPUxZQiSgQZ+Cf+c5BYduDDpbk7Tmgc3nngSOR6J7m8
b8edSArpRg4TNpR5BPPL2i+yfNZ/IykjG1QhtMnH6HMtiBvEIXINymT1IrHM
iKy+DPZBtv6ZAxro74TLnMsXlt9jFJe3V3woR9nX1NYO19CQ7y0puYftPzsr
IVsvC+097Wq6OPrBvvj9iV+RJ+rnvMydjPZiFRIYsi8Y4K1Bo/4exK96RmeM
S80BVuknGixHfXc/c4mfinagmPk1qwnt57krzW2n16VhKQ4pDm8O18UGpClp
QS6iRBJRiEqqSDbi+9//K+n7d9olhABVhHqPuu5HO2Ul1B48efBGxOiJ9VeW
MV6MVx86D3ZldwnQtvd49xZhXLJs1/n8FeMZR3Nw8wz0q2sbrjRwMvtJP73+
xN3CnJeZ8ZYT/W/7s/64Gyj/hNgdcW+Qb6s9+xAniXqsCtIJUXvqSbsbo/7M
EfXbtk1he/Euu4n9atTJB6Qe+YXM2rVgx3buabKncgeShNDfWUcuC5CLAWDW
4aWuWxg6g2tqKZvUroHr688O7itTGZufNydlet3E+Hkz8jI5RMj9iHubib97
YvnBa9i+cZzfcPNkYhL+/eZmZlJekxH/sH9Jx/nrx0cOhVi9jy50PWmN+NIn
yCJR7ymt0N/XWhN59lf/ZutGzKf6s1uvNxyClf6rrI8YMsdXk7YqRiYMcTcT
w3FNf9hh0qvUhDhS4q72pcmXwxNmz5eazT+7dM+/eu7bxFXiPGE9wS/Y+MwP
ixxU1A9ZNHv+9Hm8+39fX4qQIB4SE8M7iWoimUhF/LIRmyuFVKFoo4c5S8wg
F2OdmcTqH7XIf/t+h59Jn5Qm/Zn06VuiEAIrzJYJrj7Ku83dyF4wEKA+ZfYz
HsQbK/IfZujVIpINjvLOR56h5LXW5XUYA75o9ijbmTTCbNVX8iP60Yx0w1Lt
jQ5Xweg+ee/Uo2l+lzZe3ljM9WzZwj3u28U3bX9QmR4XLGMD4GXKrar6YN2X
D6QkMqDlU7cS64iVqAFx1PA5YvLfFl/+q8RHdhJDRD/pRIQTkUQbYb/Ye5bG
7BdbCb8EfVuTnkblFxVPvqLcOfymKnxWFnpDOUVs99i+WJ3mUaOlZnzzY2PH
3czKkizwLJvlv+1ZBkPl5bjXnEgm/mPN4CpCXvCxK2XRK7SrjlfZfW8AcnJN
3YQD0E6fmNt5agB0Jk2LWWqH/i9bPS3FGc8rPPhc8jEAZ9Wd4lm+iC8zKGHO
aNepDiellCXRX/uHaIyqAtwrULLRdQBYkrHDtNcS7bnCxHXvE4yLrZ6BSsgr
rw7uj2lEnrl5SCM+F/0y52B0YjHi3ZQu6WgrjLPzhwKeMvtR9NMumcbi9e96
a8l5q96AU6F2ap3INz1i1ulwGS6lNU67ySnE6byB7Ue/fS8RRkT/QuOxOb7N
FPrtcbaTm8i55M/us9/3kxhMOFbNMzmnMi8lGMu4Xbe9lhYD0c6LrdMSKsZf
O7+3sk6kwULXQWt3lE++c4rVFMT7R5zPWrGhPLlcki03Y3mv2yy74yjP14bb
NC28AQT1Uh5tRr/qa94tdkUTwMSCTTgT8a2Rlb5wGuZWFo8eSCgBjBh4PehD
/m4nKXKLTQ7gofCDmw6Yqz9k5Z/OHHctOu/mPOTr7Q9TbtfgcX5J+t2NSgPj
F8Xgpp8s8pCzu09fP9+p+8/vVUuRnW06e8HMa6zFWQoZaz2uvulRM1KreMiY
WI+kkiwk+cjNvxzfZ5x/cr73ZLjBpNr5NRTE4ZNebM6zQ9w3LrNMmv/mjIbv
tTRYMrau2+y+s/bOUm+GfUfYxo6FgcaOzbGlDB6dzzLRxh6MJsU7Eq0oZ3d3
HvPlTD8ZXfPEF68XGNbofvjbPoD3fM/kon34VdobxwLc8TCwXov1pqYKxzUj
D5tTPPryeSnKPbz2ySK0j77we56qqN9rj2dazQ4CeKJk/+CmAnNdoI1arshL
rjgrGR5GO1YK03SrSGWO377usQnrf3niYHMD7e+Tr447A9vFY8dNlhZo34uN
GtV89QHKNKol9DXHYafhW/kWY4BQSVuhdIl8+kHNeInpGtPgsfi1uw4SvD2I
goh9BN9Ev8sSYg2xgWj8q9T0X07mhAPhRuhMGKQSiy/1DXXJdk3znU7DHuPj
jsE2zyQzdsP0gJkxeSkykCyVqyiD9uCo62aWYc3cr3jvY24/9IPWy91noT87
Zp3p2u4F4GlDehRgeZX1HNeNKFd2q1BnDfSTbdaOrsz5D+G6a83fYBwrdG/x
P4z+l2J70X2ND0C5rZvnefSjM8x3O+q6o93dKRc0eYB2KpYgdV8e/aHkJoV8
xD1BV7lvNiF/3Lv/4D6+E+hvue/uunYIoPbo7OPFFwDi1OT1ufD5fB3jvFtC
AUJMbjmw4f1t7roJzUG/vGdr7kbuPXi/w+sPWJ5ThRUHLfe0nQlg3N/5fkvr
wfwfPD1551+llz9LlG+j5H/rnlUj9AkfQupP433kqsTVXNsSdLuveFzZdx+A
x/+6QbLpW1r4y6s+LiEA3qH+FtLY3qX1PmmQ6A/p0sryIRjnNqiuVM/B9t+u
ZaR7DHlcuZ6AYQjqi8O4yTQR49hCC09rWdRPvpW9nbu3KNwzNbJ46HqccVzm
uNx0jaIRk7nX5y6Zz3fcnIwlq8gnZBb5iuwnRVlssMVZEXPQPuYTC4jvo1VY
J/Ai+e39qBgjphKc+JbsyOGfYKQ3JUPRH/ZM8PeIfyGldHIDeYK8h/7zKnGd
uEtc/tGz8de70+99LL89xzlEbbMJI2KA0CROEhcm9KjG47lt56bxc3VXTx5r
4uaTJy/m87Stu3rmzvLMefozRJbsIDMIeWRnu9DLLCNEiGnf5rr+fnpJIr45
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
mwr0o9dfX92vAygb2tDbijp77I1l5YEGgBsNHPkc+Hv6cM1rAdR1c1onC/SR
P6Y0Zb0srzCCY62XigxqjCC55v7TnnwVmt6R0T1uR/U3nF9AXVq09AhxXcD2
auOt/WKN3s9s53qOpMwIiHfI8nbqCGkYe2FW7ggfO4+8Kn6dC8W5TvHR6WNQ
+y22kxX/vsdHvqaNXQC7P11pvtqNeP7Jutmom/F+yq7JAY/PH3dvce/FdtBk
kH8Z7b1qmLchuwNg78dXDZId3+Bc56JS/VrkVan2gXdiAmBPBItziJ8iLa28
JTEu9zjNq2I0if6icbKnbmlmVdE1emtb/YvreJ8GFWHxBK23un+23X4lC8IQ
NV44xizW7/MYPJnrOodv9onFJ2btYuWYxY7qLw9/N6cE4TleBO/Pq/7o31pA
zMeYRxKfCDqRSyyY4mPvj00eUdnlfWk8+IzvLev7sN08Qpom95DWnMDjWe0a
BWoRqu4ibuMwEuTnvxz1xKfG3GrGOmP73o29HUPe88wxwpod+f9et70Oqqjv
rrwNr3+H+lBw4F7XzSSAvMEnvRrJ3ZA+kND9ImEHbcvgsR4d1JXNl3gv9B2W
n5oHPYsSS1lG2f2X9a//1ymESCSeEsemOqoGZyvOzp4teWjH3bmC88VEnnb6
awfOCZ0PB8MForck5dOTg0U8juoOgH3gDNu7dwAM3DSMdVGfG1voqe8TBLC0
ETDdi3Fy0ivTTe0ewMpHZ71OudBBP1DCt8t1HFwDe7ylnADmWXHr75T9Sn1m
06UVJgpgpPtIdt/tjq/X1i5bXbaMmBofepziSy4m1UkDwhbZx9gf33N872n9
NV73n6ef7dc4nOXkCnIpeeKPeeTZmtkesslt98g68sw0q58q//nNeNUXB7gz
cOJ9zoAatAerhjBF0uDuS6v8xUV0WNXC0WrcXAJ8lZ5VppVB9PyapNcF1R1w
tj6rfh7i8NnG5W8uvaHDsqAboSvjAMy0Psq+EgBIND4gsecYFVKdd6pt5AEI
ym95JCvCmHckz/eK0ASsT93iOv32ZmrYk4dOrvwAUU7bVbtOJQH1CvVM7+Gj
SULckdx7jsuL/X25rhGXic2ofW5Q5lPukPsorGQnEUxUThmO9ftMKv866wk8
IXwIN8KDvEjcII4S84iVrC9YbrDQln90dbTYqb93pD1C21vMvh8sgs65H7DC
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
52s1yKcSebfyGvLePPWrHIqEAkbE8t9cD/yvJpKoIcNIOhnzs71NJ0Z32Gzp
37NPJeMhqx17CIBa/J6YiMc11LKgVu93jz9Dl/dtRzryQ2N3MVtx5PMbjXVV
etFOfUpjItlKADQlVvFxrLd1Kh7iHmivj4p7hdIwt9eqk+xTA3hsoKSwSQ9g
Uveo7AnUDam632TO66Af6ZyXUWfMO6ErL3MR99N0psnY6g6Ct+ZiKXsNHxqf
SYXyTSMZuv36kpXz1n61u3jr0IVdAtoZxfJsAipSXJAqPnjDin86+PLlnA2+
EdPAPY2J6dK0cY5fJV1GPCA9SAXSfcGJ+bVsZ05pmlJM9imub5dOt0197Id8
WPGQwhKBnJx+ZDzihB5rOrIiP2IOyUucIg4QLX+WgabSGeRfl4hvqPEWYPQ4
ikcYfdZ75+w0emdO2ir1tLrF+OWjvdY5tT4IeWRFd9a3MJ+Peo3L92E4B+KV
U7z5s+R8gCDDr1YGiEcRNoMOMRjH3L2XBWVGoL8YjdpscwSYbVZmJ+sMUHb/
xUPmIIA1AZFR2xIBRBwePjiB9TTNNcj3aDCAlY6ryWz000HBVeIDUmhPmRIl
xngiLukdim/RzqXSXor+mDdIlyk+xLxEqlyBse53icwM5QsaAOE3XvHPQD47
fNdYNFcC4JqQtIStNMADkQbJLGwvK85on92N/PYxTxxPyRnkywKcQvdE8L6C
KaIpeD6bUJtYAJ5vJmUut0D+AN1cuEIsFY/7bCneGMfl0dpEaBI2hPXMdQQ3
br8fT/37+RbPEkfQxsbEfMpKyjJK/dQP2ucaz628UKvK2ypYUZxmCLMHFjQ/
KlSgH22Pqrnz4hm4tLFUjaCOq21+WbIc7Xyhq6TaKw3rsXdT7WfMzXrlahdi
nOto4io5jr+bJIwFLXMC8NO5r5tuAtDswO3CWF+8KNgtkilTAESD50Q2Y7xk
kU9RZNbh+hZ4yur08YtSEcu3XOecseO0gtuq7SsPr03S5ONh4jW6uvHZM3Ep
GWstAGXhHjEjlUzqeokP0vO1POGVjKlCpH4l3U36ogKbPjf9lQAhmqUYPfJ6
tufsi2ySG3+Vb5g4SMqSPtMqiAFiHhnG5EH4EgnEBSYzwoLwIOi/TQA8TGYQ
KoTklF1YOHpnB8wY2skWbyibw21D/5RVoDrnlCeERq6R5OK+D9tCY0WFjmrS
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
IFf7vanMPTpcEC2STJQKockpDqueQPz4sJdzH3Ew/ed8N/soIwQbOYdM+XON
9x+mH18IchHbUR9ZENoEE7mSzJzqGNQ5XHC0keesTaDhfmtD1AF58Qahazz2
0VnbhSvS0jXhfI9OQ0gBgExXbc3bDKznDseK6RiXdFtPvsrCuCRfS3nJgbxU
vuBqqoE/4mduV4KCN9onayTW5gFAk5uDpwnymIA4x+TGQhqURsXGu2H7MIyZ
m9j88jWs9xcNWYj3YVdZpX4LcVNaZotiCbYPPtnXiq8w55R8IGuKfpkle1op
2sCVLiS98ft6LbyCBiJ6igAUyQKZb9pmVEtl0JRijFfb5rC1a1eq1a/yyZMh
ZBfpzHyQWEtswLjxY/wfC8H6fX3c369/NIKQIA4T/iTL994VFmLpDKZpUhSb
lcdiLKVrj+weMy27ZUAy1md+nqWx6zQzTER1SDlyz6B35L5W9+Lxotd7awi8
35fcuoxYjCpg79QLsSj294t8Fw2vus3DyXOY54sQdY/u3pq9YzeDS0/6UTC+
+VUYmnBeQj7xjsPjqdgYXW5Q/OF6sc+wuXmLqc2ZHijuEWpsrRz8+TV9HWh3
SPZ1fOCib/JM0uCVew0lhWoJEPqCqviN/5P+EOLuqtrl48vWne8RzN47snxe
OPd+vk2Vq5Ev7RjdtGbjI2rTmYDjC7kBykTDz248DHA9/aXizGMfIS6SW9qD
W5F6NX2m6tLTspC9j742k+PB1ELGByjiZBvh8dsHxDXEHKx/O6KLvEwxpvj8
PMrCRKoHqRcavqo6nU3Lffn6EPjF+yWue+lKY01tS59T/A1UmjqbbrQjzxu6
+fHrKOrvNlqv5wD6XS5XFvMzjFcZXo4PMc7tzHZQu6UAsKFaU6sU/aDzLY/J
WvST5tYDluoGjO8OmbQzMK51x7lrOGEentx+D6wBirOuhDD61XJKZ+eQyDOr
XkVVh9YDuHofNr9qB3D//ka+t3cA7vlnSfAgfr43eXK9kh95r9cGC3a7tVSb
J7Q0zZxSuM5Rv1BzUbllE+GA8aGVZCc5yDXke6Yf60DM/lPr/v8kzfo+X9lc
Yj5FjXQluafaWfWx15y2O6q9+R+PqaUhINX59oqnKe+jCnl7STdi/VqFnjD8
bIp8/ik1uIGxTlFZ0QvvPLRT/ZeGTlQfGc0eHZaoL7S7Vg8GfMB42bvgQ8kn
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
zZFo/GqxNEQzq5n5zAamHxgR1xkynDb3m95vdMaZB28eWj/YhOVfOryqeYHx
gmqRZxerL9ZonYWqjac71ztJ6Eg9aLnScG8HNT0rZevoqvm2k6uDMdacZpYo
6pn2ccHc2RnLB82r0y/bNPlQEMa17mp2Mp03rjUImO83csCTnJVJTgmekVLF
M1yTnYr7PJ5yRD+n7RKtV0GXhTSEX3MmaKg3Vo1yzY4W4SYzdTTHth/Upb+9
hdX2RfFXhtyzdX/olDQyOsB34afouS1Lj83D+Gh4SPj7sF5be5G30IcwTl/k
g7xRa6QNbYhL/6Pk+GkYCfHk3x1iba+BE1AGkZwoTgTniYT9jPiC7UWHTgxJ
kU2Zm977aZTzOcvehvvWLrMI67BNbVLCKyFdYqmcUf/9ULeKSovHiWaIdDFI
lr/VqqfMyh7iKl2VZsqLd7WQXy8/UmGPppDBTA1f2fYJasV6Y5c7Lnvff63B
1AleGA8vkR5jYBta96JYdIyzXfd67ZL6JDWnt/iQkoNce6lYez1i+StDFvRB
dSS2wryOlR/Hnvi7vEQ7iFsvaFe22KdaDrUMWbipuHdGVlpELZtvOX5pksnH
PnMLstakDaitTDcaOWtUVN3Ivc/Wh6dgvKHvtl5hepdD+f6XMpOJRnL6++u4
+kGwRV2RP1rBGBDpZQjaMFPRU8FFKbvH1pXrFj/YpvzO/uqhc4MeYTz2Ru/L
eQ/U68YfWLcj4vyHjwanrh74eGcH7hI3Nep48i7BvLZilIUOIA1GBmRAAbT/
v0f/lISBFTgTra/5+VDxPOGrws+1O7S+KC0ju9X0sYqMUivlMpcXQ/yC4kKP
rEks8s80nk70juIRY3tnYayxzDKpNLNhHcSwRO8MjDOnZIccijnwLKrr+rZq
hl6fzTP6s8xy1Osyvov87PabvCbOzCipzV0alewzweaT0tqqsboTntR+2Ns3
Szp7ck3sicJ8hYKK+nnrnCagtLO1oZILRa+I3tPvBcbQiZSkWzCXyE0lZjrE
wnAo+KLC2fBdjO9JH234CrUoeieIcPIEs3EaI+uMHu9U2XJgkcKmc8tmV4RO
1ztdV6ZVbJNU+Mlgwaw5q+Ixvl4+ufRu6tMjp7pLmYd3KRM0JPqpL8e5h7/N
unLEdl/1NIzdpz7LqUtWCeNfzyI6xGj4hb1D2s7bRONLIu1oLJzmXV3YKDdV
oJonj2XYwTAIfMkZPs33VePypfT+s/uDuH12RpTYviLfUT5KkncVgwCwZlyZ
SiQriLhxmGG4mMPBg90OhR/tX4jxoV33946bkV57rOhB0c04RyzaPs2wVm+q
m56cmFynVrEtHFFnpISWMqIIoTdgheaTcr8QCpjXcByqgb8fs+IX2zdDInfb
Q4rgWJS3Gx5qnOfQ1N0tT7RJFfhsucRPh1BjGesKS2EzqQ9HBflmqpAv01rR
eU1IvMYIw+TpteP9QwNVh8nXnXGq6D/Jb3j9Lo+T7hKD9tee6zLAuJMVxv56
ezR3Ge6pzmLl0THG191d6ZLcPpW0lDX643ULjMxyA1o/UVBTtvGtbgxdV/Cc
9yiMWC36ggmnYV26dX9vWTvfY4rNHMclGJfMrqlYvGFn7fTSwqX2m+pwRO7C
4qXEztw9Y06Z76p6jCf+kjereHb9hqB7Qw1GYOzac52Nvd2TB26oN4pCQ2QP
gB2yR9cF77tRVEP0iVikUfN0EBWTF74lomfOiBxhfNieCvzztqREdQHjZhXx
69dLdVAEJWgFHtAP3EEcdWHTmUJGjLmjYq88Q+Wl0r3uk7p3tJrqd0B6hHQ/
2eIvfo/xj/AgLgh6ollwGK7CPF69M/+sH+QliCE5pCnoiGkj5iJqJJZmpJ94
PenqpNw3TvnTCtcsaln3fuqIGeJlcXU1E/dOGjL9fa1JyLnQnsM1LwmjeyCC
tAVy3Ap6QC9Y/3ej/c2zu8MUw5kGJ2xvF5fl2WW/uR85/+2MbNJeWbu/6+dt
X7qAf988pj9jyKwDtZZ6UqJSez+TeyKNri3MIS3bVPgAzsgPZaDp/6H+3yBT
9XjlYTa7AnaQ1vQ60xpVgDexRkpJ+ekALBJD7wGDiCBeqi1nSe2UetJOJWJo
4NygO+cH949y6Nwvc6OYh6bTkH6t1juOXzyyNkbtkc8st5wLGeZXJw5TCdnh
fyx/MUee84Qt+A43kmnop2zqDzaBzmAJk5AF48XkMi+b3buGE9FyqAwrU283
v2t8dx3L1PwBgUyAfETMkTHj9yfHZAbePZZaNVE7b+ozoTTXiQ+mrXtyMu5p
7J7kp1dq+s9xRd4l6+oMNPQXGC5K2s7OhjmsyGcbzdxA1ciYWcXLt4W/uvIz
rnf4MlxJ39RPIdaYPh1AHT2B96D8WT27Laoj+kJESbml/AOJi1JHAhhzP90H
BtXzlg2U6/6mp/KxmIjwPqwzuj50uKZ9Z7fTt++HT+zj7HT7apXPWvOuNgmH
zlqd0Ldo32eBrrpIq27yLiNGcD6hLoyxfvPn3ENGyApxeM9vvkz3+/++9PcG
hzcSwQVBLspFyxF/eLa9QF7dDT4bVpiwUFjW/Jxh7+7tF64cVGI/yVn+pqzT
ZLungdf6/zbUdciKMWKEmIHN2ltRXm/819dD/iv43zeVBWmQIhr+M3QLZSMz
QbqEDN89lPUyLo99En532XaMI06kHlRcqPtJZ+rzjF+Si2uMJrQe3T8OY83B
M72GurW8PSUoxnflgEGLk3pWd3/btTSr9QA3Z47dvorSSRvGoXjjx4WlFTN7
ZGGcPu9AgctkjEXnxs7YnoHxuTyxrC3JGFfELoqwCZj76m1sdcSNAMtq/3Eo
YXY0xq22B6xPJnZOp6sR55mVm2vPnM89Vb60+lPo3exrsPFhnbH7XWeTXntK
uLEWgUPMGqYLk89b/yD5pdf/ZmEbc6UVXGQeMNXMMIE8tHeTcytyW74s7PLh
K1uuYdx7gd3CkMVMXf7W2q2ftmE881n+c7lnGC8x7GUk30F++GWOHFsDJzVa
TTw0Mt8vtb5raZeZa0h6++ZEjZUNwzjIaL7uFZU38f9fXP4KOo1/k2RSRUxF
AkXL9FepS2oUa2RZCmk+bDO5jVmXhVACpZCJGkYd1BvnFMoR95nZ8NPSqdEJ
tiWGWqaG+cAkCL3SKdVZp11iskBcWeKJRLzCl/xnIldUBwvYvWgtykSGf1lf
fdOyQjJBFJlvTL4VdNWyz8OsEqfMXyIxVkrPHxEw6F7NvpkzRyk7YZypq6vm
IrNNENFVyBOdhfifvn98D+wkLgTdgHvE7peEp+LXxZeKz1MQXh+35spa6bda
h+/t6rMD4ye/DK+SPkfScafflhWbMX5xeNGBtUcw9gy5NHCPV8TlhzJK0gMl
ZhhrEZ3ICObCZdhLbBHl73T/ju8fb9QTTUCxgvJ9WLVc+bGGi2dUlkjKgtkY
m+W1zkouw3jkti7rrhzFOOCQ6q7MyxjDAlTSZx3GpZ2KO5w2tXZOg1jinpN2
9ipSInWbq2nQbOXDaZx10tS/uwkyYQa8RgOY4+gN+ryZ6m5habHf8oxn8bqN
q6O3TLnRb82F1ae3FN6YFmsRM29U0on7Pnf7jnYcsFDfQELNsk1MyEaJ4yKP
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
PHUd7ze12XnaL/1fwfzKsb+y4/UZdeYZ2vyPyaE36Dk6itbBJEiDCCgXnOeO
R3zzw7D/Ofwc4XMEDsEbSAB1aEuOLgny5bHNDet2ZqoDrh4QW6sROO3mvKPb
Vg73xTi73Dl7uiPGlQvX5WSSX/8ZdWN9e5t90FHWU0iS6Gzcidh5iuAGw5EZ
Koe07769+VHgr5dVJpJTEtTAEVmiiVCCjInekwmdmCqnTn02a1yK3NV9qml/
xb12fH/KbE+mL3JF/hAAuuR+/nnLbr1NBysaWIsky8UsMClctZyZQzSjOS0y
YBb0gmtE2+gLbeDmf/+i3yhtmQSi74+GAmYHOoK2shJMIpqKVrJ1aC46jVax
g5kLxCY4yT5kApjFzP7P9L0ZBpN1u+h3GWy5ZlR5q+WzLoXVn76f/gYTBj2R
+4RxWL3+XdNXGIt+sLoa/lihPuTd5QutHwjXj3+XfrbsrmL96w+nToTeOU7u
1z135THG5jjtl1+eYDx/1ZLCikUtrrZok6gqoTHekf+8rUx7JorZzqu//ZrF
5met1k39/hwOS5CS0tLS1zcy8vVl2IZ1CPz9kxr2U2IaEWpETKxr14bxhkWL
/Pzi4vLyMA4ISE6eNw/jwMCxY8vKMA4NTU9fsoTkY9ikSQ2/1tbOzv7+27YJ
CbEkZFnZ5jFRVVXX0Nbu169zZyurfv2mTevStVev/v0XLNDW1tfv0GHIkAZ/
CElJNcX8f1l/QWlADPb84T0FQppC6kKLpJOlGKmWUmf+9gLAhvkaQiD/d71T
KN81Qo07WTDQDazBhtQ8LxjSsL4WxkMRsaTHo/HoCjHsHzLiaCCKRYm89jJB
4F+ksX9MFsRQHZwB/rq+kCb53dgvR+enUX5umu+/8hKeEreb1LVwCINVROv3
J06KNy+a+dPzsynfAk35uokZx6xHhwQnhji/7Du8Y+CMR09CLt6cgXH1FO3E
KtdDtWcz2g81t7PAZ4pGJiW5nsdBo8b6L7a+9noz+4jpyzgJ9nENJza+BWxE
iDd36mdnKXFLiGXdl7RXjvBJkCDLXSKcndxdsoLH7EvIyhhS7e92w6XG63iR
v8FH/Xd65nq/H5oqWw7lMBvafvZ9PiNoB12hu8A+vGcx3cLYKsDDb0PFmq6H
MV65av7SM5vv1VYPvTl4RYwsVky+G313Qi6uCh7tOzlc+u0Z8yskex9o8P1v
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
5WHL+p4yY3X827he9nJY9jLA16c6YEmltH83h0Hu3vtU7jwsbFmJ8T0n48Dn
cc61rnofXNITMO6nPafjYYuk5hvv/GM85pxnOcIHOm5WiGyv1dft5mW1zF63
gjF2UDGzOOSDaxSV95tv8rXARQoRXVw9+nzapVDfaZTjlPv7VDLNbb05tTMU
qg0/9ao48oHZLdxLvEQagSLRZlWREQTAdMD/VrS/GX677kQIlqAVaBtaivKh
GCrgLKqWvSHr1+p06237thyadLrDy8ClluuZvaNx4JLra732x9Q5JgyavSjG
+2ONxHLZA6JDlX8buih0aqfa+Zmu99CaNvO0V6rKCCaOaSNLBOjJNye3fhR+
/TX2BkLRYGSEdgnSe6VbaP+rfUq8bz++8nDApft1DeMI7Z9ivPB6xflDa/bW
7NvjsvnqHPO6Mc/t793d2q5e5JcRJ1KWY7x+nknhtKxptdWX08877XpRa//x
8GuTa8Nq0dvM5y0uVdc0hBN4E+OsAq+8+4l5gvHHdagCBSANNgcyYRSxbLj8
1fVFXxqH+X6KEbe2NeXLFCaRWYlaCV4sYkC5s7eJxtDcrUobbKdgbKE717zC
bWKt0sqFRZbut+q6zbqcyvQrxTtmj53oaIfxy7yy5Am9xj0dMrsoHffxfnlv
08dSW/cedV3VNFobS3n2awvaIEMs0mMonegnAT/s/Pfvjb1oMloH65nB4Alt
wR7ytTU0WrdY1mv4rVN7f/F+8IG0YHeSwzGOuSN7+LLP4veb3B46KhnuHPxG
yFWomp3D2nsqOnTW9IyYvzB7ul2vnWvuvW91zTFkVF3xTp+lgc4TLmxhKtgl
qI6xRrJoLITADMglGuWTr/3a/xoaQlM5qznjFJ2kuoovFdds99uretKK01IC
9YKD7prvHDXhUBrG4bvujj+civHd7bnjLqdgnLylIucD0etCN80qqFmMccvD
hgsCN2B89UXHAyJXMNauHXd6933i78Pk8zIPhtS53tlx9MaFY7jLydnbUw5h
LFS7/1b98xqc87b8UuhDjKXeLTv35h7Gh95knVx4C2P7ZxMOGFzGeODrpCMi
NzDWeC1/xO868fda6egC8pvzbtSJpNsfcdqFjqva7MM4aGfi7E3LYuq1TgRV
DN16q3bM2jV5D8tO1jjKCUkflbliPp75hMwZGzjE9GTSmTIhBzAHG7jTuB5C
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
25PGh60KrMiVloab7M46D5ePbX9vcs32QVyBnJyR7m7nEwl8sYIHRMq2T75f
1hz1udlzM+ere3q7upvCyaBHj+9H0/P0bE7dGCcc4DlZjoU0RBz/D/wV/yo0
kdHjh58wBcWiGGRC5JEvkMvINkzmJGPSHlIdWifOKc4k/kblZJVclVqVaafJ
acfMOWeO1chzfeSU4moVVSUbko3JtsiSbE92IjMy/qif8VsM+b+3PpPh2/Hj
OZyRJ8ak64ndyBUfosTvlfuzE30d6xzEjYRIAiRWkj7JG7kgO9SEPAPO+33y
rjo5W/HWDj/ZHxufY3H/LiPPZmhDEcgNMZPyyRJkNvLSqf6OYpGfR523fUnG
s4IO0dc7x6+84OlkeA2Q9ezQi/IXW0C5rb9zN74efc3Q3d7tT+PtZRywx9av
Runp8he3ARal6CW9zAwGr7JtJT13dtJEytKvNVQDPIl6GREX/+DpRCsMU/hA
lLwRI1POqev9iz0WBy2mLA8++SpDM4OlbNXQ0dHWEQDWsWRaIw3bRSPR1MX4
PPRVdjx1/EfcEgXTrbsCdikFTdYzQmIgT8PHZBy1PxqNCWvwv+FcVg0uJw1v
Sd74wlLEelzCEeBhxeV86b1YLl71zZH1YvvAHVMVsFV7vKbZcLrayrUoUWJl
Dp/Iglca3bOMZ6yafnsq/+lcUYvVAys4JdYXXDjPfmJ2y7BK006ObZaVrane
fmM7mPu5by9PX2eWBNVl5smKxoHQc3f4UsLeMdgQrG8foQjwIfTWbrICgOSB
z841ShgnHOhy2aECEHLQ0jVXFWCvl7fh1i2qNNVY78BHVp0guL8x/Kvn7tqb
rBvn7Z7Tu66K/zn3ebZzCiqmbsoPVt/P6Y1z98yVv/yxrGRVkgu2O2c95rpc
vQ+AUnO+UDMAwDw1KOqOaTalNKTefo5iB+VTeJZd2M4zNMeIOnt/RRPandjX
7g6qtdQeN0WjYknHL0rkiyRm0lfO/6xP/zhEoONEEtYLk9t9FiNzwVTBr6uq
mFq1TNTiDcxeXrCsM0xxpMAnTSYlWV122kGNakUDHQq8cm7cfcAf97d3j5N2
FA3kfVhcaKEAHablhjucX8COdLlk1vLbsCnBOqa8GOBcTvHJuhQaqA5ofthe
AeAWKbkX6QGUO2mYLcD4YaWPsV0G/p6W7LFz2hOE7ZqAWI8BjAtaHPx2Efjv
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
GA8uiWZyO+SAx1tUlttVfJZKmhlk6QMglJV3VAB/Lz05p86sylWnEXHMvm12
VKg+5OZ9A9eXcqhwD6OrKzU2dTjAy8kdGl2tTS5rVlRNvtc9lIvi0Em0Gi1H
fMjyn9PZ/we0HG1C0igcvUDixC5Cg7AjmZEbyFsYaMpu7tdDzlc1Jxy/b43l
0uvDUiXza/d12dqWRWQnPL3uoJrpxLjvWMoV7Urf/KinIWTLTXF5Z5QfWkVr
t16iHAYvPxQYemALbZlrxkLTWeNwroE9SwjblzaPFnaQsbz9vK+tuAvjv64o
Wp1ELx6vEWF3X+P7SvsDa50/4PGzT/KmV8cYbDB/fELtxnWa4271LPmqcNis
ty3SKF3i+RzdZ3uCo7sK1jhcPOSbzlCeHLb89MICrrsqGzulZ8hLmE6+3xNC
nGRIqvn+Pf7phtMUJcyNYzfk2Lx4plKrQY6JYl2AZ/L+XfEAIYmqzypGMU6O
HHqgMojlzP45D3y/YH0R+q7q9NuNY1XhMXcPdUlSW6Jia9Nwv3ruu3bza3sv
bPTMTG3Ccuuseay/wQEAi6OrLythOXW3NK+iDJ+V7U+mO17FdoZ90xWxZwB3
HCwvCj+ir+NMu6T6GOsr55XX3jz/Cj6atVENpzfBXAV9L3ToMY1l6zx74RCb
D8X8vlLC6u/SHGfqzrNmp/2Sn+K9/D2ZbRtYPTJuRpScOWYzVvv6ecu7QoxT
oqyCr9rtfjqxcX58DpBaSHqkJKIff6GXUeiUwcn+bV09J1r6bd0MKxpEA6gX
zfjmDeT9E8+HEwj9zfy+BlLH/xQxNpqD5qOdKBhloNNIlWAl4tBhxIyWMn1i
uM6wkCt9t4O1gs31PbMO2kXRYsPK2z9GdK/6cotWNnT/68eRcurRQd9+zqHT
FLYhy8F7QwCvkmWT3yUHV9RvrtnEtvn+ronWSkjchCKWAnwED5qH2DDi/JnI
3zPd7SAkiS24bAaWgemoDe3h288ryBvIycgpuTCP4+2yyfLvUAt6iLb/5YBC
LZFLeBA2U3pOgDd7yXnOIdGIds8Hty/7Uvve6T+5WwZQKKkgsWz9devpC3cx
b5jWstI48r3VXMPFx4Wq1qZkH3z9JutlwbGBMICHT0ail3sB+NUaRc7z6AQV
27VaF5QBblmstrmB9VlNyYry2dgunN1rOOCJxzlvJWuVdR1AVJF/MRO2R44e
CjnolXCAwpO8IZE4CXDPaZ1juceb3GAUggJR99RzGwmWCR4TPK9o9Pr820Vv
Z44sbFvbsRHbqQubk59EPJWiJDRSm4XwOF/uJOYc7jQOe5rSHlk/GgP9r1yj
MMwG3iMXqB7UD1B3I7xSvfLUl4laAxZN1m+FdaHVb8bpH4tsZhhtKhAuWLLv
4JtT4SGOulj+xRd7nFbeQNH2qzdLkmmg7Q176jKi5E2dfikq/aulCuV25arM
OIsSaukNqVQ7E4Cgu1czKiwAsvbzOddg+/BTqeRV4uS073HmH1DrL1zLYg/Q
Ar1b0gVdqgA+vQ4vbe1G4EC/6OtBzOdno6i36QS24wfK3wulAOj2KL9algSw
vehWdiS2X6LOl2TbHZiorXPsK7i8zeo89QDbI2F3fJiVblM1/cfN5WQAWG+/
PXPW6gntwc2hbHmLJEpm2vJIHYOHNIcAE1thxZcg5F9vUSA7BnpRio4CSjS4
ud/PebMyFfz2v3BapAQwP5LbsXWnJjX+8LjnRnX8nanWSk4TyvueoGsWYyqh
SnSiMtL0bzuimv65bPtvkC3++mzxc1cRdUQHsRXN2Ky46f6mXRuv6ptp6u2S
ockZTtdsMKmizZFZuilZ4SR8iV8dPdMd86k/v/cQHkdyhirazzDfjviz+8Rh
/KCfHnjU7SK2F4+Mh3nZYZ48mnUrFNuH0u8/NXW4YRxSRD3BiPsz475isYY+
HqdHjoQe1ANY5epp8RaXz7VsMfC3wjjjwqsc81g6V5OgGeMAu4j3gUcscTtb
PcWuSAFE699WDTIah7taz5TcDSxhu3Wwca/zDFqnwbiGgQWJKimrIfVFZmDD
J3IbuZO8EBWh86gYy+t/dn//94jA2iIJpSCtKflQR24hvyZvYy1o92poffh2
XNHlknWMzduoyb8/ZIhlyGdoZNRDYkgcBRMaDC9I28mOUws9B9YvnyvGcUeJ
s8Pyoj7GVYo9d9qaO8yo3FSVnpDe57i/D/dVfqX3+9KPRdguqnvn9Ez1JcZt
vc3tym8ARGkRPW6fsf3TUl16DuPAjmdm1/lvzaEw0Q69OoVxfJE30+7m3eJH
J9sL+Pbk29Ep5Ij20Wefv9NCxIEWYH0s++2Yg62ShWgRLjftW3ywX9el/psm
aAk+lmJL7hyqwnbNY7QFaSM5bNmcJksx5JF2zjRSy3e4Jb+pidXycpS29uEe
qfCXl31tDw37pW6ut/Yzor6KfVPO51YN1QH9edutMb4L9s+v2Q2Qo2/pq7ld
83oDqzPHXBa2qXnoQJbnbCvnNDNbiMyUShZxtnP1UI0MdIhoWXz/8oP1V/A4
HYnpf9A6IX9vfAI48ES6qbniYrsoZ/6iHQsLVk7Wc5yIJxyJT39QPfc/pd9/
HW5iHtGB5k4VYOSQWtDIili0Hj2sfZkl9o7v9caXzbcB1tGWjJPeBtIaLvXn
SJ2hwdXEx/u4MM54kP4palkJxhUliUevYnl6O08qeGYU1nv3nY8pYn24vvTo
0ep8AI00qciL1zAOSXsWvhyX84nW8l6I9aSMdZVukxPW1/dlqmaWTvBnCR7P
LHc9b1XmfoGVtZI3l6YrUP1vZhXLHcP6USZLcrPYRaOJp2VCaUQkIUfEk7nw
qFzwG3zQgq6gcVRAPMcSFdCH71mcf+Sz+rOtr6lDl5ApMpji0zuWF7MkptXy
7ph1gtmJYej/cfcdYFEs27rdMwQxIUHMghHMCQRFERUTSUCCgJKUKEmQqCBJ
QJKAEkSJkgxkEMmSkYxEUQGRLAqSkZlZr9qA57rfvue+e+852/3WfFBfd0/3
dNfqWuv/a1XVWlLGPsZewX7K59Tiaq7SLchehvZ5n5MCcPDq9a61jqOotkc3
SyMeFiEycpJ9/xMYOm0vxSZIAd0R+oYvus3AMBX5qtL4Fswd+9job5RB8axp
S1mFcFHeq+dZTaoAVt7Xrz0+1JGXSd5P7sXz6NnojMgUXGJuApf5avISvxXE
PfFgq8l6a26sFJsn+4c8m/9MnpG8SZ9wIJ0nLSORcXlyHLLECljk96Okr+wE
//92/R9iHhfxhv6I3zJg7qSleAAWT1bEIzA1zA0f26O0uHge2zl3/yyhJ5vy
Zrp17299s/5ZjqvIyeUJbPftLLwv22+3n/rgW8KdnpVQB4lP5V079ehA0veY
hht6D+iTLz66jdqhRkFL5LowAFLNfPHlG4SpSSPRCl6bALJNFnCnsB0I2/j1
DXtAx0oOxouxJ3TMuBDi3ZV4D6aP7cN24M1YFCaHuSMWyYSsO/cfniMIC0Qf
YUwek0Ef2e8Rix+jRn/f9taPr8P3/kP/5p/Jmwd1t87fc0SIIqCbjPi218j2
psXdOLVqQubVgz6AxRMbW2p6AQQn/FoAleHj2o0bewBSx9jrLhP5pUenq3QR
/qgaFa1qJuZNjKZXiqHyzehA1XwCl4yKV+5D2/qjMhVd7USeB8ZqJbR/anTi
a76HOWM21dmorBhdXCnSQfw+Y5kckX9iSqjqLLr+YLNSakApgFnjkpTcYgBv
ime9G7qvLaOby86+AfAoc4i8jPwhreZFBIF/x0aPJl5G/LNhWC5WJmkruL4W
uMf84B7wxozYnnTKGVyhuPeUhtirgJ4lw+yXF9/6vr7MCPN/Xkv/Pvl1PP/y
5atXr1kjJWVo+OAB0f9/6tSFC2ZmFAofHy/vgQPEfAF5eX19Yp0iR0ein/9b
/mkinmBh4elJ7L9zJynpW78+MT/BxCQurrKS6O//1v//I15gYZGYWFf3M9+D
oWF0NDHvwcIiObmhgZiPoKlpaQmAf21PAHO/CgAdHYmE4wB8fGJiZ88ScYZv
v2diEhtLXJe4PhFvuHQpNJSIJ5w6pad37RpRXrxoZkbETc6eJeImR458ywtx
4oSqqrExMV/CxubOHQBj4+jokhIq9eJFPz/iurt3CwufOlVb+2ut/Xu19D+X
HNJpEgspflbPgWcYj+cLZXhszH8QYeoDIJ7S4N/nvJhyLfHpHa4bAMXJnP57
nAGUIzncnl6dBKab2iYSWgBrvcsspvSQ3kL5nemuAnjazdUT1XgNXFenLj5G
fq7OGTOM1qUAyV5Edw/CnbLmbGotygCNVsEXhFVQO/KYNOFA74+ql4aZrsEY
yMQt8ytGvP5RaJDb0ututLysvQ/e+1VRIazFVfNqPViG4y4G5jNgdzPjsthF
Koz7nLSU1RWj7X5g6xplMQOC1wS1LysFd3RgIdhtbOvsgj4EWj6ADfw1lf2/
IJKYOeaKbZx9zzyZKhZystAWlvHOk76qEvKh5ISH9gOLBOr9SL2vYz33Rxx7
6zEN0B0w+OoFKq95OdeFfSbWUQqsNBwEaLnp1Kg4heypuft1QO10wzXXrVFc
AEmV6Y8NH6N2l99Vsxbh+7m2z7KjUVlzo6dcBZ3H5Xz7RT+Rd8dmR2EWso8C
JrUZla+/AL+h61Pie7omPemTrWO01/Zvy2MQL5jjTCrr6CHGEcanZFTwDLNZ
sN41iR2vvMvNsLN1d7o0J7YLcZmtmA6ei7fj5n/7+MMP2U+P04fT8eBPV1Vu
yOUh79VcX8fnIdSoTTqgq5x1Ce5UXoi8ey9ty1tXxz3lB1E9Sd0orryL+LW3
Y3JJcM9ZeOgqVGM/DMBucy5d+eUXuGyd77LUC9mjjo4Ot06AT/cGU6/lA1Sr
7XusgezqVj3PRHFkJ4u11sU1IPv5SbP70Ra0P1ujPMoc+S2Po+6XNW760e4d
NJZlUq+jmek3qCyXme70Wb2TfYhpfDbhgCcLE6v6oi4emtVxpxbLJTlMJfYV
ocjulTYVlDNFIbz7WPdB5o1lU5EszxfdXSAtYEWWIKeTLHF6uh7yDrIbApTb
sbWYx3e74kyOJFWRREnvSeokBVIlvvP7ft7vZc73X/3xWv95/sHfQ/DvyPlH
P8UibDO2EaG2VNwPv4sH4zb4YrIUqhFfvJQ8l46Bzox8DWE2JWwQV3T67DDp
qJbzY35DDyDjhURlaOhD02ge5IxvHVVG7dFtknXSjwLgOyY05v4lj/rj+4Nv
Od86tzFODy5IW9C0wIhDj3SOdIdURwoluZFSSZV0bKQBnJ+UT7bHrLGbmOCs
nYgm3Sc5kopncdgZU7PLpobdgVPCWw8dPNAo/2O/HEmExENa9fsCyv+m2GAm
mCb2AmFnMYSi92BkuudkC3L9HJdEvnB/T703M638JRxP+qH3RUyOcFQQreep
1E0ui5cTilTT7OlYAIZhtuRqxLvv942E2Lo2wLrulLudDlOAD/KGed4EWPKu
yb/bjgaXpXcejhYEuMHWzbqYDSD+/MlzUojvkZ69ynRB7dS4kLF0CrmxL0+Y
4nenLaMcf7ow5THaXyr2TPSA1KnZBO2tXJ1cwNV+5GHH1c5P70Inm8c+TLAj
XFzbUte6pDWEytY92qeA7O/i3v0f8gcmZufLcI/v/DL4ZRokPsZ+bhh2oW6i
OkEMpNNeRYnG0j2sfPkt/6Y+nQhJiaRKCkbvLfHx/8+q7i+Varon5B6SHNdB
cxmVE8JpI1+CBK/NlbanfQi0staS6qUFerQajotOQNFVhgtwZAb239lsK3K6
FirTgoKszn2ipZeyRpdoyFPVQrRtuUXdaAxBpp728gBNVH5qxcgomPbuf38F
4UvP+kP5wYrIfkJd/zDCMRITAZ0MJgBDo2HdjQj/pdD2j1RHIJz56X27jQvi
/zUJpUcDvtW5EmqdN3qF30tWIz1n8j06KU8B+xunDdOEEH+4ddV8UkocXEMY
3E1kY6DYMcqg4gQNSNcXXFQToYLCzXp9DVFkn29zmc8/jfCTu5qRjxjAaxc+
fR1RCuh5tV2uEaPSsnz3mr2SPEQtuCqnMXKEcYqPMZ5eiy5kdl3nXMyP6GH9
2/Rv498jt/vw7fge3B5xYS5sORaLta5ftT56XTLZWMRdaO/xZw1RchkSCggn
Uk4vOtkum0d9dvLaEaUjVDjZHtGakwgwMrij3xzh+e2mbTpWsoh33dfxvIF4
OXucy302BQCOR773PmognBknHuGkCcCWezSOYghQ3t5QI26D9Pixs8UL6Vs2
YV3QQUnEU+pZqh1iCZ2qTD9HfOFo6CFfW8QLmhX8xXeh63bI8Un0nkf88ISr
UPkpgEA5dnHOs88oxRqqys3outFH9x/mOeES+h+fdvwXvfx9cE0VnoRnzOad
oce2rhHlrOG8fmRgXPO9JeK/2vtS+GBvwWlhOk66PXTX6P3pjtOp0UX8aYfS
40M6yzPWtZ9La7jvvjMkAj62itcta7CnHE+eH1QS8RFyqlZl5ucBDDQqFBUj
3vYsN+6RSzyAVi1jgSbCL/zveDJtiwDMK8u0i+2p0PSEprHb9CClpUetyhbx
RkEjY+09Opfv/Nnvs5La8Nd4JDmQdIFkQYoiT+OpeCkuTl5Gfkf6TPLCQ7FA
7B62YNZvzvn6+fuvB/q/LeTvI3rl8Y/47u95ngmJ38J0QGyDrNruW1wFDYj/
099uShmwj6XG+eYWPb5SCCuC/GqMrGqoPk6L04Z0AqmKip8tGU841/x6/dHl
d7cULQ+Se62VZP3qvGmDZAXHy/o0gFbqwYmMNsLqhk2xdMyhOFAVJwveZlPb
M1amP4iULD+/3Hg511KPDT+us5rEQer+h/H/DF/93++OL3/KnK8Z8hbObg9g
ldg8PAe/h6vjzbgY+Vv/H/NsP+CPecbnEdruxR+Tln3NnEHC7CT8xPoOh++7
0JvadgfVY1fXqnapEhZUj+M0vZ5Y0Av9cGdbKMA+6ycXTiHer+i6z3RpJMBh
v4qrgsEAt7sg+U0qwM3PC5/tyQDovetrY4PwEJ8d/6Ud9wBkrhioGbkCuOqr
nlOyRHZTu+wsCdnD1vK2Aitkp+uBZcbsDYBCvUqF7xMKCFXq5SeHLKRseH7k
KSVABRQNvXUOKJy71YvVYIAtwUMQetYlOzA4YM6I8TJgBpgWZoo5/KF+BPGF
uB4ei1NQOxYhbfrb4NZv/e4//QAxKpIF+8Owr6/CjLcsW2sqrzHMt3iosY+5
Zq8xiVZ0I8P9wHVekGH3X/NifwYcFKsUw3kB0oeKak/ozkDRyN6GbAPk/2gc
bdImk3Dmy5zX3UaoPX6Ofnng0iFq3xupvDGNaBiIib7Vf0rssym2Gr1r7+md
5+UyvSCbkGoDPVwSjjml6b3wSS05H97Qa3XryiWx9sb8PbL82ns4dXaf7zvb
LzIk8/Akn8hq3tNfBz6p0q/fQZQmWPn3BGrCf9ofdhzfhTdjPL8c/33mo9F/
bU1c2OKvMzSDfzlK972V/dSfELYPfSyxSCwcfXowDowdfWbTy6HrEPM/tmN/
Jqt3jbOrsORoufl84X+4A7Uzd2GBOlRypnf7B99wAZ3Rz3WaCQAHRr1rcmMQ
Pq0zfyjgAfA0PTLwyfVPoJjadz71oBLt4atNp8K59GjnfN7u4+Y0KnuzRINV
iOnM6v/qcx/EbTAJbD5JBVuJWO0+vAx7iljTvO/2U/O7vk5gH7FP6KPzi5/8
NY/nXyfk7ysJE9lF5yL7aI5JYWewtTgVv4774ON0T5HXOoj3ks4tGWf1Zz+1
rerNtYLu2rXUFZTaNq1PVjA0FtA83WMMmhPaLeO9VBgYj2wO7wWwGr/YFNID
YDm+qmFzN+IHY+/rPrxHuHLsWnXWO2QXR+2qBjqI/v8nVVxoe3B04Gt8oW10
e0V0O8CHUekXush/vR19V2X1jvieePV9VFJGoUoDlY2jyyv5ibzTo8wvDrcR
eajFyodRmT5pVX0U/U534d1or3S0/e5wpjPiG8ojm5McngOs+TAcEf0YvTd1
mE91IIB6/qBzrCdAagc1aMsDdL9j1o8lUmdAnWKcZ1FK+M+pCtJLgKsfg/PO
Ijyl/7olwSMtceKWxHKB4P2bTP95Df9rhUQI+Wf8QU5OR/fKlchIDQ0Xl5AQ
Go2fX1Dw5MmZmYMHRUSkpYk4g54esX6RjIyBAZFXQVPzW74EYj4BET/Q0goM
JOZBSEqamBDHifWbrK2JeIKyMhG34OU9doy4DgfHunXEvIajRxUVdXSIfAwm
Jo6OiFdzHzhwCuH9r/dFAmBimoOEiD8wISHiD4T8nA+xZAmRMZq43po1mzYR
5/PxHTwIQERRNmxAdpj+2/fExTU1LSy+3TexntPevUJCJ08S8QcJCRUVIj6h
okKs0yQqeumSrS2NpqlJ5MmmUtXVPT2joycnFyFhYTl8+Ec9/V3WYTqBCWJ8
WApWiD3BArDdmAWmgIlh7fSMnjLmmN72Fo7swyEdnv20hCR/v93ORVTW1LgA
VtdXIJ3y3p/d9SXs9U+wIRuVQZ3PsOUyvTvA7SJifErdmfLhdooV36UDcP3x
iOeIPcC1kBoHksUELHCc0F2O+B+D/aSWuhZ6711JhjTE+xZ6N5kR6y9ddyIb
GF1EensEXnvtEP7xjbd6g96Lq8YNyr5SFKj33W4tq98N/ndb7SdNAfySfe9u
cAOoi+Bw5UR4x8jf1uaWwSrYGdLjeAgdP+zpZBaqpTNxca7eHCPGZ7P2Nx09
rROW+LeLE/2QpdgGbCtmhgljKpgO1o/54+0kZ3IH3ranXKpJRa18w9rWLR93
XaQ9sntQWP+eTJFyulpa2ctAtXdyL5HrOULxcP30QrN/amaf68Wya71StDi3
R/Xq4zPgb6MU9uzpMJTnrjNsQHx9tDugOaQFmanQsKx1iIdH2NKKniO7+9F5
W/nVAdQuHQZLSpA9LjVkftrVjNqjPmvKyyYAoYvcUZ5F/VTjC8cjGwoBmrav
l6hWXu1zh3F0gQRLLDeGseMepO4/AI2FyFsv/Qd//XeXW1g2Vv0P45j/TGLw
AZyR9Gqe/PrP/KqH+1V2a0bfM0x732XtbFvx6oM8zd5hpFimh0IduzlUxfUJ
oMTvS9P18S/AaLw2abIW4KLqvhhKOQCjYWL641cAnkZhqVUNAMf1vGLaUP0z
Gig/opUA2BlveNCDeAOHgaa/y0OAEePYe26JV2DAdmkIwxPUXrR5nJpuHSrP
l+DQ5jLdEkiyy45KTzr5aZuLVPZa5Odso5fGq9/b8aUjfzQ1z1dhhrxuaI3o
SlfZf0NV/hZC/0u+dwlkLcWwV5gq+Rz5AnnlP7X3QthJ7CzmQT4YnB24KWxu
06O+0q4jH85S2Prbe0iD01+CJhjGg6feQsGXgGl6CgU4By3elbybBp3hlZ1L
Ogto+lQK5Ql1DpWrxqiqv3beh29XdfinC1a34vV4K55NL4zvw7fifbjmgpAF
8xaGLjWvSnyxqoBz3GXTNu6z68wP/Ph+BZ6Ge+NRf5t+zH8m31Doz8exJAuT
R0iWs/oyN+zUva36xjvp1duq6KfXoOlZ46OD/uyUzy9pgQlOCId0q95tdDCg
FLyTvr3mqidt81th/yy7IDB5bxnBe2sGnrTdupNpS4POIZHQbheER6MljbpU
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
PS67hOxpuLt1XKkuwh12t4KtVGWGTntGVuch+yoQG/hYDtnPVTGHo1/aFoKo
Mp/zuNj40LETD0XfH+CUX8lx9NDSw5lyeXldJUK1J0Cs8V3bhf4puFEx32ZY
DRBlY/aQxnCkhesIuwjd7nTlN7QvGRQXKdD/f13zX8s6bAPGgO1bWP/uP/58
brCafeme0CN8qoqqkVcyDTwbL5gv1RB0/Dwfc+OykvRNgalHV08J2yvoNjJE
jIfdiBueoq1Pb/jchPB5Km3aiyyvGffUW49NsldNH6+2rdF+WUA+kWKbsiI9
/Mt80Fa/UkuOT89jNoStQXYr++nGPJ0H9HC+1q/ocCjApzDFi7bI/tVFrhbv
lgAwzaVSIvycbXKLVKI0wrMxepfEieefcc4SfGg/+mRVr3lTgJnOpuZqxP+F
GoIqeyIBzseIPqxE/aA3f3eajz86vngmk/reLIQU9Wdl3SfDszLh8pBnBrCj
dkndSPN2SCx++fRVZfR0aPNMC+trALcg52CnUMaXCYziK3lXrv6hUJMl6uzP
dwtzjpjNOwkaMiD8RM/wgi6eUXDLJZwZt8bDf70Hav9tuYyFY/sWOqoLLU7C
lykK0+20PM4qifDjKaYr7lrS5Dssr7g/nO8D2U1Cu132TcFxKoa1fgh/3l7r
tXsn4g9e/G5CgceRPRNJEPND/vGuGUn/4ZlwoH1k79wvdBZkHl+814j86PSO
8i2rV4RzE79FvB+WiRviZYht/9fX9vtmDcP18XxM6Z98j3XX705E/c2LMP1z
p/lfEImtjZvdl2vwWA2k1uyRYxoLfGdmd5Unm6w4dEtp235ZSrV00+6ljM42
xL4rMZt/ut9tODC5SnRNjoyJKs3OKbbDbw29IrhC9iB8n0rmt9ozS+loqBfb
g/R6/J3fdS7ENzRrL965gviH1ohyyzaEJ3jn60acbAEc63bd8UB6Dm+pOiO3
HaCklU84ayeAQ6WOyfCRWcTwpIYfaI/B3L2eW2EnnhT+/P1XVExUVnjMb67K
Aqv79t5uOdUh0kesBEum+owpYRcxW9IynArH8LuYNnYd08J8vj2TWPQniMM1
wI/h0vjWHxdKjW3YkbH54dYs1sm3qWXqrXZzklOsjXQDZZA39qaOsU8RtL4I
VZ3rAthQe7cooRzgDNlqVnMC4OOYy4jKO6I+QPuwLlo+HVv38d0Q4l2T/KOG
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
2S8zaXPI/s7lzImj/SX7JrqseigQ0b65Uu3ZxLxop0jN6vpMmNS+osqnXPNj
IpdmIXCsHo/E63G5H3hg1UJ7/WrzvLTfPn/JN/SS6iXVOyq7hUCc+f1lbCfY
aM+qtWW2WXQ+pah1Le8ffveULDxsMlo6lgqLxr7PS3S/jS4uRPbpTctLyQdc
ADatD1R4zgL4tscqWwogvXbyqCqj9byKDuk1fADO3LvWR64EeO9fdZqPA+HW
wdfP/ZC/Veh8PXLkM8Ktb2Pf5qJl8iPhBwMI3ywKG3m0OArhmS+3x46gfnW/
I6rrCsKjxnW3GmUbkT9t8W6XQPZ3xwjv5zh0XHvb4tf9nYhn1Gu+NGoi6gyQ
P9d9BSjukepPH+ye7/nA/rUfnSfyhNbJJyeldX7e7yNSLCmBlPJDQb+Onv5Z
+d7PaDBq/A3mgE3j3/PRX8a0mfZtcKcL2h0YoH3T4aIbWagsLYZXHeBmqv+D
K7IKcD3NKnQ54m3rcq4lXNFCPIJCO5OLxuHj5vV150MBnnhr3pa5DFAa2Rvc
oADgk4zFqSNcGholFUqrCLDFS+l2JsKFKc9G8/PNiZ5RN10QBIAn+YWdlkL6
eHQ5UO4a8pUJJyOFlZGeXT7Z1iL8OK06ePkF6idVmsVSY2cAovWWqTCcmYbr
t65ZyYqEkueyOxMvyqH+wMnEnrvutOT3u5TDlpB68Ans2o+6JX++/CFd3z4C
2NVNs0z+m5Po34isOn9NhFqaRpb5as21eh/us0d5E8/mZiXInr9irsDbc0FD
V95PH4DGgEnD0HKaIq9foF5kQQGnG1Zq0YgnsBjqqUohfpGt/UGeC+FDEV1M
oV0Q2b0X/oXTCJdjDyedemQBVnrKCF64ABDQZG4rgPgBbevem1RWCFc+E70O
2gjnl/io7dQAoPIOOVGJxm26/3YjV6RvnvrqYg3UXwZSDt9PRP1goxunRfd5
gFc3dqomSBP5TXjVXdB51pp+1qxH+sd0Hyk9NQCY05iTU9YBGFLxvfYSnX+x
/NMrI6jf7JN0FO1C1xN7ufli0bUSsuaFsLP2EgC8PCe4rhyzrnrAmcQhwlEh
sG3TYqazTP47/7b1/jzxZb+VddhSjB5bjHRvjPlgmxZwJeMF/p397DY6mwpc
1HbbLIedsSGmDxwlKRXlL6vONuSA9rMVT+ueIb0+dVE8gtqXoa9Ney+R/663
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
0BUTo4HzNU5jQ4nVlKzrgSbM0g+BvK13gwjrmP20R4YLWABq53Px9r98/+rO
w8TTy+9vbOR82P4iag8ibo8cVwYXTEkoaUrbaljBB6ky4bnyH0BJxVTGRzsZ
+CTlztHJ8UOziCDfV7FdtBahIB4QOwMvblfevIj42vvgOQHXi8dBzvHUpQ0E
/jQ+rM5kBlBkFaW34woqbytHvWhbxMsN0pX7LQA+330dNccGYAsYDTcEAZi6
Dlm/QPrI0T2v2GKC+Lm1kP5RxAulLaR1fNF9CrZ7DJlQveE009A0sQSw0ffQ
kLoKYB9I81W+j1LXYof1oQj/23lfnPT4BlxmktqPrRFP5ec+7SJgC0ZCBjx8
52iU1vNP+OXFBqjPpOKEm+Tu0wYFHbiXidiBF3/66WahTzClskJORJef9t5a
wuSzy2dqkxyd9EutsIFP7Ox7ddk/r/rjkv33ykzcd3qcoDiP8RqsGqvBrmK1
rA9Zo1nDuF7dHUp6l2zQMjM/7NGe9KIMna04d/ZME7e68/nvT9nL0Lh5AUvy
iivbeXdeXvZl1ePj00//o/2R5/9uA3BYcX6+yoK8PY/mMNFZ0Hn/LrDN4ObH
m7awie1hd7Z27Lh2p5BlvGhKEb3fuq9+36wQHtbYbbbHib1UYub+faSTJAGS
Enkm1/8pMr0O+Wd+WHF+HLAVOCcmiO3HDpBC17BtlGbVYJhrIR58TNkj9+ad
Tc/2It7s5XWtvNvMlzqkvs+zTLT/LTudJd128noGVmwbQvdLZ5/HwmyyWIzp
5tzudU2bA1jtl/729x9jFCwV8/9dgbque74rb72S8XIFHetkeRlqqIK2bbpC
4pTXhm87TDZoyM/cx+O40anJ8d2t6dr1Higdme/L33NRNrx51zHc/Yza8fpb
z+KeRnhtMN/7s/ye5yVYD74csyRvwVgwfmwPdg7TxjiwkH96uf6rhPwDV/5W
DpCY0big8XfmF7Kxi/soy5uWZ3IW+nLzufG15Q+X3FfZr4LwR525qaOWO23p
kK5bqPkweHY+tJQxBJj3XtfwAOL37NWN6lXovtPNXFdU9FE/PVjkLo/6T933
56zrjQBepJ++ECYL4JwUJ//iAkB7ynyFADmAgVQGhSmUrsu6pLQNNSyZfCnV
YGWAkUbQ2aAN4P3qoN4TXQC6ciUVS+UvEJu8Vy5b9h2oRbBInpTgpdkG55w3
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
K8z1gqNYYWnGmuCrPscfXGwMqxBahJDa2o0L5yYjdC4txVc1uAzL7fEeA7T4
0wlH3EsDz6Gv8fru0YFFSDLB070j4CH1ZGK9x7HALEp6hIB9gY8jeUsy2dfZ
34n6YNmtTEMsx11eW1vMmIQQy+LCTIaQiDe+/oOeO0yGVm322GDNZPz82qqM
hYFSvirUvgUCwUv9zlAiSi/Gp2F+aWAlz4KXcWT0YpNSwdtUhAZXpiy8F7sD
Pa82LKlfwEBN2NSYz4zlvUcKJEmD6Rr0Cf4IjINO8NPYAPtpm+MPA80anBPP
AK1wKzGZdIBOWKhmT6PPZovWdC+x6REbQujgoqcnzg1sH05MVt9deAIhhvwp
RyL6vqKMxVfPJrxAKC/3/eGmPkwP0yP33bqA0KWsx8fePBpCQWFqux5fQqjG
n3Gr7anlaIFv/Cbd7trhvNBb9WuvIWTkql/usnfT+4Ps6fxlwjfpjj5agSJM
hr+VI/+cdO+/DS34EM4m9tDp7lOhmzJsyj0BA7nzTyk9x3J+0dJzjK86yIUJ
CQ0nzyE0N/1Dq/LVYTRYvPZS53uElPJjTuvh9j+dYn3g2j2ENvixVsudo6Lt
9luK++sQsvKNW6vSMZ2skxFy9OnTToRmJFhMcX22cvRpzGAvbCN0ScvGnv/z
7v/7b4E0Fi9wHI7ACTiDih/efwv2wGcwiugDd3DygYWYmy3EY2kb3Ap3wEAS
HxDA6ft5hg3MxNK1Ch5hN8AV0AvswGKwCJQDDpgFFuD8mvAKuAB6QA4wHvGn
yza2jj5uP/vNrTYz4MP0JBioQlk4F97AUg4ZMMBQIDGSBMBb8Ax8AmKEM2FM
BBO5pA1gNdgMuuj51YEyfo9ff9+TBlAF2n9j/hjl38RAFbGIOEG8pxO0UA9B
lxzf2Cbe0y1HiasIZXf0tnIfzv8s+9iiXxWPryf1N+p0G67dHb3bFfQYDhmq
GO31LhD2Eg4RTpY/xvSKSY3Zm4f5mNwJ3tPen5N62m+m3EaIf3ALZQGFGdnt
5m5o23MfLT+Uf2T9kZdD4/7VO4wkjecYf1unPEdcwyn1n14P+jUAgQbRDzXg
PhLzWBwcxZlC8sUiQkFLTjfVcUYhVHXgec3WyCayZqywT4f5E2SVwhBkbouQ
XtqToM82QSiw8GbMdQc58ufVlzJqnRG67pRpVK/EfWgD8RwmwDqR8Sc14jMC
HmawIVQIAdhIkiRYCAq4THIinkEe2EkXsIOZmBjJpH0ybXE7PVK1d50rXb0v
LRXLi0PpZUFmVveGtyfe9a+wzkazUvoCV+L3qPWeaTfHYBANxBb7XLdAaHvu
1chP9s/Q8rw1UV/sj5PNc45F2NlTkexkNd4XnEv8J42MTwgE4AvQCXaQftU4
gEsYFzJGMl77pwNY3OLYylHAvpDl8+I3hYaVdo8OnLM7Rb1LQXzRDoFCCb7U
KynF4TkLMR+SmZh4p3g72WbR6qyo1Qj5eVFc5gbvvrJTTVJJVj22k9Ot3prR
A/Px883NPzmKUu1s+Y2J+QidcN5hMdPNH2U5hpnbuUxCH42+6h4xW/4xOHCf
p0DkqfcWmc4J00rweM4lMlD5NvLlPPH02HIqkoti8IvF/C1D4DOX4ODdSCG1
N3x25lREDt/vnYLlBhmFCllW+Sn/x/rNrwlxMAPoYHrviOeXdiAPV0EPmAv3
MFbKXZ9n5/HhTJN8u/WDaP6PnFxFUxwUGUpDiedMO1mbeRL1i62LfX1vbUxc
mVido031nzHD7kIcQpI8jNIJs8vbxsu3Bh9BLJ6WmPHYZsJz1R+FSDybSsC8
3+jPGxiSOVzn966UWPx4eSKqv736wNM2hIQUXVQ59cTG/ETlcdHvVmrW6bLg
jFumqKfrbetSTzNM8QENQuO/q+I5NxFs/WkH5mygj+ezcf+Y2+j1EG9lHpyo
q7Mqc4PIlZQMhLRXzzvtn7qSLLPK4LR66lt0IH/z3jthjyhdC913hmM5UErq
ycz9U9TtSCORWZnBQshAKMM5/7RdgS6wx3NsOU43QDFAmN/Ih+yQk8HRG+RL
O2qeX7jAdU9g9EWqi8+enP3uS4Y3O1yNu+qkMxzhPzWtMAChlFcRrza+FybP
vR55+/UVPA4jfBatdmNqamUSYDVj4GGSBWrAGxPKs7jsLYDnp22Xv4fzmBcL
xNR//NydZ9YkgUm7hDJMHotHiL8JvKXsIPRIUNjbRrZeIFBgr9MnVQtRbtFb
gdN8V6hNUmPbsWH3fndDt9ODa25WRJ2MQGhmp40nL6aDF24vinEMb6A4DYSn
McZYkXkfrk0ziJYnaz8uXrAkRprM0v821Szag9z9wDTJOGofefC6WKRlKEJN
1dkuwXje/LjL3kvfEyGd3bpeUvgo06Tms8AbIZ66SvfPbpj+Nup4lXvoUyrP
84ecC2RAIn3cETFhhVTfvo/hTmEnyTlPh2L4ohHieloZewDTy46beRH94Qgt
OPzEP9YPoZct533WeVPR6fM9Yd34uS5V5PmVds+fr9K8LrNd5qi00Qg/Gox5
XTfgAgZ++vbt4rDg8GVj4hB15nchuwxZk2oUK6fG2F+cPCR62yoYIVPK3Tvi
sTSOLm3AMLVgqH3g/PHqEIQubmpYtMe07QGrUYHuoOzWiKms3axL2RMEOkEd
7t/XQC3YClZimukHHIASMMVjKQIfH2OOnxVWgBtwVDOwbQIjyCnSIRIisl9Q
KVsgbpPulK51008pHp0ZjcnaKs5K6bxPFoKL+U6x7533o+/ZBbfDXVDuu3XN
SWPHn745/nCMcmnf9BD1uF1swXG4iqiGF8BRej1ZzD8mzsZZENPRvy3hgqYI
de1J74DSmS8pzsvS5gRJf6VcXbva8IPCU7Qz97NhnLRgT4WdmuU96Yro+TJv
pifxZBnb85N5nrNk8H///NV4NhIHRya08z5giem+Ab1BKCKQzZnlruFsz3nS
GdMM96gvPqNTOxMh++M+lptkEFp73Tp8yLwFiRyzzDgURBmceuizXaMqQqy7
tm7LbMR8kN9Gr3r/yg22IA33uUsMbtAE+sLdUA7IAFkQ8x+o2f8MrMEszMdw
wKtwJVwN1YAilno5wAl2/71fl2xYQf2M0LPzH68hZPfObIfvHnx26+kq3UqE
GA8z5wUvQsh4u1oMZ7zRp7k6L6U9ZBoKX3Ot5HjBVai9woxnTsO8yZk2GfsD
nkc7HD65OjXtRcGxR7Z1XEXDK9997t57aRnz5n6qTduuCnL1NMS7X3Sl8I6T
1Jvbggv9Vx18J1PyIGbqwqtXbgdcsVvgvmeHgsY7+Q/Kc4LPM/SSzBgyZ7zL
sLWvdSi7OeVcV/GMJQhd26edzpq5dOj86RmFJSVfqEVVGyO4Y/g+dTLeIX0g
5YsVADNgjr+uEoRhHqjlTz8wv9dD6OoqKsrJZWZevZqVRfNndPo0za4AoZaW
UfuH5maaPQSF0teXk0Pj52n6CE/Pz59p0SRYWWVlx+0JRv9lYODm5uHh45sx
gx9j8mRdXZqW4f+Ks0DLRcPo8e/7RbKwUFdXVk5IqK8PD/f2uXZt8WInJzu7
K1dmz5aTk5UtKgKARGJg4KHbn43qHH5ee4dl0ALOgFwkDSAHpIAkeCw1WWyL
6BVn1c0eBUvTMN+wk7mMKRch9zUfF7YknhjmKyqNtotwG25JS/NtDN5CTk5Y
7E4EvicXJ+Z7CAXdpXxMPO/xIuglOpDyySsDz49laYk+s8OwHJHB6kfG/EN+
QrObVBCeT31CzZoc19xMmR2loKdemY4YuQgWpi90f2SK4s4incJ7A7jLDZKT
sBxyPHN1CPTfRDEqeBW5PtQe3VhSkliN+ZKwssHE/dFf0KPCB9HvQjrI6nnS
EXOCGtB5o1LNtWoc28fLmwcnwa+ggpAEQjiJ/O3K+BPjBJgL02AcMQ1ogbmY
utqxtfBqTz6pEhQT0FR9SZd8Jr/j3Iw3CKku3NypeHv/8MeExN2Rp3qoG5O3
N1tejETGCRuaei/sR7GJ6W2LbwYhSqj/LsNLjtS5/gJVTSfcyAcCjla/PmOB
KkOH62WvI3TbYihdYw1z3zJ2XX4u4Sq6nH0OOGHOhIc+/kkj65w/ix+WPx88
QQFYj+eVPHAdfMb9Ppz0heEro63YzJiDO7qPDHxZUwqv5n3so3zOvX+8Y2Ab
5WB8/O78U1jOjHffo3h2EM2Ob226cRWhfd7r1h86REEX7BYtiqpByNIlu6yt
QQO9jG5ouNsTTn4Rybrn4kVMJ9jceTcL1GuNP38n4IWmcPNPS/9+Foyu839b
lw/E3FsgeAgOww54FgaQQqE/jIEBhCJQwNyC7NhdjPT9CgojiTRC3YT+dOvK
vx5q4Fa4B74kVMFMoAacQYjUIclTUusdvp6w63585uGg2HWlK+43EZp3PuhM
zuWX70Nl78iEyH20zAEZWEZ0nlDeSrAKyxABk7o7F3WhQ1q3dR/CgaBH/cjl
neWngx/kqYqXha4uuUJBzo0FzeHNz4ZrKNMo0yl+5Micpbl8uf7bRuM8CIJu
0jXSJVIqaTRK4wQx5RcHM7hPLCJyYOOYX3YNsNFO3GSyQs+Ku9c/tLfE3EQH
i0NTW+aLkENimbyhFUL9iQkBhda91PsL94cJ2XNQQ8rJyYFOCOnoU1QPikuN
+QlUpG9YJuBlUAEmk749kWZnzz6yi5H5N/NYBTSGF0Hud+tubZychvc1rKWp
9WlZG8IS7RC6l9QesMD2PaU34Y3fZmtfam+cqm8Efi8Y4OfoYfgJBWe/juC0
pyKLzNIwDztWsm/W5vCvDv2IUXm7TIpY6ZiDfTZwBoZDUfjwF/UrWf0dwWoY
O1LHrn8gbQZFoA7PXjthBWyDRQzD4AN4B+7BVsnpkiskC8U5VwuUi+0y+jql
7krV+30UFBa60uN2eDDKywAxK7PWkAcWiMTl5CP0KoQlIDzW8n6chozGRfWB
yUfUh2eaqaVLBQYaeZVHKg57R0QEPEsupZZaNxta26xCac77LexdOshfHMQs
aH6PztmetqqwH0pfPXenwbO5z6V7QjkDlGNNrpZnSaXcLkMoM5eUIb48nNyR
czzVvzQUnQ686poUjFBSzCb/HQn5ZL24mYFBSTeRlpOGfadTc+AZZirzduat
4Do8DE/DzwwccAgwQwfiE3gAPoKAsfbsHzvOIV0H7aAHlI7Vy+Sfyl8MzXtO
K5gMU6Ad/b1mCpwR2yzX6Y8kko2X4Hrw5vwy1Vd5xuabQvEzW8xCHkdPs5iX
4L/0fbZQk4F2AEJqAo/nKUecHBSRbXDNL8T8vcAnuZ26Q/S4lzbgLQiFu+Ak
ms8jYPlvvzPDyKidCebjWrWFZYQbmIKTIzjL7S0bpjevk6o000IkJJc61aHR
PT8s/0u8VI9pOJZrdgi+UT5msuqclrCL1AGVgpw4kx3+Dxe8eGZivjfcrzjq
y3K5YYNs177u0accYygC/NAHroG0fZV8mCP7WdAAdoN6MAf3NUY4ANrphONe
CkN6cdrsOK/UD5tW+JcMFxaF7POIPk7mXT50tCuRGyVnr90jGWhGLUu32U74
xZIfJV/cHOq9jqzBpcp/lm0+PRBNDxCDNUD0X2ZIIiAZGkI5en86J605K2D6
Bk/f/MB6sQUI3YyIWMQagVCGy/x4Jz+ElAosl4SuQsjxnsSjiFu4PyUklVb6
72jWElOTkRZuY95CGBLWhC5wgEvhdJhO/95Rr0//tPrzp8G/qndW47dm02Lb
qzLNP1CjRV15W0nxGvOFZm5vNzWYeuxwR8jrlEbwKiyv1531CynD43fZ2aKQ
pfi4ontPoEkgQsvbP/tW+WJ5vvy1tYX1oaHVNjvlxeSTNwlLn+Qr41Ox2KYY
JMgkaGVvF/hSo0UjfIds3UwPHVxuQWucnwrORzk6N7DQHyHl3sKI9WEI7Xyg
ExMQhZB940KX607qz1q9rWZWqoD1ju7ZKueUP6x+s5zV+oRl960PVTlOSo7t
rzP0906XmD6UMur57dDYAm8OUMa8jiBI+COr+D+CrSR90iDxZZJe2ZKyi8WX
DjzuSbuZeQt81T/KdCh7N0It96b08jQhlHwl8JjCEoSCL3o03nFG6HFslm+e
5t0jawVa+ZawrRT8vlxLYD4S+X0iiBHN4CgYgR1IAlvBMfASSxnisJI0AKbD
KNIr1ubSnpwCJ7XTCNU/P5yM0KVHDKe6gsMGTY5Qah3dQ6l56zJzSAYIrSwV
SYsyHjje6XLSeljafmxfdRR9Ha0Kc632IPVXY0j+Yxi1AGEGr2ADcAXCpCKw
DPiCe2Ce4hM2V1Kru8A5dr9tmgjFPmRI6NO8PJz1sMWfXVmB4vv8ou0XsU3k
4IfNjs9l5lBDIkuVP09p3Puj5/DCDyALkzV5yAfXTthoxDKyO4f4Db3IAOpY
rrw6oZwKTQYJFbGrFgy5sSrLhD9ejNjGG+/uy0BueP51cDIFIdtNj7OPpJo9
rzSNn311zsE07fKFS88vt20LlpGWfiblrjleTiEsgsVwxi8jmE7D1EMYaILE
kf14O/EZzW95BzRV0hM7Oi3E6mGgj5GWWV4xEfPBqt3u47pVXt5z1xlJlnMo
bZvaK6YWIkmaRywgeCb4J/7bCOU4xrKAKY75sbgP1yCbK4eKciKfB9cMnmaV
K1y72KU4G2Y0YqnmMAwZC0w09YfjyUxwGvdb7tdzvRqb0s5l9g9zfPau79+L
UN/zBQ1L968cLHl7brdgywtqmcWQmrumddx4PkkiHS6B7SSa1yyhXzBexz+L
UY3BNz2EsrKExPTpPj6rV/v4ODhcurRvX3Q0Te8waveA0OYtgYGurrduiYvT
7BBMTMbz/aP+jL7d980O4cf2CBP9JI3n+O09NI3Fb8v7voSfWe8wju2gAGRi
HpENiOIxdxtM4VRkC2FlFpFy+DRXd97FtSCy2Xm1R/nDyoTN7vswn3A7Rc/7
BOa/lVOivDowH3Ik5anXJnx+NcnbUxOf28adcC3F92kF99ned418s83pwLxZ
FvNOc+kbzczQdC3dJW4mfFr0qknHJMS0n0l4wsJzFsmEtJ94T5+/TipvkvaX
ak6uSo8LjPJRHL68eFLc3IgHZNm8VyFv/RIpH/KWhtUGdKDbheci9gWZD+eu
dEhPS0BoltVHw0dGLos7CXbSbJITwQKvgpNAgTQbaAMdMCHM+58Yv99v0ARk
oBeUp/dLXdGqGfZa0/2EAjZsizjW/HUo+eyxrU8RGkiidK3vR0ghrqdN9zZC
6TH6+5Nv5VEFIowbQ64jtCHs1a4N1xByC71Y34ePOp7vVzN3EtRApSJzVQ+p
dR9AG3gCXtAXuC4BL9gI+X6jd2AasRgef8e/8J+FM+Qk/IlV9HZnlnyscUq3
PaEoX+HMkRcIkXOZT3e+RGh12usD3X1Xh3n9Dq3POJBPcbdbXfB4WxF18Xzf
RSd2ZFC/uHCsqG8lKPZBddvczlUN+cZdbL3Sh1CrsqhNtZfvmvHyCbgHTiIC
xp4nPHb1r3b+C/9boLE5zPAm/ZwkVyx7Qo5f9al5r1moJU/IU8lWiSFJTpnx
33NBNsgHX0AYiAERQJdIIZWRikhBdLppstmxKnaLcGf/02cvOF+oUt48ODmQ
NNA7ZNa/7XHjAKCeuRl4h3LbcnDc/kHKvtXewr4wdTy/AEmMJEKqHFuf/2Z3
86uDZcRPuCm4T6wj0qANndAIZEXHTjaM66o47tTQGUZGAWFVriHGzpSmJGrA
PJsdlIcLLoRNsb+FBLOFwx1tEOJQEpQsF+paMJ5/GO6DUtAGFIJQYIG59PHr
o/59vzefhSN2Q6TfXL8KakECWDmBDyySvyY+Q5Qjjydmk9ciC4TqMh6Ekufj
YxJrwDvrXWT/GD2vEDOESqM1vR6aDSGT3EORifY9ZNGF5uF1Dgh5G4pociq8
3Tde3keQQ9tHQswcaVe1P6pa/+PoAM20ffK4dv1AEOgEn8En8B7441qrwbyp
GLAcSd/mjcvgNHj2m318Rka75901atVN37xq3ZxWhK5l2Cb65Imi/LjtAUmJ
3uSqZMOw9ekIFQYv8tGP2Ngr68DrUODwRWo8/xdhU5FsYVGY5RvuxRR6oqMh
tjT0zIKP1AfWfEZWtmeGCu2dLDQcYyh9VgWmtjbrn4ppRKq7aNyi+zsO13fX
p+p94Uhyvmkf7BG1bVdCTNi+DISsM/fEnVnkTk1Mz4/amvOCssOvzIkSYELO
T/YNa077iC7b6lmdt3NdcZZrHvcJLj4QD7xBEmgjdYKDuBYm2ofJAzn8JzgS
w2wSUMBSsSH++3nWS0ct5Sbj/u4Kr0A/EmnMfm7RNEGVx/r5u/Mlrc03hCP0
RNRKf5+3N+XRFAGDMJ9blF1TqAbmvp0oRnylqSr+PU+BwYU7ByFV4ZCZ280T
988nfIki0gURXuAOioEEVAC6+H8/9iPyz2JU7y8IbDC/yg0PEWBkNww78ORs
EqyX4Cu8JhJqYO2HUDdPwpxkb4Rqp78xehl0cgio6bgtx+3cq7zMTiEaoSmS
X3QvOmU92aD01MTY+2D/UquqeItVmD9mOcz9RUiHbqefCa6BmTDop9ETboLN
8BhcQQA4BbYCTWAdlhNuFbM8+Eblij2c2zSGHAprty5N2Tjct05i16EN3ehg
Yt/WDNc3yDmFfVUw/m6WwtXNcVEI7Q4gFi2wMewNhzshN5zCbIpHtA6uUys8
luf8xu/7P4rxfRWTwRTACwxwrd0ET0EGvcKcNF/r6GsK+9TkPy8NKbl367Ba
6Vx5rasrKjKuZM5YlP/03oJVJZ9DdLZRJl+ZZs/pQh8ohwATLAAd31X8r2uP
OWnEyu9bPLFdwBk4gQHwioiEIbCVpEdIQTG4kvQAVycZeJKmE9PhVFhMCiYM
oA68OWFeKmSxZdRjBKIR01V4r/Jw2zrODZBcLjEtjWwtrFAiX1YWZrlPblAW
lK0xuC/hJuGdWj1zu4i+yHI/I9aTjBsYO/+uYE2WGeJv579oIJB20UDX4N0h
0y3sjsftl754Uck+f60t9cFqhyF5D/nG5TWkuYQ+8XTCuvo8QhsawJZJSpOi
GPwYTCf8fh/PJ424Bn4V3GdwY5jM0Ma6RatfS3XWchl5zUpNay322R8aXJrS
GzZdnrx/VWfq8baTNWm8sW9ctnf7hl10i1WrLq9ml2ELZiboDd8K3SEFJDF4
gUCQDFbQy2ccSX9/f18tEUrYw4P0/rBntrlGjUjj3NKPPLeEEmicpHC/Rjzt
6DDgnojQ7QNM9WEpCK1Y35B7zAih+EOs9aWYDixeYbxyTfn5E9KmSSaSxhZ0
R63iUAL3u8+YsrIDtv+B9c3/GwRQJd0iOohv8WZWx2v593um1Hy4VH6svQsh
u6N5hjMlcX0+MbPsm4bQqt3vAksc3Yf2NqsEOWI+scK9V2IBt/LmJ+Ac8AJL
SZ9IboQlHGYkwUdgIQiGekALTAUiI9SBGPN6NdHuhBjTQXyTA84CR2AC1hCh
mOuSBdvp/eEM+ylmScZqEiFYO6mJ9Eh+sWqgykflCvNOP8OgOcHhExwsXWIX
Y5dgdx77PmbgAwJwYvv+tj89euAsOA+mE4fBBtAE8ogNBD/hRDSRSggWYh5h
/S8zAINEGLGPuEKIEZ3wAywg8RO5cAscovenDdJWwoqi86zBlq64wylqt+2f
cu1t6UBIgVzXEXwM8yuJh51uuRkUiTDMYORiJAF+2Am6wQVSDojD8srP4x/y
P41vcSG+gaaX4OHhxlBVFRISEODn19cfjRvBxvbtnm///j7vN3uIb/qNP87v
0fd6k799/ef1s/QjiIO5YBaY6F78DWcRx0pOA07TyQu41/E+08qWmTP18nR1
tx2GOVomOm5BzxTVJLKkpTwrxTOFo6fIWD7m28/pzf1RrWmSJKMk0/YJ/MHf
xnISTQ+yBJTA/UQncZJwIm0CeSANS/w6AXlB8SFFScNtRItxO0LTS3IS1oYh
tLartWVRI573WkgNBXvPIb6Ny5aSlmP5oMArQTa+k+qdfSEjOl/49AXW5awr
WK+MxacyAS2gHtMB8h9Yc78Gxj2Zj4ILy/C+sBo60cddO4ccjxi/rNpyvbsB
Csnauxo9Dq1Sad7/bGeg/za+Ew8peoHq1btPICTqdXONTQdBUbI+knlnQ+1d
jZn7bSz8JFbNZPflvTk5e4Jf7HosM4bB9fTnjOodxvn9X26Y/HIYbffxeg4D
n0E5fAQN6e3hLVU228U4JFrbR2nd+g6p96VBVTXLLiF0JrhlJ8t1hGYH2dc6
XEHoSaBybTQ+KgZ+2vERH5cE3thufh4hPzUOx3tBL/aMllbLBOA+yE28hbJA
F49e0l8N/Bf+AsZt0Av6ge4Px8NszKcawpP0381G7GL5wD1igHhE5JGYR/bf
TAeKZk/MdpstCX/+tveD9weE7vWLPHn9GNERP8D/9MsThF5u76mZWlNw+SLj
PsZ2xgKut+ADeA944XqwHqwDYn+6cakNVME08Pq7qz2slZuvlsU4ONy/v7os
r9PRgzovosvttVnMUPSCijAbB4R8ws+7hhm9+GosunTyS+7VbuM5X8AqOB12
EjIjcfTY6fU1KrH9/fUq0sid3/QQJkCT5mcedsOFkAN+i3/Sw5vC5c8+xX6q
1xqbTL3spxvypkXp2SNUmD8zYo+lCJkn9pCHl+ELqlSaaiCP1WXK+zzOmH1O
CJFMN89+MUPvit9IKVOhJYyAQpAWeYT23MX/cj3+7GCAX4EK9KTz39NkOqT8
FVvtlSr8y/xruFBG9JSgqPjarxvST0SEZiIU5bvG2SfgYG+mjIf0Splrwr8v
TZypgDmHOZaZHXRYPjd/YtNjfsL7k0sc5i8p9tJm+c4dg8I27UaJtghlmR0z
SjLh+86BwO0JCoAhu+eWCfPFM8uC3rpmhiKkvfB89O1chCyjKn0L4xQGc4LD
3WzC2ZCSt51Lts+qA+P5WHCfYgU7IR9kg5xw9h9dbf+fQIBicB/IwFpidAVZ
Dszlfi+kO22z5RHR61on5vO8LRc9r5vliVDFVPF5FH+EOqdaG9L89vhNydSx
dD/46S6Hw+RF4uIp35fMAaYARVDz3dU/joxxY66UFUvejHi8K4MVYzt2vUEs
y062HdyZFgICW2TNdKgtx+V4bBriMP+jLuTKn47Qc73tgQcXIVRvbhtrU4H5
I4ekNPdKhNptPyWXrMf0mNNQ2F3qDn0jdhWmwTkQ/TT6hxiwDKzFc40yrAR1
oJuBXYlJ+a6qy+zeearmr412OJV07z77AvN7VcX+O47kL0YN6TZVbgEI2S2V
2ySwHr6GxjpeC7X4V64RoEy5zD1M9zdcDDpBNPjX11e+x6jVujTYCWrxH33b
JtgvOSihKZMsN34uNzVfjMy/W6GaQ5DzOddl+j42bVgMReAG+vuM7kP+37G7
Hv1wYkQ7ThrR1dOOgkAccwRrgSzBQQhCfhj5b++XPAbfgZfAndgNBzC/w0jq
G9F76JAa4X3QB3ZPKN+TeZh0icSnMnoWLPT97zeIGBgOl5CWEk5wPiyZsO5C
IlghEzxCRINZQAuw/Gae/m2cgf/+OPtHkcxixeI6SZlZQdJCkiTJOcE/+PfQ
h8J45Bb8pl/T/vuP9+vv16VNoAKsxnzK+Hmnw0PLUDnxgNQDgTskXIp3c260
WGrktPjMlQHFp1/us5PPP1S/P3gGIYa44CjNQLEDgnvcmlr2Wbd/XZuwDq26
e/Io8z7ma8xSnOEgAgQBN1Aykvr/4ff7syELZIIFgGblyArZoRJwZGRjhIxa
PKfbzxw626XQy7X0UfbrdI2z2snDSg6CsWc0isvUbgnFXvK52Hc0/RRC6jnP
Ek+nnb9YxhKO20hCiBdGwsewCB4FPmAOCP+XOzoxpu8dtedlAPZ4vhXFc+Fz
YAVmg11/ly44MAySqKRe0hQssygBlZ9+3/Xfw7j+m2lEgzO+gsIL7kEXGAJf
EwmkACKXuEdKIQUReUQwSYekQ7gSe0lfoBP0gzWk8pH9NFfhqBwwbUweYBwp
h2YnygXYMU9jA0yBBm43EmzDo2IdOA8HQTe4BQwICfgEQGhBUMF5MAB0iExc
XhQogxIjrbJspDwS/h/jmAfncbDCVtABjL+rf0e2g5J2gnVCs4PazA7M/KC+
u2QmyxMmc+Zv/iF98VvoAflfh1D+wfjRuv73+LniN4/rGX49fcM4GEZ677dp
zhkYA33c40dx4g+q5wjwAo+KS2AjqQNsB43gA1GCryWDHmAOtHG/ZwSj/iBE
QQbMxJziJfxGk3CyBXU2n637bZbPNzQ7YPbIMsRER3O3upZ6iHvh+eELHJe5
rq2/1Xrjy4MpFK+dvHUHmrc805I4JR4v6W6+kIef24U7itGaYIcE5lwkgBfw
BIZ/zOf8gviR30VB2AG5iOAJ7RzBcJm0iaGSd4hVnvsN35sZRuyRfFpCvIYt
zKGsw+xcilNI2fActJmwECMHP8AowpeYhSlaClD5DV9E03787/D7Pxe+tbsY
kMRJGtwA5jAXj7Tx6+ZsnLwk/v3ixySn6py1MC1omcsbNaVY/WSduUL62nXT
HsebzEh6tuJW/4pZfV5Xk+wPhgh9leVWXer7/ZOmYOldG4/rb0+GI23/F/7C
/xJ+H8eLeSzOpwieB5+AD0CXyCFSiWVEJ6kALsCjcAByA1ripMcDGafX00bi
nqWDSZATcsG5Y+PVjPTMZYnrRteDRbf2lDQaN+r2mRx821Xa5XKdIaovKjvq
zrJOEAeygTfd/qwabMN/ir8sn/L3UAISgSW4PPZ9k8BKxvMMz4gP4u2bYooM
nBDamT81+sZ8hPwXdIbxOSCk7SFg/V6H+9ECtmyWj8wz6IyBNNEODaDw2MJF
PL380db45/ebw+/izY7uRksDldAfcsBzdML4gZhNTCMUpeUsGXQ1lHI7lRbX
xDywQihrSXHcoDVCigmSXgHzGoY+5btG8truQTHOO02FNGN6R3OLMKjCV2Ar
fg4vTpxg5z/9nr8KmOBnIANj6fVWoWI5I0FtvuOGdIm4gEKEPNP2RxxagFCw
/SqLmU79d8r1nHVe6MlL/L6UNNJ54ihxmhgPRxUJ76qsUYlWMSR9dXhuy+04
rcPOtEtX1xwhb7Ntc6+bwn0KGjpqfWo+Y/zOLKIT1sH9WNbjIViIycT8sX5n
TuejgjQG1FrVrUwP+Vi6PvVz7FOPbvTlj0eIfeHW6OIchGJdl9iGuJXfqhAK
Eroi+M0e9Sm4C+4DuhnhLwumEc9G4fRza8blDBFMGaL2bEU8miLXvOK4rIXX
SK8oHOA8LMIht3KBOhOFsXfSProd2DTwADjCHiAHVLGMUP67dWPSHx5H6m+R
xRhQA5ZPuCrOlys6VU4qtVOyRS/OdVHn0hlSZjP8E2/c0NP0epNR+9rbrC2y
v0yM+kpOTl/O2e7ybaYvhABjlIgA5obXgx1YutIBLiD6p6HDo3IXE5AhpAhN
opzeD1NC9kWciNm3aH5BU+mRFZprKoQEJDp5HqmUGVVbHjEi4iQsj9pmO9ye
wP8p4++Tw5Ld7/Gvi5GjeoJvbpG5wFQsG5qBveAxaAAC3xVsPYHRbAFfQD44
/N3VX9fe4Y/CuD6CGOPPeXGtsuLWqx+Rk4vhangL9II5pBRM26xgLymJsIWW
sHnkaAH3krIIRyxVXyHxEKJQCNaSDoJQEAymEuPljJbPOFY+E5bsuXDSAuvg
bSx7bCbk4DqwChwZe5tFYrwjfaSDo4gwwfPvCWILsAd24NHYOBndQ0XTF6UA
faAHboJm4AO8QRBkHLO7guC3Eu5Psjz0D2MWuA3v4rTrB3Th4NhxeOyoTOIa
WbNh+p3eAU6wx/x38SM/LwrQUbxv+mWxL/Kv8uMLVfJSt6qqTlXrV1OdOX5H
HVMXkxHzLYErDGkMJQwO9BeTx7KnDO5h/6swAfNwyqafKzMeZzjO8JH9psYJ
9QJ1AYW/nes54Ip9EJUeK7H1oFTcdBHxMrqdEQecAk0h+bt2+venF9IY3eUa
sbiEoAu449G7G5AxNXUCIsQu2ALboMh4HDl6PLkC/Hs+UMR/mTh9+xyGETuc
n2ba+zcBx/QJTGNHdnp8k/Hf//+/z2/3F9MgjaXN7O/mw1difZNOMe5nevSD
hdCJ+8//N/HN/9F/yo7hL/wecIwXYRzT92UCZxAAxMAF0Ia5N3Z4AVRifq+M
FmMRPAQLxtqjnXQD7ALHQDHpGWgHZ4E0qRefHwKxRAJwA4EgFLpgfsEMRGGu
keZPjQXPkKN22f8u0kQTRHKnMDEGyByXTJa57McrxDXZQyhi5t+++2/5Qfxf
xTiXRmvncXrJiOeZF0AAziKeA0j4EPL/MAPXDvbD6YQ1KQN8BCownGAcsW+Q
H7NrZxp73l/rz/9twN/tBwJ4HNL07zPAZsACPeGTH7b3dR5VkarpMpzhTLcn
bWeV+KHgL4i5yhmAHiZybEb8S877C3/hb4FEt33+x8A5Er9BfsL18/zr+Zz4
DJhvstiwmLMkTyC0G3BaD77Sz0f1IH8+PbA9UAHiwAHKAG9gjmv3CEMpkQ0f
CspYteh0KZZ2VQYEO+TPXfbAfY6oar3M0qZHJETsJaaJjudXh9zwHNhPIkYi
En1fP3/UegYx5mf8WzPxw2fgAAj/rt08wVHxKpGLvNJJkrFb3cr0qt/pl2yJ
vmeJkPvinTFBVgh1RSa7VOu8uTea8Q2dsMuOeK5tA39WUDCf8RUEjw0cAlBn
uc/aokUS4rc5bEq21nnS7MJm0+QS356goj5jQPn+1N/n7pvQkOVgGU7X6Odn
JeUkKyTUWI35o/g0+Vt1KTyhPNN51entsw6swePp2IT3soO0dblxvx8J9Ptf
aXtrX9c2Foj2afCI91HcUG0YonvVSOP5R58Kzy7/Z41NWsFa9bOEx+5vAvfh
HfgMZv3L9fNz4HsytPAfJnQa4BLQhj3EZMyhcP0uXuXv9Xh/NH6vXyQAz8ie
qLlAC6wEdwAv/iAD4AK2TchXzezPdJ7FmzGWa4Fwv5SVWA3DM+Y6NlY/tZEv
7uAev48J/D/2zgMup+9/4J9z79Peu7R3ifbQICSlkooGDQqRjBKyyV5ZlbLJ
3mQniRJFVER29vzaM9X5n56e54n6+X2/v+//O4zzPi9d9z53nHvGZ5x1DcAB
nvxt8f+z2IIV+ddKsF/GGcDZwVkudNssvLWsZUiz+cxbVGep2qvvkbht4maa
aPpEdCmx/rujLqwQ0415iKZ8Mc+Z89W4tv8vX/fn149z0QF10IMg1BMNQUXI
EToTP1OJWLXtiPz7iNSgfipGUzn466wr8VfRUHH5q7iI8ewWvn783c9lfnGf
+tC4HII1yT11GAimaA/xQe7qTQZ3cIPLsg39CVq85/KnQf1o/Ql/HCFe4NOP
hN4wCRagRWghqoJFKA2tRr1hB7HjEogECoVg8AW5Jnf5/7enCHN7jPnpjCAa
BpGnqcAaSKwfT8b7YS/Tm5ElZuvAJlfLMsNRJDJGtTyHb1OzDOPw2pUoDYhz
Q/P6kwgjYQhJ8fFoP4yALt+8PhFMSI7ZN5nv88+vbxQNfSGKlF9VUOb2AlL+
XaS565tJQgdib5jAO/BCRkgcVcMhIQ9OT45E6xbKz6SDZN/4bYbxMBU8BYJH
nCuFmi2jRaH8QiCeNm5st2SQEBJBKxlFRp4xY1TY98QbyIfJAkV2RfqCpLp0
rquaUpbCcKWHmqochuPF0WFuQjlUQgFqRTxyU+7oia/nKVEa4Nv1KtweakSk
lgGYEa/Lg0inleCI5sIbMEFtmZ2gSiz9F0wfYtPfBX3GHWJhGlwCfWIrGoIC
ubrRP/hP8ywo3wfoq3ZPYZJ31sT/FIUVII1sUQGSRLdRTyaTtWddiP37ptn1
l1h5Zg1TgPLhODJjYlhtaEE8wdlN7k/9PArlr6BBazXWp3eAoZZ4JhmkFq5h
bjfz8/oyQ5hhTGfWGBkiA9S4/kWDXv2rx8d9fwiDLEh9U8+rNvvgxWDoAS7N
vs/AN8v/Pj3WdH2maAiEznAP9UGmKBfCBA9exsxGXihZs8LGxDRaY8ay9dGJ
/h8c1n+45fbIbr7hPd53eW2YUthMNPJOUOK+/5i/Ld7/NiEogJRqb95eY7tN
ur227UJbj9ywroEeet5ru359VUwTR5/vpzedzxL2zedKEw9brNn6P6K8dpXG
73l+TZrguSfSDNJC0hI09WVmyujJnDlsGTI/+GYv+yYDQW2ZkSgOTUY/rv5k
uL1r/OLLAQcIgGBSJq2gG8TBfKQM/jAOZrASsAE+EmvCEA6AArrA6kI7CIeP
SIxrPda3r6Ev7Ih/vv0RffV8IL58/bpMo8h7mKOdyIonYEIFEfsge0Ld3Xgq
L79Z1xFsFvJkbMQUwRI8Beu39ePN3/h+5LA1eSsr0OXOgajvcQnmnGLrWJZj
rd1NO0b3mn6W8FwRG9GOTAGwKAu6M/HqNhpFGk5SH60jbNbaBIuJgiR31lU4
ikRRqOs351n/XTD/Yz8+5d9EqdmR+dCHSIZ3uuqkzsuAhKC/riFHE7/ao/zz
BBP53ZrIq7twEzKJt69MfH1JWA/r0Xq0CLVgbFBr9BK8hRvGlL5g7sNDeAx6
MBPmwjzwQPWtLy2hcZoU4mmIXxWGtw4PHz3uegSj4AA6hA6i12g0JEA8jCR6
U4XUlmHQ8AHnFFgi2kbkiUgIKkcTUTqRtfzrxbhjen+97ypQKBQKhUKhUCgU
CoVCoVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAoFAqFQqFQKBQKhUKhUCgUCoVC
oVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAo
FAqFQqFQKBQKhUKhUCgUCoVCoVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAoFAqF
QqFQKBQKhUKhUCgUCoVCoVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAoFAqFQqFQ
KBQKhUKhUCgUCoVCoVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAoFAqFQqFQKBQK
hUKhUCgUCoVCoVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAoFAqFQqFQKBQKhUKh
UCgUCoVCoVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAoFAqFQqFQKBQKhUKhUCgU
CoVCoVAoFAqFQqFQKBQK5cdGkhukBfv9UT8SDqJtzDZmK3OSZVANABJhWoMZ
tIIQ0OcGMZDjBvF/MeaUHwkO96/IvxyL7x+WBIYEMZJWQqD3b0eHwoPhBo5g
3xKswBaGQAqkwyoYg/jHWW6g5fz7geHWKD4y4AzxIEX+Z0HyMOl3ro1BliR3
HZE5JMNWdAdNZj3BjhnMPGQNoDvahxRZJRgNNeDJO5/l/hP6opxQ/g749csJ
fX1cwaFhe3JIw9auiYGy8W+N1Y+ImjyS95HfB4Pl/eQz5A9AkLy2fEf5xWyY
QpmCtFIhTBnuEjOp97JJp73XeGp17tKWf100ikL9UVtBxWJ5movyc4B4Vggf
WSI33UAIKRGpaQ9nm5xH9d2PRn2uIW4Oi3I1lgWYkDy2gnHIF80hP7dBmigR
chn+2aIkj1mBXkPfvC+FQqFQKBTKX8Vz9g57lm0FTg4ldhG2cwXH7XyCvay7
ODlt0ljdwlX95KbTsqelRKXcSjSU+8mryoWcDpXPk+0ll5i238jaUNT4THhN
2Jaw52G1Ar8w32WFy3iXjH/lnSiN6IIOCd/2H3ehjWgfskcM8w5htIz1Ag/w
hGWC3zncIPpPRJXy3dPUP2EgDEbDIliMxLm9XY7/Sqy+R0RAmNQbCcH+WTgE
YyEAvUHHUCv0RJCQotz+CCHeHvX/KJT/DiJBSrDXH5aiOKYrT8FdFCi6e2Jl
Vn7e6yOUxLGjZLdbSfqiJzS9rMVNv75X8O80rCojLRgKt75or0NN+j0ofwWI
yMr6VjAZbu4isEc9oRuEwFrkxegxAYyzE2ZOMUqsW9x4FIImo1FSyuRcOVhN
5CeHSM8tvOuaylER7v8QKPP2ab7xCZ51OG5wT5Nixa2+C/slWN4uMBlipmoh
wjP0/JkeqCvyQWZUIVH+FpRAFbSIfSTFlaeyTX6lxe6PUm871o+faJB/LOyC
bdAT+sIDtAPtg8vMJqYb8xGCqOCjUCgUCoXy3UD7H35GGJiEJpJwSWDIe5o7
mLc0T3TeGBMQMzVGffBKyxEWTpbvjL91h4Z5EF+2uzQEyq8Jwx0H2Tj+1xZa
gT1kCvYDSYgBzX8jat8VHG5LWmN/XSdwAhPY/S/GiPLf0CVBH5wF++M54zgV
nL0iE+RnyS9WqNJWQopICSnDFEiC2bBM4OdT/l1aw0hStzo1O24odz9k2ZjU
eU8kBq+1q8R4g/iMWYP2Y/xaan9cdobmyy4STw3F21mb889PUkrswPbuO+Cc
8s4Ay6G7F6WIxFsHdzfo9vVddZAsjIOXMPRvf69fC8Qdpysm6DcAUEU1YIg2
N6lg0rx+oytRTe/wHpUgFWYIxwMZogAUyZ5Hq9A1dIK9yexknjFb2TC2JTuM
Zdm+jCUTz6SzHtAOOoPcV/OafsbxFcmDXsSOHbZCZcKg8lj/YV1Un8Qsjh04
rFjpzbATw9bHy2gaB4R39LPzu4niioLj22LsOjd4zPjoxXP411+ENRAOlk3y
Qfiffg3KX4w9WIAdtBaU/5dCUkKHhUR1N3FYNpJdJc/htmhbQEtQB23I5p6D
/nS/XWM/YMOeGCgRXRsCE9Ah2A+RMJDVh+4kPl0FV7Bc+4mWs2/R4IM1jApj
eHYIQ/RgHGqLNgr631c3u26B5tAWrERPo0K7HRbh8nsCzLhHI9FtuEDyox1X
BjMk1ykUCoVCoVD+bmj/w88IgjfoOXqFujIqoEwCB9RsEq3XWe9yuPq4z8Pc
RxjL3xp09fUNg0+rJuSMMZ9QvvNxRElYaETSaFGdKO2F2s/1SqAYzsBI1B/1
RpEoG7FN2p8p/wwNHgYCUa7n8e+nvwgogMoX4/odRKcIXxQxsGvYS/6XYvX3
wzZZj8APPMAcXoIpGIIaTG12/ke4BWmwV+DnT5AqkuwtGqZ5tvO9dsEt54zm
H38LN8h5S3nzJQz+7tf4aUFf/K1HBaRIUIC2xLduDyO/OA9x21P4/alD0XA0
AUkwUtzz5SHJ+L2xvKlHm8zein2qovJ4E8GqYAxKQkvQPkYe6oP2P/puFABx
aAG23BxTA02wQ4mwCW4yk8BNzFK7pnU3EwWZ48av2s7zWiJpN1F4G37WVUIm
acm2wbWGMpsSdiyZ8QFL1Sad34TxFImQbuIjtm6ZoKU0aN8SjbRQm1Z5A15i
fF954z78hGzF+y5fUIZxoESW964xfSfzny8BJtAZ3BhtGAuvQe5fTInvESTQ
Uw0NYBpgDLpEMn4Ab+gAXhCPbEn+aYI2UgYxkpdJ3FkLwuDCu74aYhktZiij
3kTBjdaSs1G1iLC5vsCny3Y3Ze8rB09oDFBro+Ea0fD7lT89IGIw9Cb/EgTX
c7gxkvhvl/xQ+HqIu5t16jh7moeRu0WnPbPfdIp0M3HbPnO6f7TPLU+TBQWB
6h21LXe/O+O0T99Z6nWt8Bqd0Vb+I2qXerR229D+uj3/PrfhLBTBbjp++ich
Fa4BQkcZxLXmhUFS9rYKqxHetVjBQKtEf9FAUSLn2oAk7AVl5I18/0RHe72M
brSTjMET+sB2METRKAaZ0Y77PwXD7RX6cv1HTPJxEpgxWUwk0wnNaiYHe7W5
Z4UVXng+nO83frFV2TbpRwOKZbon1o2Lsu45u3Xv2fzzhjHGzEOwZXWIzJYG
RcH1qkRa19tPh2Eo+IB6k7vTcWgUyt9Po7iUAlESwolfU78NaHIeVc8UypeI
EttGmOhLCeJtiP+X8QzC3FV1G5dzLYR8WAmnkR90g/bE8uXTsAopXY/y/4st
WIMVsR8iiCwLJSn6hHOJc5gTCtIOK+zMbbPR3QQcnxb3mYnw8fG652nRdoKW
tkZ7DYstHgoPZDKk5c8tUk1QXCjftmi+4gL5pfKm6XYm3Y1WGffoczvMN8w9
TFVaxXmOU7WjGiPT9r5LnosDt/06DMnDeGY0M4qh5ue34I9o4SOEWMRBPaAr
8eB9vlgvnuGt8PlHeYHuoGfojeDGydHX++L+rUeLPVxTtesBxsq3x9w4U4Vx
za3D127cxDjT/b2bmLtZX/75nRlHpiNjKMg4Ds9TbwiN/vo22ARbwQydgGzI
g9asM9iABQSBHMgQuxYJrqb8MRBvpQ8+QyADDsE21AW6QDAMACdSj9vBc+KF
VJGT7xG7RBX0iQ/BR5g7jkwKxLiSU+g/POGP0dDrJAYdwBV8oT/yhWiYBZro
N/QZzWDOKCh2PdbNrw9721ZZQWWrekiH/887/4iEIgtURvRXQ63UIKkTAs6g
gJaypqwGU8yrd0eFuq4bnFwRsbt4zHb/9MJ+Iy41HOeAC1vOPEQGSIabVz3/
vRf54UFcL70RLTCAxGZniXDtdxnBfgV7g33DjhY6hgpQKbqL+vYyDY0OHzW5
vb+u/5aAW9P4573jvORUc3QFAkyZG6jd/0+hCL3hKDd/BxFZKMnZAmForKg8
SMtNiMifMzV5tlzVXIlsjMWl2vVZnCT27pDCvfSlBZdxkUrSxn6XMM6Tqds4
9ur1ujESknMTyXlLFUet3FqC8UsJzxWl5yVrfcTVZ5zcK/b5sfj8VdYXS2qH
SaVPT9knXjdYrE5vs7OrCT8etvAOYpHwL57xiKv9hb+YN1AEpXAfjBk59i5j
w1b/bvq4sJWMH7unmSFTIG8he0RexR2tfrY4e12bJ+Yvje4/eItx9JPoqy6v
Mc4tPX8sohLj8GEn+y5OmF8cYp5j4m7xfHxX1RClZFWzoAqDRToJhiX9u7jb
thfpnDjnUq82PcaHbl2v0kbFJruN8OCGp0wVLODVk5SmcaDSJB4/vp3aKSDQ
q8LNqW5mwFivm27Odfe7LffM6ehUh8Km+8/zdKwr7c14RFkWYuPun8xNpTbV
Fo8u9HMxwzhm0eXhFYFap6OUe6jUqC7nCdRyJI0+wCNYwrv7L178f2DsSHlf
COmC8r5J6LJEkky4iZ5qolVm+z17Go4+BzdYQ2q0Omqo5+3+yx2/nBfdOF/a
GNLgAXRoVlAWczTEsUyy2m6bT467HT9PuS2lJtlb7JNTL2I3eZNyNQ+mwzCw
/uULWL3d/eV4I1liH4rUj3xgLiAxpNVMQI2y8m5ZovzM+9Na9eTxHaPyHZ7Y
n9kYgvGS2iNXP0Rj7JkhPHVg+74lRpw+nEnCksI6TA0agXKZ92g/OgDr2XMo
HW2GmewaFI1S4BFbwgQyLf5Df1GDl/rn/QnKj4EcKW+S1F//l/h2+85tGIIS
iQRo2Gs6DurHt1v+avjjzMR5X8SR57ZItYFACAAP2El0TSyEgRxyqJ8VCDJI
Eeo98URei7U0z9JBgrtRvk+EuaGxPTID1sM6cEK+yA95oiymwUaRIDpUhLvi
dUN7TaMea2jPtP0XYv5zwh/nWQEX4DzRIwXoGMpGnnCKePEH4DivIm1j1yN/
dAiSmtl7d7zvel3xMmy9WtFUUU9lxtr9QoM4FsI7i+wk2ovNF+9XsFw0X/SZ
RHWyqU53neUG6U07ZJswmFVnhJgqdIH5RPz31zCR+HyjIYHbslkffl0919Cf
0Ng/15oEc4jj7Vl9Q+D9vhxsBy4k6EIZyfFKeMx0QT2RLRJCeyLEQ4N6bxi/
9uynky1LMB561bHywpXwT1cuz7h44XK3z6+KjhauKhrw5pJxO5NBxu5W/Pvd
RrdQFer+h/2CMOJPhMBItAmtQZnIl9UCLdAB/nJPqNl3Xyn/C5bNCsAEmA1H
4CLjCa5Ek55lfMATOsJbNI14m1PhOrMQFsE0MGG0QB3UwBIayhC/3P1+tk5D
qegxmikwcCJ1x+jtNlHp+3p8+ZTtGzAObP3Ootg1a+5/u8ePjCIoE7tEMGwM
AtilTDrKFAyElkYvIBOEkD67idmE5gnSSaa/Q89C595LMB7zLG41xhmrusxx
D5M+yf89m/FlUpAPaIAqsXyG/GPv86uwQCiHzWWHNhM0jkQ6tiVSqim7J0ya
eC1pV/6Q0FOh+eFDxkh3ie8y12uijx/jzngyiUgFaSJ91Bupggp3jgXln0UT
9hOdBmzDiMxtUCCZZtjXwbzNKon7S64WX67TkWDmG+RNxq8lxFeolm3EOeKx
qwovYuwnMW4luoCxpWTyoj4nqupUxdfMLzq+v/aIhNYosVW38CrJ1MSlKzBe
Lfl01ItVGp8DJN5MjN2O8QbJ38yPec7y5T+fJbbLIIj8ZR29hvbIxnFAlVAI
N2DsNwySAzyH4JNKw3aZzH8+77G0vflHk20WofFvd1WsDDhU9F7nYfzF0pcY
T7wRf/7OvYefNa/OL758e19t36sHTkvfW1+7uWrC2ZCnGMOlnOPbb2HsVMwe
LCnH+NhFvxNTbmDs/LLsrsd7jPNeBd5z+Yix/T1Oed4zjM9NMkg4PXV0uRin
K7uM7aqdhQLRbCSOkojsnQDlP42DudMvqctFt9i8Z34butxy25S3yvc3j8Md
U45p9lTwW+O5KP/YgACfm9bl1RtDI+yU5etweM9QO2WFgzUZKwyH9/fA2CP4
vbdPB9EQ/v02E3u9OyT+suX+Z0GCaC0dYglqgDuxz6OIt7EDJFAJ+05lUJst
3heLXYX2iU2RlLDsC0Ekv2dDT5gBG6AlsxN2QRZEghEJJsSGZHkt5E0xhRKw
QbFflJNu6Dw7RPiVSh/DCvOW4/aPip7gMczxmciG6kz9pFPVi8T9xMtFTrfg
n30CjsGSL/pHfk0aX1+YO++hDfRDdigL+goMdY78RJm7ogutUkZE94tw7Lff
u3DP1vIwjG2vsEe29MXY4Cxn98AoTi1si0zxCnz6W5aSnXyOxAubPxujjYiF
sbTf4X+m6bxcU5AFSVKH5LnjbnW/ed4/Db99jo8011e3QoHgR2I8GUlx2+74
/qLQL7sec8P3pPjv3VA7OX9hOnydrmq8L7vwlhcgufKfcfvLnv+jggQtngy3
f1QXtImW4sAl4i3sJxppBBPPmDJpbCe2LXuZUfxmg4cqY8zcRCZwFJ1HY9Ek
toDos3VwmFEheaEIwwTr76LvZD0Kyh9jIhqDPJF2s3zPhJXEo7NH82EWJBDL
iCN5QcJKLMJAQugt5yo7V+CvGJOgBTP/2Uj/QPBHpJ+CAmLBsaCFVJAiGsX/
lWcPbv6moBxtfMX4julVOdEeKQHBAT3dEj3OdxB3GTplplua42jzh8XnvTa0
G2MZdvtZt/0d022Sb0p3CnG82yrh2I1OVs72VtErAnr077bVS7P7Hntj295W
m0w93da4mXVa/416zu9nkmO3wXZi1/py28sdBe2gv169HsQNbZsdzxAaIzRN
qPR/vp8WaJKgBqtgBWwh6f0CnsET0GFC3e51mOi23fzjfN25mfN1dk+5t+Z2
v7sH8a4Lo8tyLkyuNr606rxfJcbjl6VmZCxzLnJDk0lJWsJEo75oIBqCpsIU
4r1kwz7YSfJNWlCe9km5SC2XGqKS4yLmkuJS5/+fY6XwP7/Hr4Yad3aJNqnB
qkR/asAdpA+toJJ5LOci003+chv+ebM4h5hYxkq8k3x/+dkKe8X+2z2bUwGd
wJlYNXmCIw16W5Rn+/DXpxGG/jAQ5sJM1BN1Rb3RXcZIKEaoQmSFmmi3U92H
xY25ltb/1mD/jMzP/XRr9E/bjpr2zUf+0LBwhpnObEcbBX61U49z3p7WrSZk
BS/2LbK1X9z0inPmW1u+1BzXJ/dl5wtp8zAeUzfwtlV6q7opGyYtWhz5obQh
hXNgC+POTEFi0B7sQe+L/g1KA039HF0wAEPyz4DUCnPwFhxfCGeIrWmBtEm5
7gCJECWtrPhQsVR7g762nX2bVYKF+5+hPsxY5gVbvyqMH9E7qUaTjOeayLTx
cn7hrNI2qNOTDOFl3VfKPpiyZFe61PLS2/vszOz7OMzldVS0gWCmOxPBDGAN
iA9p+sW8zT1wAI5APMTCEGKlThQc5/AC5f9D/apLi0EPCRML0Rt6wGiBXfFe
8nXItHE3J3eSXLpErDgZbxXXXupR2rt2jPjrlJjiy7hMYseyZedr8CYh0bUh
VzAuEju2JuzyXbxScmda+1OvcIXk9aE2aRgPE1825travnVLxd0mR2/DuK+M
5mCt1G73pcTXKbnr+fIU1y7i6W0kmvRb4wJ+dhpfeyvJj7VgLjgwU9JNbKx4
mOX0wOKu84Jy1iikwMyK9P63IzLHpnzaHPvSd4Hz5IMphQ+1E1KjbRITz9r2
S+w5ZYDssVdzVSd8WGR8O7vUIefiVYzP35A+s+ohxsMr4fSpqlF1yjeMz1bd
xzikUv2U4+032OKyVOHFqgt4Q8WGggU3U2pnXrYovFnlVmNXWXwS325Z61Kx
4YTxrYU1FpdeFXS8ZVNz8UKXE1I3VtV4lmnnCl87/Un83ueSu88xFhu0P2LB
kOf774AUES9TwA6pIQ/0AXlAR1LC3Jq974/GZj89f6vuY4LP+1n6G3WXD/Ht
ZuKXGhAd2DKoc6BE0OmIS3GvewxxOvTSMSKpjaYCxiIRY9u0VpCuGRl/0Wuv
fmVdaopp4prQmfkHVE63WKbF74aYjWyRFfnXHaKJZdAfJAXPq4NPJGjCQ7hD
gqA5meeV/HXp6EiCE7mfL5HegSBHNOZM4jm6gSySJv7OdOiCnJA18ketmSdo
DTJloxgXRo3ZIYhAgy759fqN+XpUjGtfqsBYCERFqCcbhXSRFtqJbqiNt6nu
dG9bS1lh/SJzzgz+dS3Z22wIJ4LX8HiEWIIL0AZUyrRHbsgbdWO0iUY2Fqw/
OfmLfgd3cT8FY0tXCz2PJwF3TgesiFztNB3jgx8qX+fkYhxx4NO+YYvWlvHP
FmdEmMVIjuhUU2IHxf4jafI9Uj+Ks75F05RYOIpE000jdncuXBbouyjXHPt7
Wr0TPXe/Te8TdOhjVtnHfdYDMFbM99uc39uxjj3add2Z8EGflxZ+2nokEuOs
kbP6eTh+vNxwtYTAT3DWrtXIlYlWqbV/YNFSYbmTYdA2b0/tvFA8fEM/LVO9
EVfH3hy6z05yQ65ZrW43xd2Cec2aSBTNBk1GgTuOlHZHfouGdT0a++mnQxwM
JjqzJcqEUeD33c7vaWhRbx49DaSEsmCrQI42rAf2836nhd+a3WC9i/I0mAoY
oXdQC20ZOXYas5S5wDozl9BjtJ0NR5rIFC1g7sMpOAtDUCy5RgLGNbnf7/sB
iLd+3X1kzjgyjetWpDi4uKa33zVdzCnbVbjDdsGHFychEUaGSUANDaX/bZ7a
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
DbEO1XMfcgSoZY5i6mecu/k7/6BHPSgfJaPgXx6Y7sE/TaRHXEe3cP5W/w3+
nsDXE9/ZJ3b9nKdUiXIxnkj6XTm4LpLlCFrwbv3h09onZI56euk6SdnpX2zu
veM+6sh1GfO8s2767mquI8vTT9y6qP5u1LS8766Frge1O/SDXYoiU7Oo8tkd
UbxyliuIXmwbFk8/8DBZQ5DES4ohbg+CKGr6ed9bwU+7p4X2o11oYLr/IYXh
Nj1J/5zv2bpjfO9WLqxIX1zJ0bmgZtdv0+1EspONxGZmXcYHDIwMJxc/mrV7
1suZF373oUUYbUIbf8HxL99f+Gc1W4lY0CzkjdRIY0KCWPLzO7/0EoF1q0t0
c1JvnHHR7OhZ3TdoKa+LQfen03bbDQC2fh5xPGUIsKd/u82749h+dg3qX9hr
QfN8sUxXFvO9wcJlB/kkRmFJt/qJ/H00cGg6od+nTAO2VOUDqyUZaaoZ5ScT
tm4BUaPrKsKreWrPzN/D6sq0gm3q+R24NRxEj6cT+j368z+Oq/afLirYnqhi
28aM82IWWoBq6I5QPMjLhM0Rn6NRpio9m5S2Hak/c+Tt/L0Gls1XTowvFZY7
3HfsMdRfaLIbuzoE4VLbL3Bj/8fMb2bZj/Fo9Kb0KxYYZ2RJ3r2elApwddH8
/faWAE680Ud3XwfQMmPwDL0D8G7rdRN2D4B5a7boWV8dgBB+ipl/yEw4sWHQ
fCCEGc5cNrjq4WzctECRRWGGoqLuVgYzhiKGVbMkMNrcjtqQCTqPOeQtzMpP
InP0BomhHUgRsx46AhFMRNF0vTuztmyt03qTjaZzTOb0zxme7sC8hX+B03Hb
/08mhJj8xsuMuQiBliJb1I+8EB+aQUQSj4mFJDdpSIRTHMhb+MyX0+1ogcH1
c4ds4pOzl2XZL8flWsioY+Fyu2u4e9ZN21XRvbBsznlpHi05m59POYRz/eX/
EYU/EIYf8U0fkw7ke/Ln+AZtORFJ+d01/ivb44o5Xn2GzzXPMhtaJakMDW9z
HDoAVtUWZO5uBwiv0cz81gbQ09RVxIPxzcuWV6VjvQDezZ4l4VhXN2eVXMU6
tkWj1A/ru80aJQxY72hsyh/pBHhYW5SVj68/V/Mmo7cV4Ezd56wUvG3dsDs3
Ft9fp14z5zPejq//nLMVP9es4WbuG6zPNPjm1mN9ouFkbi3WZQ09ud86RmF9
A1NuC94+UiOUebPVES43SRc49BjQnDpqSr+8BGgNLHR9Flb65vKGOP5koS0/
1mXdOL0+uQQSRZKI65cdBzMlU3Egp8SaMCdMiIAfO9IRvWCLIPN6AfbAa/1G
uRopTyneRw2puwAUK4xuUY6Z01Cple/5E7JgV7YscP6ZLxD9hP+2sPEYCFYJ
ht05S4PRmu5wb5MheF3Lcdf3HBUoFbKBXAY6oJjH7t6g/Zh6qDzYcx/G+/I+
c80uHYzoUrH/qr9td/c7Sb40LhrrVL/DdqojB90815kjILR/VEh+wVuIPsYo
MbYgBV5qVm0pYh2m1uoIbX2ygB9uhFSZ7VcAcNak7TkhUX5p6r2GCBr+2/5j
AIT7dEF0GzGdSD90Iiv1Bt21HtP1ef/yDP8fEgFiLTGMuKft2WF6Hfr3dLmc
PAVb8mOD53xwffOmzzcDYGXrjOYXca0jyc/39RQm6lGPv8rsyUhYCIpFfHk5
AbgcXVs8J+I8+ko81pA4uhCYxRoNTzoAKFidjyXTvkHk+Y/RyzEPP2jVVSKE
22WjRX1+Nm5HR2xvPBl/AbDwaGyA4H3M9/Z9FPsqDvBCqFZWCPO+pisKgWle
AJXRorc9zACEn15taI6ohqjhzd+yiwB4Rq58YyzB7VCQRfDCylS5qffYR+4m
Wwi1X6+h/A/LfRSODFALckaOaB96j2SZWJiO0Guwpp52Ppkl12Wu1M/RsNPo
5Ejqp+jau8qDVK3K3WmfjlvTmmwszZ7LdEKbptk+Fa5x+Dw4Xqd3iAY1Qyfq
elQB8hv4HxvLVdOka9gf9e0UBLkoFw/RLSG9frvMJMwXDJn8s+m05jbl9uKe
uyyOoZfuCd1a1hr0EFu2+t/xmDmTVuTnOKvP6C0KQqeJo2hi6O/C6fLciHHb
IvRk+rzvfOSvM0/sj2RqPFAdZoXyaD05fzL+935EzPajv0y3jZ/L97FU0SaA
a2G2O79sIWhr7hnsWiRqA7luR7a93xAzws/ggRmV4vS8hBaMFPehM+RnVItx
4nWyEvModpRKKk0eNfwdP5YUqFo+zLZU+ppd3NFO0XtRDhsf8GixflIUM31x
2l2uPAyoT173BALsdFa3aTsw56l9Yv3dGkP7NwlPbDI9cPt3zKl+cMNs/dDH
NJvol+esO27Zrrsgs4/TJWSLLL5TpkgvXwmvHOfLLfLHN2mh7WWuZOdoVaI9
Gn026N4NHq/AJislrs4kuLebfhO9BeXKnNOYWUoiKRSKsdhRRPnzP7z8gdBN
RgSY4sMb0FyKLelHMk7X16CzxoeP6rzADGF9XUELgPJAV15nuTa14nNhcXY1
wPJRrzLZ2hE4Wboj+i22gx+rufNVCwF86kzKbMsBirN3JrYkALjd36cyT4sK
jk3XJD8rA8gWfZHaqmJGNYwtFD8k5wKcsh6L8rgUsr8/lUAbyBo0hFRIRDGi
WFIeTpe3vZ7z+ZemwbF7K5e9aev3h8Kd/QaHz2D/yTW6qWKzX9HUeflIjdAl
Wn/Eb5oeHvofJy+IXiKCYJsur/HVbqvPLBfZebhjoFUzD6DhCX+Z1YOhcaH4
4qiHzi3wNYU+KcV/FJ7dHb2zyR1gQa1CdWAKxoef5ny0qAdIGzIfDMPlvKyn
ut0d88DoJwYl3UEARhWyxcnBANuLxnO4/TAuzdmZ8cQb+80MSiod1jnpQinH
vEZgderHJP+bADH3SsNKbLWpRiGefiuw/6vcai+WtvbddEcQHTlCXCW+/d88
iH9SptaFnxIv0pM8RMpO52OKaYgJk/7R9MZP7wYMmwBYytNLzj3YOLojMSYh
CNs/lwzztHuhAHLFnIWPo8YhOzctyw7zv/RcwawivJ+hiCP3TAjG91U5pSx4
O77D56lgDC7POoGyHFz+/fn1KQM3AAJKD2c2eVIhMskiWt8e84xwBX/fC8EQ
V16RTfGhp8Yla93/7AgwX0B/jd6yx+76HMfZzy98L+PBUEWfQP9z3LA4tuvC
2NL/VeQcOoxkEDldAN5HQtXmKnj7Ly/njha8BJBUu+dhtd2TMY1y2egvlyfm
pwfHDFl/hYYqs7h+GwCRmoUPP9gBfKuTeezrAjBcmhIioQ9Qlf/Mu3piPljR
c78EjB+bCzn96jQA7hft82/H2xXFxwOOYZ6QXDocKKyF8WYJ1T8V7w/PGfNM
xNdxZHi5G2H845It48lxCMAil9vbHl/fW3jPl4Kvqym9EhCNdX5h6a3b+Pjm
/BrvHHUAStEqPzHNifkSh/xpWNMXe/uvxuexFydMzouQLDL3Y9Uch90F930I
fD+TvBKvjYeyITI/x3ulxpaxYxbE4beiAFRZZala8YLfBM5UpqwhlhFcBPuP
7V9n/DWHWoSCl8KWsG1mjPoRRwBAc0CxVH4ZlUHpvQyrlOHQgXkUludzZ26f
On+jfeKVt1dPxNiUlxSVlBEgnGqYsCx9cOxyydKcE2UltNKKnNKc8jtj+m6F
rsquAY9I7vtLI5Yu4p66fgN9LF0z3Rq6WFkRyUyJlWeNfTc79djNauuLkw4O
9MHl/Mg3hOqL60ekv88LbD/vpW5L3J5Kg80PUyLGH+D6Er7c/3nYPdq1aOvg
HOyNbwce84nwm9V/kimIiYnp7fR6WfdQGMYcEsRU/IELpBDJQ8ZThNE6JIDW
okalODkf2fn2elE63uU3EqGQbT0rG0vlwanrRYgZxBgy+2X5xwq0HPH+TTyU
KZkYBcT7N/0Qfy87p+0jMwMTAz3D3tnfNAPVj6nk+xf7UW+udtw5Vh9TFaaN
y4Ea3OKdfB1A6WaDY67lm/HZ1samz08D7HE4fd4Ut5fMOoGYHXoAr3qMU7uM
APife6U3GeN2H/r+8hz5kCr+1R2cFXNtRaeedxfZTtgL7KfPEBXoDcmKZmO0
ZYA4EQsunXmYCTxAfugcZSIuFyPiQY9YVed+mL3xaIygzpoHK3l/dlywcM/x
mqUl9UJIXFCAr9/yi/CGDY8EzBx5Vm9dMYPnwqWFkhlimcLBVg0iTRvF1sWd
cCUuEgpENqMFtlin0FJC4se6UH+2TMW5mZItk+OUXiAhymlyP3nyx4QCFVJJ
n0Fi9caiwIXD4fkT8+7aPr8JdMW83OwFq9lKTV2q4FOOs3qHcqksDUoGcUoE
bUH3fS1xKTGo7/DEBhqAeLZQh192FDoKrxwskcDl8/iMkrQYwP6k5YdDZTF+
edHoPt+ygHZwYLXLuPkt2tnHLWqdO/17i1bbzFnCLHFgKn3m5HyiEr3/UX9k
/4n3/P5XCPEhLqxZ0Vw0EzO/9kn/sQeX+6FJfvBdftnm9gdCh7qJdoKH3Dmd
8LAtWhs5xaKPSdrf926PxnxKRsTGPByAa+Nr0waffBgX0z8gagCQcSnZ8SbG
i4ZCXyyS8XGF9dKX9O8BPF697xgPxgtd/Nt0+m2xPTyicDVxAq/kyBaGV2L8
EVyQWFIAULDW+XgSPu4apOsea3IHbHfEWMcEWdBYJIMvKHv30XhWSS5jWZyw
7e/TO++3L/CHkirGJ64uKazmecriFGHaHe4/M2Rm20wj4iXqQ4OIh/TCfC4A
Cf2P5eR/qnwHeIyoA60n0ojZ5GUUj7fr0Emug6t6RH1Wmt17ERUdKvJt51zh
S2ah60BzhraFevCL8fFZzheP364ChZk3VydtFcbleBv54na3Bi0ibIh6ksDt
R/M/cNzm/1+h+zFe2ZTQIgKJFMrMyTgA9khwqccilaVrdfLK2ZOTGjEPq52Z
dbCjgUqr1s2QauuH8ZrAjIY2AP+a9owcrJkab+TFdwJUP5UpPNaN7e3T8gIW
rHc2WuSv7AL4VH8jdyE+rlk/nq3WAfCs9lCWSTsAb41xhje+3qb6Y/pOrC/U
dGXUYf21/k7OaXxeSAMtdxa+LqChJncO1oMNbHmzsV7ayJc3E+uOhrFcwOdZ
NTTmDk/Mi2gYzB3sGIUZjVJ5B/HxR/V9OYntheBYF5ad3NZCHWhPKdnch9Pd
sbCC8RWAh9nYaaWLIq1LSXlChlATnMoXNWxnjyKmv0iF+YmP+QiCeI64ptNd
zx8ukLv+0OL6UCdLuYODb4uedPssOSILnKWFXgZHbGmCZYduRR8D2FLx0C9N
bxyCi9O85XQBlIuUvbbg/Q9KTnrXYJwrVnDa3VprGDbm0budxXh/pNDwZpn2
OpDKrHC+iXlBn7r6jhb+qX6HiMl1cQ+iR1RT9BUJEfOpAjNLGb9SgqlDS4+x
XWTuo3HovJeSXAngGcR8gV1FcfzKSR2tDyp0vwngafm7/D9/aZVZ5KkUK/t+
7aef7gOcyU6Jy3J/9pLYc3+3uOKstQMqmcoPDrCvCFd2UXqgUrjKWfmiUpTK
wlX/kmz/J+S3caMtcRsz+Jt4jLULby68xm60VvFkvb628s4ooYJ3uW5BAFpp
J5JX3txFu3H/aPQhh0Ww82HS/b0uD2jDiVrx9s4GNL3kgKgcK4AFDmnhLkHD
0MhtsalVCiBF/p7wKhHsNxWELcwwLh23q6588RLgxDXB6tQXANpnPR4zlAO0
76jWnGkOUK4j6eOcAlB4ocVfMYgG5+4339vtIQWCT2wr9ySNQGkKJK+6pdjz
uREaGGM/vq44YnXkoWLWj/V1BNEw+YXUJ80pDJPxL//zxllM4DCGidik5DuC
lbg3jV+09Ddqywoo+rt+S35Wj8uhDfJfxJhJjKfUyaTYyrcCh+irTcMCuH2x
+pMlEjS4dvSz0uU1AK002S6niXF+bQ4ZXHsBuJ8YxcVK80NtfURizq5hGnPa
g8B88auDdCvauIxYqmTiV8isKl57SN5hgSfb1Xl9mxgEcgXtBMK2Kx4q0YjW
+Ghie53R5a3Llcji2MAHtIT0xj7TUPPdFzkjjzIHzihiUlo4lV56OmdKMVE8
o2LR4PwXjOVbHyB3JI6cCEGyHNdFt384MdcGbUMbptcnmEKgf/3vb8vJfpSF
SqfL9YmQJjsva6jRSMQluXrRfaDiuWgHm7D9CM2zffu9TQBuJ/P4OJZt+/Hd
eJwoJxpQMMZ5/+g5wcuTWOVm5PIdcRQ+VCmU4hffxOJ+QGkJjaH02/ntEsHj
ddukhEOW1Qe8yutMXH+R8b3E89O1+12Y4VPjjcKXdgAfnn2u/eKCeX5Xc4X5
dXvap54Tla+cALY+k6x2cgag7xdsCfLA/rI1pswS8564uqe5blcA8l561bG4
Avh1ZFfQHG3GJfv5mglPGziuPf+gi1j29Dpnn8lCsovQ/8WJxc/6xkVmEdUE
TOc770rmpVu4mXZzvfuSG1oCwPC5oqj0yRB1ePBgYVlFCDz+vKRkoPIb6PZl
pinlAuwteZfikAYwNMz8SXIE4GD//e7X2D4GvtnR5YbxhM2TbSXviwCMrl3Y
CtKfQcR+1gYp8SXU9w7PRb5ul4HnfOqsBfMSrZkn+0MI9JEYR6zEzN/EN+hi
YQrVTGHM0H/7IaWxPudpKnCJHNIOw341m5NBSGqjb9L3C1hRLdInzhIHJ+OE
kmjtvyc7/43yncfPRK4UW8oCyoXpelahH3N85NAbr7vjH0ckOwyhJtjTr9WK
n+rfodeSn04D/jHxb1UYF87uEmnXzQcQKNYrNInDfu2t6RvDKlyOVRKVF7H/
mlekXbAe7++obik3CAO42uRYdz8S4FLrxca9MQAR3S9bm/Bxh64trcVYH++S
bU3H+mx7eBPr/RFIrF5TYX+nmXYh0ib0xKVTtPCLduePq0sPnWQ4S+wgGrhv
Im0kh0TRYqSIJFArQT9ZF//69u/fJWzEN1SI4khjdArtR6vQEbY785jn2Ihd
9Om+scfE47N6gXuuTcSLsdym9XXzEvfBk/yWrGdh3+BUOiXlWTAN+jvntntl
Anj3uT9/nw1w+9ncTv9EAJku1CKE8eDe6tgy+VCADY9sYm86Arg/zI5QxHZz
c8lYes1NgJuFD1KfuwN0FlJTJTzGofw25dY304l1BjRT1Ny7QThd+MFpJzrq
bJPsEz1qAPxbWDYwbfRrm08AakZDDCfQEaSB4hAn4kCLUNKfnZ3/tPBoWKqa
KXNrdSam+PScAYh+2pKk7sBN1ax6EC9pFwJ32z6lCl8fh7CO/LQijBslG2MS
Fa8BfKs1TZhnDxBVcy8hDfuVmlhvJ6XDAEkFu7yROkBJXq9XqgbAsULy1jDW
q4tybq3VnIjL9MA7b4IfJO11ETkIEHb3ofXefRgn3d5oKaKIn+/VdVZfHoDj
uKOCzEaAlbJswibLcfvcyymmsgog8lKydvNW7O8eW7h8wNcLFa/ypeH7W+Vu
8JTBz11ZEO9jje/PW5zvvxmnx66o1s8BP1e2wMEnAu8nCvb78GiMQ0l+g8/E
fAuP8u6gdC0JeBy6z4pQ2ENtNLp9wAbj5IsCnWsMeV9Pry/nixwxRr/1y/C/
WBSEnNFm0pTeme4bRYdp0/7UnRukI8JtNd4pvJEDuCKzcGuKCOvjqfNPIn38
e4z6JM9JOks+UuqrtXySXQvAltx1/1jqvfEnqUseCmd4w/FkgQf6KQhKq8cr
7mI7+vW4j67A8cOmxxi7GLgYqxdmWCmavjZZm01puVtRgf3pePZgPBmN8ze+
MLDc+ystMHZd0GvvQuqCoFA3Yac943MDhq5z4nZ3IOSO90DgMOhHvwmNjb5H
NU/li7NKGQerky16Tvqs0VPp9CdPk1akAmUX2oF/cmjO5I8OnSLXkDzk42n/
ILdDQbxY7Lhxd9w2/60+uPy5hhc6LNCbHpdzhthE8BJJP87/de2x1UKPhWYc
RhysJ+aeED+18loh3W26WLrC2UEoFN1F0mg3SSNciMBpHA4sSnPvzk7n2Hr+
jqHB8aESz7iP95L9AbjujQax3jwKV70H3B5cE6V2OY1e+WZmTsux8TTlNiiD
aMs4o226ghByjstgs648DLuuMbVWOQ25NW9DutQW0qhVXrcXaw6MtbVxRkZo
AQyXXLulqEI/kq9xTUZtVbLF96fXTOMYJbKMIIh1CJE3iRYkR9lDNhHyhCzD
NewPBRALMc4Tw1W0+N3Vqnl+LAxzXaVmLSDmj7CcM1++aP2Cz/MjjVXZyued
Zt212mTWulloltF0ue5gVGJwoD+JVHmDl1O4a/cn8WhwRS8uujB1PA1FIT+0
7pdph4yTPH4d4iDnELUof7qiWaj6r/26LP/6ns/szlVnAUZeizmfN/EcM3o2
YnZek5fGXvXY2dgS4HLPg3qbmhEofHWmI6iNBgpPih2WWwCYtNerTdg5puc5
xz7g9vyoplRz2w6A3vLXh25IAnC23NcqxdupZSbqLZjfM73QuHRDdyecGqq/
YY75e22n9rku7K9aJTYtuTifyWgqXdYkL9GKlH7k9/eouz/ji1MmZ0UQk6N5
JmQPGkPG2C/LkMqTb9ZA2U4OoHz09Uf+H/2DhvVXmQ9IoB7UiUZRHdGOalA8
0iZG2JzYojkuCfcarTHUPMWf9cpV6tZzl46xDJd7ASJe+eOzzzXcQJ5fYWDl
jPNawSNwbcNO65QojEcEl557fwvjCB7P3dV6luPJNnY3Lvoy03TLdIq3ldGA
YyBiqHNsGfSnLS+uqX4NQn6j7ifMsN/L23uX15wGLsrDJ+6dFqfyh6++fe8q
Ll9tmpLu1j0OoUQSUURIULQo77EF3EDXhXoRQVgQlMmZlwyoezHrEo+lufyc
S3cvdV4uummMK2Ip/7LHXELhhXcuxBd87bXTt1vkcqO0RWBQ4Mj6xxvY0cSv
FL0j3hPM5Kxfph39mvKzeieQUvhvyLSdenfW5GSZ7qqrj+5eL28rnPjOqX2t
NyNjtGz2Z8e2hwADsy+Zzrz99mUmg/L8tpX9M99PXsVBclI8yXYyjY5t8tbL
pvP/+xfb/4uLNTWfTIfYTlgS0j/ymx49Xpy4QGhJmpJReWuy9MQ6fw2Hcwo7
bcYvVzem97e2wsWazIx6zAcZ6y5nubVPrAudn71oYt5Bg1cudyfm8w0WeSFY
s9VXZPPg/dtrRjLS8PmPqrUzfLDeXLMhwxfrezXWGYlYm+H7lWEdWh2ZMTEf
IrZmWebEvAeN+oFsfnx9b51b9gysV9bdzbqJn1dep579Cuu2+pQcE7z/aX1f
TjDWFxsic/sn50fczK3roIFdQ0Lul45hkGtYnevWMYZxdFv28bYq2mgLlLE9
6xv5OpDZ9XUYIFh7r2quztWS7+//nPKIjCKHSC9i1qSNvvwnlc4/K8zoCrGT
mEEo/ajnfASj+KMtpPDQhh354p4sx8xGA7PWusxUXwEPbiuamyucgqupLY78
GKd/KWh3Z8Q4hCG/wW02xvEy+Xw3PmMcH5ofc2MJ3nbPI90m9FABuLNofwbN
wnceL/H5cWXm3opHLtKk3L6cFNoVS1uxznr5FnYA6W2da88uArirZi71kB/A
0GTkQBLG+cweVoZeewAaPRxNPQ/tLwrZisReiQQL/vZNmpfc4WTlsWLYrFN8
2EzzphR9yCFPmvWMx5IvP9WEYfzb0T/UWB63l3a5uj+93G941Fbznaqg0omK
bLUeFbN9uiWj6i8PsO03Kg1U9z7QuW9z6b+7JP57+W34Taff+fUAVV/V57LZ
Z1cOjQ/yFgBovTHu60j/QD2do5bZdOsMLI12vmeIefWm2KN3lWwwLnEd8LfE
PLFBO9h7eTzmI7s26Gy8BKBnsDImJhe3myulFUXPML8wZve/i3n6JbNvjwOe
4PK4ZFPMitvR0PEvMcUZAOvOWnpdvD0x7z28wLBy9jhRsbomsBUg/ESYQcu5
A8l5TB5MNfTPWLYIL9lUKDi45ThmDcroGqGODmP0IjsZxYeCFvz2df7y8n3+
KiN6SGqSn5HutF9iOnhgj+tSRpOHfcll3Ptxvn86X7vhwIHRkdHWlh6NPnB6
ll4A+z6Cc9HoPX8VGgwPptdGYx5c0702V30vwIKqu/HfZDCerI1LaJIFkK+g
xH3eOQZf8t7cK94FYHMz0zZ0L9277emF2S9wOXqXF1Rr16FPQy9b+l8PADz/
5DZyYBzXg8rxWv+GjEHVA8EHl6nyW2xjvsNMm/n5R71ypzs205zJiXJ6ZbzD
RRMvAdVcw3WGqwvn0mv97kWZm5ivzwhcSDkWqCMo1WdfbCCo3yu/MPokRzE7
L2uP1C7EgThRBPEM0RGFyIz4jmR/vXnS/0gmZrtTENPk/OnZyAJlE4jIQV+I
p8Q58iFRTW48Ky+0aE1glW+0nRyrOECJyyzRu+tMRtfFSvm7OY7C6U2IN5TH
VCeCUCMG0CeUTToQKwjfyfzegW7TLVxTzD0274CCn9wxPlZ2vZ2Ct7crpfKq
xGQn3T/svi5lOMrMXFp+BcBbTc2Vo3MwX4kUN0mWvvE5K0cgpRG3W5eW1iJz
jEtDuuoq5zp1w+ru81VFTj00tTYojb1WQutpSS3ebp8HnJ0pT45cZ4SlHc4V
YY5raMvaE8pnOipQ2btTK+WdAoGlK7FC5borBDcrFDvY21H9n5XUrHI1oFUV
J6fEWGrSXFa4Lo2fP9foNaGPeUc8YyXiITJwbvBMtmSLP7mUfi+Mk1EK6JA6
ksf2hofIJsXJfeT+H/4uk3lRrI+LsMeVljc0vuoDT4+C9vvk3PUlCePnPh4r
+FIG0PXZvJinEvuPTu/E0jQAu6c3yvaWA2RXVRYvrQIo2+4oXiABcLoppPwe
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
lahcifJxC0clc10mtRazitt4fluL9vd+DtOWyIqnKLtamr9f713LnMqXj5nv
8bLK9Zj7VbdYfu+/SGoUvm7TyUvfdTMrd38L4h1jP02WvTLlv+qDh9ZHGdE4
WNi/x7xD3zkj6280rqLPfZa7iocUrdr99ZlFHhdo3Z6fPN551tJsHV7Yr3c0
Yn1aIJXTkchyA5HEkMMTBYbzx3sPT+Ub0b/1czw1Kx2ExGfOjR1oP4fj/bwv
o98KS7lzYhniiZVFdA/mvkgTqtWD+I0AztwwCew2BFApK/Rjjpv+VLzc9z3G
RfFLz93mIe64euGK87ldDNCJ1rDv1xwG/2vR5/38AQya3le8TjpOP9DlXJeS
CXAgsTfQ0xGAYXVdIxf5XZKPusUaxCtfw8ttpqDkjqmyDWP2N0Q9sbmqhudj
NY/t3QkwFpdmv0ADICNGzy4Hz6+JKbPNUxuFz2EVh3tVv8Br10e7hVVD6C12
3bqCzPE0Bmt0o7UXqv59ban9xHccP/PT/626+s/TH+H7B2H/Nc34P17/JHba
XC6fWd080RyN8x4v5lJbzz0sdk5z8uAylXiXgHOR8Dl0Vbvt2zBGvdP+WyVP
AD447K+O6qaDqh3PdeY+OdZ2wwVL7iB/c5C9tRPP7zA6E0UuXmKUKN1zORmG
eFJis8Vspznv2mhiLKosk2ZtIkpEkxQSGWJA9iPaopG//fzBs5cRfrKBCJMY
0oG+XYWKJ4/IZ/KFCiEN5BmZTM0m3GQxWfrzfcyPPujfYTzLvzqdolypU5QS
rY3Uk0b86M7+MGv1rN4VAe8ufMz4bDfscKO+Qpm57kf1nlvepeth5OONQRE6
c514k26dlwADr8Y+LB0AkHxp8W4d4sI3H5T7JfD8/ob0W7VRANOfbKnkUAR4
8OD6vWlxAMVPi188wHJrHtXftj4JIDGk1foF7Sf9a2ozF9prOmNT5w2047lj
px4Wox0fHepsVUT7Ff96uzVlD8DTIZfuFJdB+DSc3qVikwDR78/ep+k+Bv87
Hnkb1Q50GxfrZDMseVuW2dy0DtrFmjxnut2UwIkqa1yxXWwmR7Fl5BEvcoT6
q6wTo0FUiTK20V/pFRFiPcR+YuLV5OFdjRtCnhzp/GCtgLi9o7TI6YCMICPy
fpLvMRWAuPOLDK+sBzBMdtecvAEgoJx3Hy/ifOUuXgu1jaiXRw0HFm5CHHLR
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
og5QzeNxRHxRP/fF+fO2b3lT9+LibTPQeTC57WLxNMb9Is+Cr1HFcNd331nL
U8MgGphZsQ5xZ13k1JzbWP+f7qRVMfe//fQe3my5ifz5jWlPH+JU9Vfzns7E
+uu4u+CWE+L+zDqeGgbiFNfm+3U28cj/Ote1+SEvqLrrdmtPLOLWC49TI08h
zo1OOLfAGnFwcJSPzF6Arz6Wp4N3q4FU3PNQI6tXDPOkzphqh20jYWwTWTip
S9y2fCJKdO39TnuOrayyRDw6Z9mDLd/Ek8cXynpFXKgCaiftH+vgr5leT8xR
p3vdSdEZfb3ym7iPsuTZ9USNmGIEzKTtZV3HVvwTf90gbvLiDpe8repGIgpb
gnvH4Jp/53XTBrSPAumr27G+FRo5735KBcjL1rnYirztc9m8Eh9PBiQ0Zdaf
RP1Mf2X8vBntMP/LqU8KiOfX9gm+X4l592snCzqY4/p6Xd4cRZ4xYh9vz2cH
UNjG3yyJONXsPUfvtgsAz08dcOjWx+8Hp+YfRHzreSnscdc7gP2hT26LdCAv
iV7cNuUNgJ6Joncofu+5bolihCSAgJG49gq04/Jj8y2ENZ/DsGiMygxtPfqz
dQ06qfbdcGli4DT+GTO1f2hwOtlLclHHR3573LmPHCCW5Bdcnjc+rkBOEPi7
eKeeTYo2duFGnN6aVOXWIaMypsJ9aR2H+CgQMmfdWlPm+3q5dZEGTDm4vF2V
KSdyPeABEGavYT0yAePmz3kJb3/2L3xk8SMzKIxfLPuRMzPnLawmEigzWBWI
FUoGay7pZ85bYC+gyrFcwIRUWj4NYMYEdZoeyk+sRYiPAb6x/Ni3Woa9jZr0
N/0VVcpDou7LAd6Vt0YP6ACszPcJnrITeekln8Ac5BG7Sr5E5iMu+uosvs95
K8bpw/o6c5nzFmMFnbKwnIiwAh8vN/JXEV+e9csA3u93UmUTAUjxaz6oK2sP
Q2mtLrGIB7wtbu+cveVR379ZXf/j9GteqiDZiB82rHtRso3MIho0LhpF8x1/
nzhB8Mu6Det6+Fe4F9uesG4dCdwfpueiCXBTX0x1B+LENv2tKucQqtpomchb
ytChUUdbaTK2k9vq62SVJQBea+bsGEa7MbWI1B/A+i45sE2vDeVm07adX1QA
Go19NZJRph18a8rcD5lx1vR0jhv6ZV++49y2I6Bx2Mg0jfn+3W398dNuKmNp
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
jmyRDY6FNqgY7UMhhB6uozsohKyDPiMy0UziR3xIAC3DtZ2Kuds7FIIeoGdo
5T/5qzPf/h1gfMHqxB0+f6d2l9AnTQHdN6XLBXI5l3GfyHYQTVK0V8oNXxEy
v6u39wlcdhlpII4NUT7ZJNRWtH8Be7Pgctb9FDhopFLQsS8VNiq3uzX4FtBM
lGqdI9aPUZbQqzD1M6Utl8Sc0RjtxB45G5Wg9r+tAr+/GBn5oRtoAjWQjLCv
2Yq11MTKytU3X2sNu/qHkJqtUeNHtD9tfYVx5nyVhYFMMczUcVX5AL+oI3DU
+XD2qapKMIlNbeM41wcPol+dpL8J8NWHp8XiHA2W+F9oeXaOAieDTnS4X54E
Iy/zhrwzk3Buw9GOrEsAnBt826QGzcFPLySuKD2WKq7NF30j5Q1sWZ0QdDaW
CtoammGFiVTI11wfMS/5JYStFtzgHf0SmDStw4IT79BSVpr5SW8CkJHqNNxq
VfFiK1qHfJElmzduXw+RHyGCVNBq5Ex834f6l3WfyIQraPGIqKRKH8MK1oNs
nUt+HieTCHI3OW32xZbNHedzFxPKZF6m7HRnM0Di/2LvLOCqStoG/sy5l+6S
DhEBkZDuFKQUQVAQKUFUEMRCDBoBEcEEDGyxsFCwEzuwY7G7e00E5hsu9153
Yf3W9913Q3f+88PjOXfOnHMmnnmeSfVki63dVS6O0VxmrdbT+Wc5o959rsVg
vLa71cThk9OxkfORCeOnYqwdPiT7ae5HvLNKfr16wXy8znt2t0cG6c3jvRs7
uxm9akQXy0/6LY9qPHQaHV46f0fjkIrqxbmpy5tm9meNLRhzrfmUY2KKZ+EO
3NdJeMySSQ24wvVmSkNeM652HzXRndiFtp4TMx9PI0dbg6H2Y4c079Jt8LAL
x7hUqWfXFbYmuwWEFovNlfqp9wsVcVN714470rtVhrwhduId05LQnSkYl3e0
d1jmJ3M0XCGqs4fRi5HL5CO0n+jN6bnf4LNnv0CprNX+tvkr5i1p6CtSIlUp
E2cWB1VwCjpCImyFM2D/Dym/bZuDl/PTTb5jpnZ3/f0Ke5wfW200XFzce4LY
wDKnR9cHLLbLOBFg8LZ5THTEWZehuzZ13qS9uOORqE8+MQ49zfWOW2fcHPjI
+8pnyelTk24EJXwWnxgdsdIz9plt7KJwhZCw2F8/T5BrZ/LWpc7lHmtZQURC
O8Jslin7BWsJKwut1GvQtzHaJHix8P3EwwMc9lxvjr0ZO7Nl/mHGtRst22Pj
wZdOkfw1+8P+k9vjMW6uOjQrIcDvY6NlkvHLTjY5ct3jHD5Y7R68PSKtr7Wn
ZM54PxPPfY7jR49TK1YbrV4nx3ujRBhESmzb/f3+McsW/NfIgCTREwOhO7JD
PVAy9/siYZWzmL26c8Z6mcUVZbGLMe6e+yrt5yyMBw4M7jOiJ8Z2keP7VAW4
Nh0Nr+2DgsY06oZG9lroua/xbcyFvk1+GB90ZWxiLTyuvYYtsAdExfoRO1MJ
6bNeQD0cgaHsaZBH5HcD/z28wRe8IBI9J6WhFqYxrfPYxTl7uP5yPzE74mxg
BEiiRpBFydx84dgmXX7c9SN5+HL2oX7CPx/BTEMLUbXQeL/9FnYmMi+a7Q30
r2vN38P7XQbtgZVwH7WWbA+S6i12pjIEMSvRfYjnxKMW9IV7fcudpmgXLjm0
WS4nyPMwNjCe1rG37JJgXjgR6CbUQamIjbmaSaDn80d97CMsM0l+KGeLsycK
vnVu9VVN9BE/GA0i3PQRAmvQJ1pVDswl9rsTSfsWNOEWikgRC35tvPt475VP
x5e4rmg6r16lcEnM06v1PlFIRQqoFHS/e3tQjMQBGxxgNkwkOZi/XD84DH8R
0sdgzRpbyXFiYwRW8X/Q5+zTcIydgYxREdwHIZXOcldFHnXrsF1yGvJY+WaC
urjiLdEKvh3Q1Sixo5R0VuR4iW3Cruwxsr//PmKkXEm1uy7A1YMVUBRJp+bf
uJPyv4TNnRnRMm5QlWi5P5O0PgohoIzewwmYi1aiCcgZGTAC6CHsBQ80CIKh
B5hABjwCWxTC1xeGisZ36KR11XGt76KAvPD75aap85NLJ8RUDw7dM2nSaoyH
9pNPDpmDcf28njOHLN7TzDgJB0UMDefPN9qLQklOk2OEQQE0wOLviYz/AYjl
KiKoKAWeHXQnjF4leaipg+nOgpeGWEylouraHYw3669fb0n0/lkW7I3pFzEe
aZu0/vV5jJ3sd6w6XYdxrOvRlemHMR4XNH7JwxqiRQy3mf60bBV+GmEVm5ww
YIuP9Gy5Ms2HmgCvRKQ7dBLbFZToHxDsPdU5QHjK43nJuK/o5lmWR2Sa68We
L/S6cBOXi41ZOOICxr1FsxYfvtyIMXt1qfaJz/iQQFTalIoLeDMTO85n0Ywm
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
cmPGpNKnJRZLjxVOmaG39XwHIdkbsmH6vPtsESLl79G/J2EoFAqF8rdSinqi
u1DN1zP2a+1QlZSvd5iz+mN2YZ+OTajsdeI5x7ufs1J0QlaYjb+y1DpPv5ui
0EBNCV+RcAFRrZZ7tCHqD08s92A3s08K6gnsVE1WEpa/29VN561qs8wo77Eo
HyJhEcRDBHiAEiiACKnL6f5klH8HK9FBdAYt4+uFdU7azp7O3mrpYaMm751X
8z7Z41Z6UhnGTDejWM2MO81Jve1j549YV7zLPcLPO/CjzV13z/DDg31CD6UP
L2ya5jtit42Dt5Z/nr+a2R0zH4t5/IFmve3TnQNdnW3mhmeM+Zg2eNGL4HmZ
vjO6PBjd3yNTdUbenRKNCxodNVO47SlCMARloWLU+4fRV0U47R9y4AShRNa8
geMgjZzQNDRUqVmrqfM1TWHFSPWDHZ10q5PqSjOr+pwWSlOr6XMV4/DB3kt2
Hjn0aWDKT1tP38Z4j3O3yLwxvmWpQmwRHdEgFAlr4CrkMiNgBqwCO749wkOG
yDQVItVMiV0WAvncqy3i9Nf+toMaCkfKfHvljo67pamLU+8NcROW6h/DeO0E
+d0PH2EskTxs8/GfHn1eO3bSpshLvZpLs3vvfnJToflx5viqO3XVL44PuD0m
Pid3+QD97WZs2ye9Rgi6CFuJSHMN/jvENhwEI2Er9ylt+0d+1P6GL9/TsmoZ
GwxhOqRDIIn1X9N+vZCuoE/qPydyRxfOzhk8GO7K26jN/JUVUA55JIb7gC/J
Dd1+ETLrN9chUYIOJI9Icfb3lGtX77VPB948QTanx4ENYyCO5KxkyGDcmVVo
PnOKyWfOosc/aH8/7X/4t3EX7hMnAsM4To5f0BRyKrNHZLMHnb8z9lb0DSKX
j506Ens48sHWSc9zInLmjVe38LZIspDi6627oRJKQI8JZsYwZUxuu4Kl4RHl
0egho2UXOSVm0rCJoT6xucNep5ybeCBq7mDfUWFplZODclMnRb/vUXN/bXUF
xjEjNg8XHu4w3VcvWa9ab7+EqAgjIiByi/ElEtYPLMCf4wTaPua7ZxDR0yOh
GMahUlSGVqJSgWyBfAFHkduFzlOtixxrBwWrhBSGzEnk+d+AtqM6dJm5C+bk
jmeMGIpBF9BuljEznKliCvlyqnPl3rXK60xqFW+cuPnhJsbS8q/k3spd7ML7
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
6tiruA18LrK5uCia04s9efd+WsdJP3/0rm+/P0Be0HKHk3sHoMnoiVzdPIAE
KzH1kyIAR6wl1TKFAFbv5VJQXXQR6jfliRsISNG4dVeu6hUzHNCbKzX9FZf3
kZmMH4lcvHzqPYoe4YSfM07G/WS6N1DKGZIY3BjKxhQvZhHhZUpLTfe6xh+L
Ygtvg+60wpSZCTKD3tyq3C4z8Ui/2hZkiHdjDexEjM5D/aPAClmS9vI2VEuG
p6gKP2QOYp7IYs6iryazpUbbSbfH6OneRGPLiy2xtyO140i9QeP+lhuadSFS
iB8tRzxogcI1uWiloSOMKffPa2ScB7vTvOF5UR1Uqcim0CPRs75UhC0KXhNp
0GEXsiG4LPLTU1UrTXPJIx/j71vQjbnMUz06jHmM7pg1JKzbMlN1qmaz5Wi6
WtETREMy+Nv6vWPNBs0mAw+aSrayElSFWvEOrI1NsCB6uVlLZaJ65qFO937H
e+6Nz2z82dytjzrTbh44udX9UBydbsGld8seQN7Vcf/w+kB6QR3W2rEAhyOF
nD5fAJCM1/ZefwXAI4njKDUPoDSdM4yL1LNwzFa/DykARhbX9lra2Zf2qIgo
96pmbs9iX8sWynae8z9RZ38f39083NgDZ+HtYw3SYLOQ6nHVU4teGj331Asu
qJq3d+cJ20SAnoOzTope9IDGnSzHM2ITqd468f5iMZZwaKWO4QsbGmy6HltY
lD0IR7r2Pf1M6v11T0TvRd8EcOvmbJavAcjuOvrUnrxu2PXgKSN5btcT3xpL
2g853eueDY+bf/fauuVAHQC0yTU2kfppbvXFkm1kec+7bpqZSn7/5f3lZVzZ
AKJmKbanyXo6wJUuK6VDA39eqQ0eWgOwgV9pU9tuKszg3b8pRX+IRpPdfDjo
2DZqk2bv0V1nAWTUtxzJ957XnqHRqfVJu0zmL8vDh7Lg63jF7/Ntv83X+nXs
xaskz5yJQ8YSVMK1ZSY/z/R5/RpC5ipuz88clO/axW3+6qjsDsmj3ZdiO90s
jFMFn4bTlfbVnRwqbgOHhSErs+T9LEbfV9tesbV4a/zh3UbS9t4eb8HEVM2+
wO0ItfnY1ayb1V2Qasp1saC6tjtg5qp5bYKO7Lr4BMFPecKwG8sSlcTDsfZS
qyZnlxpA5C9ybriuT9oTyfZGBdvaW6lfjijlPW9NgBbbddmfHgMoOi/NqKnJ
+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
d93tPQX8T8T6VAdoEFI190XWMwAb78pcyt02EDBySt1QmwmalnkZIvXp0GyV
kDPcQNYHfdW4llKufg83u6vCpL7L0TEK0E/m7doaUnZ5c33qxwtSPBpuRiq+
xVM92eazM7L9o/z0EqUUNoa7bClTOlkXsAnN3sowZ8qnKZ7T/iz+blSKPqAN
fzIf+POv2yW+r+hj+CpFBrSJ7OcWkz1eBjbHzeg+3kIpItLwaYogHkIBiOFP
M7RJmXpgRIjTbVOtXF64A1n/b89NU7cCkC0WivTWIdvLo8CCNKM0GsDuV2En
hqH286FHT5zG4fYzgaI1lgC9dSF5saY06Hx265qAPUDuI/tLarYAfvXX84St
H9N2X7oUM/94b7fqomNcrpzvBf5RvnZTeokPWJpykDKP4kQ4UCyxGl6MS7Ak
EiP7cZXfjbT+M/tYfh7zLxML4GV4FgrH8Wg/+viHhB8We7Nee/XgYmZfNisB
xf2ie56OR+ibqpCazL082ANg+qhImbm7z2hf2w03weNnqOUd1hfFDC6Bc821
zBhdb8hrXXNFw3QcND/NvffMZWJXyce0T6T+0n1yx2OOFg26R2VPHSPlUkbb
mHiZ1NOaY/p3PZ0SRuv7LyX2mgV+ijs3qsZ8hOfEj+nSCs5Sk5L7rBT1JDRg
wLgkbeT9cDar9Z5BgMeFRdYAll1ufmKGV9/v7/BxszYs+VRTruPZpDVMlQp7
bdMre+XpTNHjG3p4piuPM++dcpTpFn3AZR3+hE7S9Q3r19EYjCavL/n55+V/
dox+dZO0hgnNJ7iIRcTkfoWLhPtmXZFz612YakOenvUv2vR4a2RF7tX2Dpga
JZsV+dSJ6vj43GMmsl+kNKs17W4EKGzZ+qL6Wd948Yc970LfAihlTsvYcJGl
sGpxz+L1S8qQFlJFSsiMOINjcRzeQ//dnwULSO24HO1Cx0iunY7S/0UKnpnU
SEdJp4PEiP2ENGFKVzixqfNTFp+3uXS8b/v4xGziEtUbJ1ZcKnzVQElgAEYe
9h1IGdmSOvswMkPRiAP/3e+p/asweWrqJLbg2XgATdbzk38oUHVbG1tfm5KZ
wgMdb9HjzN5Hg4pvB2sXgdj7jV2qD27TZr1/+7r8AcB476lOoUqA7FbDGoaL
AHd7RC8ZG5O8cvhwIWEGINJw8twpTQD7PuN8itEX+PDpUpGg1TkQ+QRX803F
xxXezygwMyL5sNdL+6XGEvT9ZS2Yi+jBp+n2xl58AMvhlfT0NS3/uLyQl/KH
juscGQ9j+Z+fmPwDvEPVqAfNpudDZNbeGYMzS6du9C4ytPfYMEI55CQRK/fS
FVP0KNMoH5AgcRkvJ1yZtqPVaBt6j3KXqs5ftFRTwDLypk1P+MEvGUnZ7mnn
AFiP3Tt4W3NryOR7CVyIaEiF0QdZIi+kS//9KByE4zGFXi+usymxUdm8uLIC
aX6KIbUFlVVL7iDSPjAu/1CytJyJdizf8mJ6nh1NIYv99J4s0t73UnC65RnW
ybHumuAFwfP087NcOes5Aji15k4tOXL10HXntx9jhU7Fx2Vennxuio2wA04h
5PAeUor36On5No/58/CUP4PN8rr5Q0vvrll/fKO0kkq63xeD64cYtQQvS2p3
H1A6anE7wcDooITG53vjuoTsLrWmMqQyTdJe/nXxkOJOiZCDhiE7Nn/kt9jA
uI+YLjCtna3/DxNlYirlMpfl77kCDLfl9QPQmqbleJReeONuy6EZpJcRenxJ
I5fdgn4hKznO3f2SczSaoK1+eguA2/jSWqVnV6jMo1zVB8h+6ukg3FZ75E+r
oVrWLCCfMzSUZecVrfygLWKylmVdA/2CMA5KGlFNnKdo4FV4M7b8k3a1jeDH
qqgMVdCfv1r7gqdndb50Wspit4qYpZ8StTml8lWWJf7H77WgE0iTtKlo/6LS
/4Vf+IVf+IW/CnVSDw9w7Dd1tXqz5fXj1gdg/EqgM+MFM3XKku7FMxZv3/wU
1aBHqAIxEpgY+N25i9/wW/dyEbkgKRRCD4ihBJH/n7Eg35hJzmR99C2pXHOP
d7IAell5bgP7AOanxTnqSQCUz41kdcC7aQ9d7BwX2zeNX7pxoWTRVU8YCZ7n
zml+kOZy3t/2kFgKoOwIT86DAB1+usf2i7TCGZktGxfxvqYuOLxm050NnrBv
a8sKiWVzUn7MnxRnB8dOjoAV/k8O1bU8YBtp6b708mkrAI+7pWu/w8Oqb7H2
oxycRtp3fmgRWkjaVOb/ptL+1yEfXUE3kTwWQivRht/dD2pDOtvfrf8wwCux
CxbFN7AV/og76IRMUy9dkTDHSe1HAw8cUhOBo0lfPN94AKx9n3bHs8KJ9jFj
VpjJyS/wRqJGXOvA9FixC2sSG7LTOk83nXgi2Q0QFewceCQmtuCgbvOx96bv
yp5odKvI6KZf+zGdDhtFNpZvYdmm5abldMB3yR2vQFf3ExGkHG2faXORrCjO
MkC1xBHgmp2D1sITAM887A2vhwLsTNrhtf0SgMzJPrv2pLHB9UQCliZesnkg
IxRB2kG2SAO5ofl4LpqD5tHtJGbSXldHemgGMiT/WiDOr6MvP+P5S6aEIem+
fF1vxoyE0YIdytsXbLfhED/TGTsUN+viPYO71p3OrQ+Y7Y45DrksCuC3TLFf
6XxHf4yvQsXZxms8bZGZ6g0nXZqGhrEjr3cxPPjI0FlTB2Dbs6Y1gfSzurua
W0i+X9i9tCWd9L17iba3ZPjjXvG2tRPzA32Zbd6kf/ttcqsZGS7yrrRdZ2J/
xDuujouk/6RnS+uN2on31bSokL7iu+p2bTI89h1nRx7pG/dtbC8nv/+q+3QL
I/n8UF9aWxT5OaT7SrMF+Xszu0perCZ9hyGZV+6PANI1NJ02+AAc4JKTe0ra
m6+XPzy8mvRX8mw68sAEwIBPXD3agZQ/T43WOzeAkSWf1Qhnki/zpKorO0WM
68+tUJxut56Wf2ij1jYD6T/Us58NxA/7iyXI+mpL33/8G5aJ7RA/LC68if35
6Jum3nGqZKvkhzuDMbQvT2V6h9/HwJWG1+9MBwFGS0yrU6oBVluax4WR7UJQ
b9upRwUvaC4hF64akuWvZlV1ZlaBeFuTVV60Xwal1v4Y4Vocop17Rq3RytNj
f/J54bc71kpQ9rRxywrcXx+34cd0tE37NOfEgmjhMT6L/RVKW8JHN4taSvkd
rpYQ4wo4m8rahXYvCWXPrn13WuSOu8LZVy/v8zsY83hTyzfNn7pTXjrdagVL
2nQOznf0AYtIpI4z8Zrf9RcTpfH3Hf+kfF1BPpkdJrQaM5OWeDFSIySJ2QRi
eMA+xpbO8oBgd3li/Eyy17+oga1YhNRvg1fenpUxud6ce20k6rYuV1+jWsA+
MaEE61ibdP0CiYQz5SPaL6LdJ0bSbDvS3aPGo9oPVKjbqcGh6GbfKNMc6i0j
S9XrO4ISBc57Bwwp99RHNNy+wmIDkNKiUxbnuI62xlPTLFxiVvRkOn0ZCxia
CXUmdUoHkY0vUcpQNvIk/03Mx89Gc7/HIv7JeYY/w19/TgXD95H1b/ht3jkF
LSb/JhHv0cQS8sw/KP60Yzt3vN8ssam+9IKtvHZGltzI1Thfx4nyvxzxyBIg
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
BoPBYDAYDAaDwWAwGAwGg8FgMD8b/wf8eDGa
    "], {{0, 616.}, {784., 0}}, {0, 
    65535},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Bit16", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{784., 616.},
  PlotRange->{{0, 784.}, {0, 616.}}]], "Output",
 CellChangeTimes->{{3.818511517905411*^9, 3.81851151914079*^9}, 
   3.8185680295843782`*^9, 3.818575838489832*^9, 3.8186586469841347`*^9, 
   3.8197854107483377`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"1f93744a-016b-449f-a0f8-9d938e9dc10d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Cell State", "Section",
 CellChangeTimes->{{3.818315533981371*^9, 
  3.818315543149563*^9}},ExpressionUUID->"92284798-39ce-4e4d-8f72-\
326f391b94b9"],

Cell[CellGroupData[{

Cell["We\[CloseCurlyQuote]ll represent each cell (or pixel) by 16 channels", \
"Item",
 CellChangeTimes->{{3.8185117047474213`*^9, 3.8185117323761168`*^9}, {
  3.8185119035684547`*^9, 
  3.818511912182797*^9}},ExpressionUUID->"fedd8ed3-9942-4ea1-84b3-\
88b9232bdd8e"],

Cell["The first four are \[OpenCurlyQuote]visible\[CloseCurlyQuote] and \
represent the RGBa values", "Subitem",
 CellChangeTimes->{{3.8185117047474213`*^9, 3.818511766352598*^9}, {
  3.819785432378789*^9, 
  3.81978543269077*^9}},ExpressionUUID->"ff160c33-be6c-4e95-b5c9-\
59647d33f4cb"],

Cell["\<\
Layers 5-16 are \[OpenCurlyQuote]hidden\[CloseCurlyQuote] layers and allow \
the neural net to learn our self-assembly or growth pattern\
\>", "Subitem",
 CellChangeTimes->{{3.8185117047474213`*^9, 
  3.818511803483989*^9}},ExpressionUUID->"14de067e-7630-4dd1-b205-\
980f225e3398"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Opacity (\[Alpha]) channel further encodes our cell\
\[CloseCurlyQuote]s state", "Item",
 CellChangeTimes->{{3.8185117047474213`*^9, 3.8185117323761168`*^9}, {
  3.818511825310214*^9, 
  3.818511860443687*^9}},ExpressionUUID->"7bccf2d0-d66c-4991-9603-\
bdb524aebe16"],

Cell["If \[Alpha] > 0.1, the cell is considered \[OpenCurlyQuote]mature\
\[CloseCurlyQuote]", "Subitem",
 CellChangeTimes->{{3.8185117047474213`*^9, 3.8185117323761168`*^9}, {
  3.818511825310214*^9, 3.818511865919038*^9}, {3.818511918032877*^9, 
  3.818511927070259*^9}},ExpressionUUID->"bb02116f-bee2-41d6-a0d8-\
9704bb12938f"],

Cell["\<\
If \[Alpha] < 0.1, but at-least one of the cell\[CloseCurlyQuote]s 3x3 \
neighbors is \[OpenCurlyQuote]mature\[CloseCurlyQuote], the cell is \
considered \[OpenCurlyQuote]growing\[CloseCurlyQuote]\
\>", "Subitem",
 CellChangeTimes->{{3.8185117047474213`*^9, 3.8185117323761168`*^9}, {
  3.818511825310214*^9, 3.818511865919038*^9}, {3.818511918032877*^9, 
  3.818511989175035*^9}},ExpressionUUID->"2e48e69c-b34f-4638-832b-\
3ccf0fe3b9e5"],

Cell["\<\
If none of the cell\[CloseCurlyQuote]s 3x3 neighbors are \
\[OpenCurlyQuote]mature\[CloseCurlyQuote], the cell is considered \
\[OpenCurlyQuote]dead\[CloseCurlyQuote]\
\>", "Subitem",
 CellChangeTimes->{{3.8185117047474213`*^9, 3.8185117323761168`*^9}, {
  3.818511825310214*^9, 3.818511865919038*^9}, {3.818511918032877*^9, 
  3.818512011011056*^9}},ExpressionUUID->"1889e217-fceb-4838-8ae9-\
2c759a868a23"]
}, Open  ]],

Cell["\<\
Note the pokemon images we have use the same scheme (i.e. use a transparent \
background or \[Alpha] channel for \[OpenCurlyQuote]whitespace\
\[CloseCurlyQuote]). 
For visualization purposes we can code this using our Moore neighborhood \
function:\
\>", "Text",
 CellChangeTimes->{{3.818512026068778*^9, 3.818512091901619*^9}, {
  3.818512147334486*^9, 3.818512152956897*^9}, {3.818512215520838*^9, 
  3.818512271393649*^9}, {3.8187572747244463`*^9, 3.8187572751641073`*^9}, {
  3.8197854691392593`*^9, 
  3.8197854872028923`*^9}},ExpressionUUID->"41981c75-94e7-4cb7-a4b9-\
e80750700b38"],

Cell[BoxData[
 RowBox[{"  ", 
  RowBox[{
   RowBox[{
    RowBox[{"Moore", "[", 
     RowBox[{"func__", ",", " ", "lat_"}], "]"}], " ", ":=", "   ", "\n", 
    "   ", 
    RowBox[{"MapThread", "[", 
     RowBox[{"func", ",", " ", "\n", "    ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"RotateRight", "[", 
          RowBox[{"lat", ",", " ", "#"}], "]"}], "&"}], ",", " ", "\n", 
        "     ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "0"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "0"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", 
            RowBox[{"-", "1"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "0"}], "}"}], ",", " ", "\n", 
          "      ", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", "  ", 
            RowBox[{"-", "1"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", 
            RowBox[{"-", "1"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", "\n", 
          "      ", 
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "1"}], "}"}]}], "}"}]}], "]"}], ",", " ", 
      "2"}], "]"}]}], ";"}]}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"781cb364-bb34-4155-8583-d29392ea623c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cellStateVisualization", "[", 
   RowBox[{
   "self_", ",", "east_", ",", "south_", ",", "west_", ",", "north_", ",", 
    "southEast_", ",", "southWest_", ",", "northWest_", ",", "northEast_"}], 
   "]"}], ":=", 
  RowBox[{"Which", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"self", ">", "0.1"}], ",", "2", ",", "\[IndentingNewLine]", 
    RowBox[{"Or", "@@", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "east", ",", "south", ",", "west", ",", "north", ",", "southEast", 
         ",", "southWest", ",", "northWest", ",", "northEast"}], "}"}], ">", 
       "0.1"}], "]"}]}], ",", "1", ",", "\[IndentingNewLine]", "True", ",", 
    "0"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.819785496716164*^9, 3.8197855091238823`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"e6fc06ae-e2bb-4c74-9158-207f33010750"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ImageCollage", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"ArrayPlot", "[", 
      RowBox[{
       RowBox[{"Moore", "[", 
        RowBox[{"cellStateVisualization", ",", 
         RowBox[{"Map", "[", 
          RowBox[{"Last", ",", 
           RowBox[{"ImageData", "[", "#", "]"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], ",", 
       RowBox[{"Frame", "\[Rule]", "False"}]}], "]"}], "&"}], "/@", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"generationOnePokemonImgs", ",", "12"}], "]"}]}], ",", 
   RowBox[{"Background", "\[Rule]", "None"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "600"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8185121746075974`*^9, 3.8185121897520247`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"da9a5f67-ce60-4fbc-94ab-86d2bab9d01a"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
nF45OMsRS+Tg9JPMYM7qVUGRUYhk19mLqZ5y2/0sstlJdRb2ykpd3WLsxakn
4+d6EwduxKTsf/mZ6BWZ0lBzFwSnn4R/tX7ya6IzHlPxDAe6h5KNgFRPph+H
G3eFpLO0rHUen61uFfS3yq4fnxnz/VUWOz31s31TBFo9iX7oEXs8dhtT9j8+
a93zUK9RM8T3EHj9JF619YFYC+XRSfWbs070CvppRjw7Q759O/STsX4d+um6
CIqHw91TAG+dngXBpLeQz9zWGL191l7m0fXjr00WZpl9KTvvzGVPZmvV3qWf
rHPS+1DGkr6oWPeCL1W/NV608d65tTxS0H28n4U2n0q9iFJQ2tfreKVRgrT3
pVXPkw+j4YrrMvvdGL11a7JP9x7SNfSzZp8lblZ0ZlIvojg1+sk57eqtiJvV
9RPBqWGWMUrvm2FY16unXSFW6ydbdTHa6eyU9mV2L+6qoLYoTdnDTz2ad+TL
9e+namoNbYVsNpb7BqOra7/sS9XDYlPPMq2GVtvGkYnTLxHx1iqIQao4a1YP
/XSK2vUb3afo1SE+V+r4kJ4Nsn5yOaU2nQwavay8vffx+yuVnZHrB/TYI85k
tmlek/uajeNrzluOdbxOKeVV4aj5rFHvZE3AqKl1rNW1adbjavcstDGJZh/N
Zy08WHfZcrDfvvzs4Q/YsDd6AoFAIBAIBAKBQCAgx39cnAB1
    
    "], {{0, 168.}, {224., 0}}, {0, 255},
    ColorFunction->GrayLevel],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "Grayscale", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->600,
  ImageSizeRaw->{224., 168.},
  PlotRange->{{0, 224.}, {0, 168.}}]], "Output",
 CellChangeTimes->{{3.818512171496313*^9, 3.8185121905382557`*^9}, 
   3.819785516557289*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"df72beff-6de4-4593-9cd1-fdc7b6906393"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Neural Network (Single Update Step)", "Section",
 CellChangeTimes->{{3.818511409735784*^9, 3.818511411335927*^9}, {
  3.818511533012868*^9, 3.8185115406932783`*^9}, {3.818513792697876*^9, 
  3.818513793281996*^9}},ExpressionUUID->"0b13ca31-fcd1-4e40-872c-\
01cc73b40fca"],

Cell[TextData[{
 "We follow the prescription from the blog above quite closely.\nA single \
update step for our cellular automaton can be summarized graphically by:\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsvXd0I9eZ6Kl9+887Z/fs2T92z+47O+/s+u34zdjjOGONZ2fGYfyc33jG
Y41t2WNZli21giV1q7slNRVbVEeRnUV2ZLO7mXMAcyZBMGcSJEASJAESRM6V
qwDsB1yxBgJIdjOAYPh+fQ+7UHUr4Baq6le3vrr3M78//LND/+Gxxx479h/h
z8+eefMfjh59JumJ/xU+/PzVYy8+/+pzz/7o1ePPPf/c0b/5/f8II1/+Hx57
7BoMhIaDCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCILsFyor
K1PC5OfnFxQU0DQdj7XY7XYyoFKpDAZDPFaBIAiCIAiC7G9AXOVhUMrIj3Fa
C4IgCIIgCIJsgiilTElJgb8ajSYzMzM/P1+hUJCPTU1NaWlpKpWKpunMFUj1
7KqZYbEwEvLDGJh04sQJsmQYDxmC4apXWCBMkjcAMpC5YHycKn4RBEEQBEGQ
vUukuA4PD8NHoqZkDCiowWAA1QTDJGNkXyXZ1s8MAyRIQF4LEVcYKc8FH4nf
Hj58mCwZNoOMQRAEQRAEQRCZyhVAMsE8g2GTTE9PV4QBvSSqSapJgytVsjIw
PjU1NSqzrKmylEaJq1zvSkhLS4tccuQSEARBEARBEIQQq4jgjcPDw1Fj1hHX
2MwPFVcw5EhxJctEcUUQBEEQBEHWIVYRI5/+02EixTVyUlRcgZw5UlNJGwJy
8IAcKhApt6SmF8UVQRAEQRAEWYdVFVGlUoGOkqf/UeIKIipPIlIamzk5ORkW
W1BQEBnsCh+Jr8ovZ5GRkS9nkQEUVwRBEARBEGQHQO1EEARBEARB9gQorgiC
IAiCIMiegKZpuZ8sBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEH2FlE9WJGWrBK1
MQiCIAiCIAiyFqRPq7U+rgO+n4UgCIIgCILsJCqVSu4Yy263k74GaJpuampS
KBRy464wifT6ag8DA6mpqaS2FjLDx4KCAjkz6Wwrqi4XQRAEQRAEQbZCZMdY
IKukxwG56wEyQPKQbrPkKlm5xhXGkOgCuesBGBPVSyyCIAiCIAiCbB0ipcGV
OIHI3lrJMAhtZG2qrKnkY2TNKlkCRhEgCIIgCIIg8YDIp8FgAEElH1NSUipX
IN0NyOIqQ+x0eHg4chLpARbFFUEQBEEQBIkTaWlp4JykKlWOdJWJjIONqnGV
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
roS/firtvTe5drO4hitX4U4jVFNndhrNzmWL02R2LuntY2pzp0pfObjcNGZR
9hrrVItV/TPqcf2sl6Y5nhd4mofdK3C8GEqwu8Nhk+Ew2PAvYRs3cofZk+JK
wsUDAdgXFteSxWW0ukwLTo3OOTrnGlnwjExZBzS2wVn3oMY20DHZOWvSBUPN
ZgqwBxmWolmfILK8wPJ8KJH9uI2blxB2XlyLiorADOE8uVNhqhujpKQENm95
eXnnxRXWotVqB8KxAfy+DjTaEE1NTSqVqneDtLe3NzQ0bHQuoKamZnOr6+np
SXRRbRIwls7OTvkQqK+v7+vr2+IyUVzXAn5d8MuUS7ujo6Oqqmrb1/Lo4hqZ
IP+kerK5ubm0tLS7u1u/oIeLnyyu4apWnpc4TmJZifVyTie9aPPqLG6NzTPn
8Booyk3Tbppx0azLLwQhgYj6Q1V+HCtRlORjxVAMpRDu0MUvglOFq17lOlgU
1+0VV0kKiBKxFLVxaNI4MrusVS8OVE9erdOktczeatDcq5vMaZ7Lbl3MuddY
UNFd72Mov1/y0g435XD5HC7K4aYdXtpF016/KIYWKIX31J5lj4or3HuAhVKs
1+TULzsgGWatIxpL77Slb8baB76qsQ/MuAYm7f2q2Q6NacpLeyiWYjjG4bOY
PEsu1uFhnQzvY+GWROTgVpK8T7nC3tuhOy+uhYWFYIZbP9LjBFxHdl5c5diA
sbExjA2Iori4WK1Wz24Q0Mi6urqNzgXAjdXExMQmVgeX+0QX1SZpaWmhKOr4
8eOXL18+dOgQOM/Q0HaGChxajfdOnz+Y4gqHOZxeLof58Y9/7PV629q22mpu
LJsTVzmR97nAXcFg4Yc9NTnpdrl4ATSW50PyyTIi7eUcTkbvpBec1LyHWvLS
Zi9l89J2L2eFJITiCSSQnHA9rcAIlId3eTmXj/OwAhPS11C8ATgs0dhwNexK
GwV7qCGCXS+uIsczDEeplwbUS4NTi6OjelWd9kr91LVG9Y26qdvVmoy6uYx6
Q8Z91f3SwdJF64LdbQFlNbqWZizqecfsokdv8ZmclBUWEtKe0Jt3nBDuTDJU
bb7XnGcvimsw4BdEFm4lHF7zolOnt8/MW7WTxs4xQ8PYQuv4fIfW1a9xhpLa
3ttv7hgzDcwuz1jdFi/r09k1Y6a+Be/8os/g5l0+3gMHICPQoVsaSQzdU4YP
vu3c2h1hZ8SVYoMV3VJxRyhdLzFdK1gsahfJx92SlJJuOXQM7ry4YmzA+lRU
VECZb3Qu0i3mJlZXWVkJLrFjq9sNgLjCTx08CoaTk5PjIa4pabdv5JTICaz1
gIsrlDMMQ5nvTnGNTDarbXRkFG4Dy8rLu3t6FvQLnMCCiHp5u4Nb8AlGTrIJ
olsSfQ5qyUEb7ILeLulpgYJsofayQpGuQZrzuhibxbdopZbAYGmRYniO5pnQ
y+w8eGzoZRKJ1P6Em2VKuJHuA3EN+kOBGk6v1excVC/1jRt6huY6++caWucv
Naov1/d9XK2+ppi9Vj5/rdxwLWcqvWjqbvdU6/B0v8XjnDSNN06XqBZbh2yD
027NIjVvpSw2yuphnV7WBZdAhmFFfu85zx4V19CtH+dz07Y52+S0ZWjS1DO6
XD+0XDVsqBrWV426WsfdzVq6ftJbp1yq6TN2TJiGjb45l7CssQwOLHQMWdpH
bV1zlGaRmbVyxmXasOCeW/IumX1mD+theDYc/rqXWkLbGXGdXgrILyPs2lTZ
HerRdSfFVY4NmJmZwdiAtUBxjTcgrvCDP378eH19PfyNh7iWdw5HOiFx14Ms
rlAmarX6ySef3P3iGkrhp/kulxs8ram5KSs7q7G5dmxywOLUMYKFl2yc5GP9
LMvbWMHOSm7W7w01isVzQU4QWYmlgyA6FOt20RYnbXExdickyumkHA4ahh1w
9aQFViTiGvB/EvuaaCnd6+LqF0WJ5ynG7aHsPboa1ayibbqoZSarTne+RnNW
MXJGMXtOYTjfYvtI6Uq5O/FRtvpanba8Xde44Jrr1ytLBu6UjN8s1txoNykG
3B063+SMRz1k6Rsw9Q6ZRmYdc17Gx3CMKIq79vlpLHtTXOFmThIkHm4ZZq1j
anPX0HLDkLly0Fw6YCwcXCroc9cM+apmhJIptqRlsazTWD9o6TUwaldAN2Hq
7pptajMUK42VI57uSWpwiddpPRP9pp4x65jWOWOhLD7eJ4ZBcY1CYwiJa69m
l/68vXQQNq9ctXPiCkc6OYJGR0dDbS0ia4PiGm8aGhoWFhbgPNDZ2Ql/4Te5
vTGuR19/8/TFax2zFvIRBo69cSIl7XZixRXkedUYBtmx4ySuULYTExNwgaut
rYXSnpubg/Lf9rXEQ1xFQeA4zkN53ZRbNz/Z1dNaXllQXVMyNKw0mPRUyDW9
wQAVDITavxJFQeL4IM0JPtHrCTA0L/CMj3V5GYfDZ7H7zCaPCZKFWrZQZhtj
8/GUGLbWcOMDKK7bQOilOI7leNgHdKumoEmTXaVJr9JcqdKdrtSeLJ98R6E/
WW35sIc6PSaeuTV+Cty1dCaner5M6xpT6mqylZdud717re9IyUJ6k7N0nOod
dncp5spLp4sqddXdy7022uFhvDzPw7VyGzc7ruxFcRV4nmUpl9didi1MLneP
LDb16it79eW9+rJ+Y9aA+S4tdZu8TW3aew2TmQ2awvqp0vpJRedMW/98b/es
UjXdVqm+Uam5VbV4v345b9zdo1purNQWdiy1DTtH5nzzJtbC8hwn8P6903ZW
XMVVCHKWoBHSgHXputLQblgiH3dP8gZDP+AdFldY1NjY2ODgoNFo3EP3qokC
xTXe5OXlXb16NW2F1NRUOAq2uMxIcS1s7gIhfPnVw++dOQ8JBiA1qfUJF9fQ
JoWDFuS0A+La0tICJSyX9uXLl4uKirZ9LdssrqIYFAWWoxmWctMuF+1keTfH
e0WBttkWRkbbauvK8/Kz6+uaRkfUbruXpwQ4Z7KhRkF51ifS9oDXwXucjJcS
fLRAsQzF0jbaZqUsYK0OxkYJbk5gJTEgh7miuG4dhvZ6PHazQ2+0zdaP36oZ
SysZPFU8mFw0eqpEnVQ+8/KQI2WBvVs+9tb11heuKd+92v7+xcYzV5suVPQ0
FHWWZbfdu9ry1pmm357pff702Mu15vxyw4MPlK8ntRypNFS1m5XT3tllygy7
eQ91Qb4XxZXnWJr22N1Go2NmwqgcMtT3zpf3zpf1LJQOmLKGbHdFqdfibm4Y
y6wazqhR51WPF1aNljarm5QalVLTodS2lY2ll6nTS+auVxju9NlbWhcVpVM5
LYaGPlu/1jNtYIworpHUB0vzgrd3eWKD9I6JK8dxJDYA/nL7up3nbQTFNd6Q
l7Pkj9seKgAJbPDUhatHX38z6d2TKWm3ZWtNrLjK4Qpy2gFxJaEC8sc9ESoQ
EMWAwJOmdcBaXbSD5T0875NAZjkHzRi8PrPDaRoenGyobyvIK6qrrhsYGjQu
G+Esx/gExu732jm3A8RV8tF+BiSV4x2M3R52VzdjZwUPL3AS6fAnnIJSjLj6
P50Sray7WVxJW50+H+x/85JlZsE0AdaqGLlc1HeysO/9wuEPS9QnKudeGnVe
WGIfFPYlpSieu9h64kJT0tmq9z6qOp3fqshtLX7Qev9K09un6596R/mbN/ue
KtTfyJq9dqLlj0cbni9ZKG1ablG7p5Z8RhTXSOIhrhTtdvusZsfcgnV8SF/X
P1/do6vsmy/p1xfNekuWhFK1rW7QWNU4VVA9kZ0zllY0eq9yqLR1oqVb0wt/
G8fqqqdyK6fu501dyZ26VKi9VTGb3WSorNNVVGnLBky90+5pf/jtSAwVIFQG
c8EMx4ODuzPVBItg89xBxw6IK5zZjEbj4ODg2NgYxgZsiPXFFX7AmZmZsePX
N0mVSpWUlJSenm6326MmrS+um1vdLmcHxJW4a82gJlZHEyWuWdXNoKmRCg1b
CGPkjURxlZNfFP0C72V9HsbjpG1O2srwPo5nwq260jzntlrteoPNZnI4bW6G
401mi3JIWV5dUlScq1S2zWp1XpiZFn20RNGhtrQ4TqK5UL2rF2SWhv9ZxsfR
Xg6un6FaV9EfjO0oFsX1kQmE+nQVbK7lRYtudmlYY+grGjhT1H+2sO9cUd/p
suF3FNoTDabX6w1n6ucv3ev74Gpr0vGG356oe/aU4p2U6jOlqsqc1pz0umtX
mpNT2994q/Xpwy1PvN35h/e7Xro0dPLq8OmLnWezx+73mvsX3AuSIOyh54Z7
UVx9cKvotSzbZ+cto4P66r75qh5dFYjrgL5QT5fbglV9y4ouQ0WTtrh6Mu/+
2OX8kYywuLb2avubx5rqR2pqtUUKTU6O+tKDiZT745dKpjPbl2trZkpLJ/J6
llQa19QnTdKhuIapCOYUBTPjtPCt0xVsDourPd7iSmIDBsL92+6hY3yXsI64
wnk+Pz8fZCN20vommZKSAjsR5gVNjZq0jrhuenW7nHiLKwjhy68eJhGkx944
EaWviRLXjlnL0dffhA07ffHajdyS986cj2ykC8V1DXF1Oxirg7EwPMXxbKip
K4EXecZscurmrHaz3WV3saETpd/Mm22M2ebQT0wMtTa35OTm1ze1jo5rLTYP
y/p5zs/xAsNxYKwMzXKUQHtYys1K4XZHH1Vco0BxlUsiJK68xbG0YNJOGwY0
+u68/g/z+04V9KUU9Z2rGH6reiap2ZakmP+wRPPRnd7kNOXJl+t/8Vrtb08p
3k6pPlveXZndmnWt5tKV5tOXO997u+V3rzT+9OXGJ461PpU+fjZj8tLppncy
+m90LffMu+aDkhTcOxe1vSiuPM+4fdZp0+jYYlfbTFHzbHa9LrNJe6956n6D
OrtenduoK6mdzS2auZ41nXJm8g9vdv3+WcXvckbv9i+p6mebyrX1VZMVZeMF
d3svZvSlFk7fK5vKrVaX1880NC+0q63TRo/FH25Veb0aVzguRYnlqdAdq8DA
AMv54LjleVaUxNDR+Un3FDukvtsvrvCTUFQFy8ohectuespukOFdlMorguHz
ww6IqyiKcmwAy7LbWc4HhlhxhfKH8pRP8o9ukjALzEh2H/xNSkrSaDRReWLF
ddOr2yvEW1xJhMCpC1dBC8nAbhBXSE1qPWwMMWow2CsZWfIbZCiu0eIq8j7e
S8EfPycEODHISkEOznCCX2BEwS14nYLLK3gpwePzO6mgwya6PJIvABl4ifUG
JIa2GKdV3a0l5YUVVYq+4eF54xzD0zwtCR5OtHtFDysy/nD79lKov1FI0eIa
ih8ItwpL8MOqeQkunEw4sYLIQ55wV5dCuE3YAyyufgn2l8tnNbsWh+aVHZrq
jO737vS9dXviyM3RV6+0/vFKy+GrLW98rHonre/kuz2/PdLzz3/X+udfrv7s
Yx//yf9+/bNlkznZgzfSlGfONr7zXvXrL5Y8/VTBv77a/szrHS+ktJ6+2nYx
byS3TtswadWZPGa/xIHTrLkpsNeEAMtQHtrhA/+CRDkg0QxoDxNqLM0f6jtY
3KkeZveiuIIfunw2nWVq0jio0lW1zOXUzqdXa25Uq28o1LcV6oy6udzquftF
M+nZ06kpUy8k9T77h5rf5Uzc7zf1dCyqWgydtVN1ionyrP7L9/tTc9TXS9UP
GiYVjdONzTrllHXO5HXAfam0rriGOh8ReB/r9bJuN+NwUlazZ8lF2fhQcCzH
hXpY4wVR2LEo2e0X1wl1MO36bk+NTcGdqnEF53E4HNtZwgeMWHG12+2glyqV
inx8dJOEWWBGmB32YHJysryESGLFddOr2ysUFRVlZWUVrpCRkbH17yKLK6gg
CRwlLbhmlFSDx+4ScV0/xUlc29vb7969K5d2dnZ2aWnptq8lHuLKCBQj0iCu
kHyhNq98UoDn/Swj0ZTopkQnI3oY0e2RzG5peYGz2Xh3QGDhH+PzszTLsb5w
b7Aeu8s5PjXV2FxfUJjf3qLUjGs9RrvoBcH1hwLtwtIFThoIt29PUqg+R5RA
SMVwo+kETqQZ0efjXV7e5eadtOALdewV7h8hlCWwE6937V5xlQQ3Zbe6jOOG
/l5d692eD2/3v31t4tnLo8+cav71meZnPmp96XLvkbSR42/1/fKV7h99r/3z
X6/788du/Of/5fZ/LdYU5I5nZQ7eudpx6VzDmaMVhw4VP/Fy46+ONv/+StvZ
Gx1Xc/sL66fatLZFs9cuSIx/bXGFDRE4wUO5bR6z2bO87F6at2nnrJN0KF6a
pvhw4qjwm0E7UV+3F8WVYn1uymVyGQ32+Ymlvg5jfuXyudyp0/dHT+eqPyrQ
XFQs3aow3CjRXSuYvXB95uj7Qy890/ZMji5/0DU+RU3r2Pn26b6mqZaikbS8
oYt3Bs4Wj97unG7o0Ha0a/tmrUYHzQoBAdI65U9zlJf1Wn0Oi8++4JzTWicG
jJ06hwaOSBhvo+0e1gP7EX522/jF12H7xXVsPGSG8Hd3YrOFNq8+1P7MjoUK
IFvhoS9nbS5UAMRVoVDEuutDX87af+JKymFwhYaGhu1tDgtKrLC5K/Qy1Jnd
VeMqt4h17I0TWdXNOyOuUNSNjY1yaSuVyurq6m1fy/a/nBWqThEl+C8gsgFh
mV2w8xbWz3EBHx90SkFbMGgNBh2i32rnZs2sts9nnPNagl6vRNEMyzt9ksUT
4CRJJB0ShB72iwLPzc3oO9u7i3JLaqvqJsYn7DYrWBA4ssjR4bVJRFxBQ/lQ
h+scH1Za8NtgQKIEu4c3W5l5MzO3xM5YWKOb83h4r0/0cRIvBmKCDQ6MuBJ8
jNfhsetss1MWddbg5dvD752c/Mlbo997senvj7R8L6njifPjv/p47qkTQz98
qetb/9b9Vz9s/dJjWZ95LPdzBXPVJQstVcah/PGGzK7is43H36p+4rnyH76q
+HmG8kJu153s9prGsYFFt89K+2g/Bc6z1jbwAvizz+gyzdn1I8vD/YvdtdNF
FVPZYKpuxrPgNizCTQtlp3hKDOxEA/h7UVxhP3ool9VtXnLo1cbBVkNu0Xxy
9uQH98ZO5kyeytOerVi8Xm5IK5m7lKs7d2n61XdGXnyu85l703fbTaphcFfv
TNf8RMdsT9n47cLRqxn950vHMnpnm3rn+vvmJxdsNocv1BUIIzCiCAdodHvy
/tBjED/cZXhoz6LTuOAwDC719Bja2+YV/caOeffsondxmbI4WZeX84rr1L1v
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
XlAdHw0/IoryzuoXRmcmC3uL7qvu3+q6cqXufGrp2Y/KT7+b8/bbt95+//bJ
srqKju7O1vbWppZGuKA0NjbW1dVVV1fD9bS0tLSoqKigoECWTBgPU5uamlpb
W8G4VCpVT0+PLJkTExPgXTMzM3Nzc3q9Hk5l4Lc2m83pdHo8oNo+lmX7+/sh
89bLlohr0Xh68cT1R0/lk3eVC229S72PnroXu+p1VVFqun6qni0tV5ShuO5R
UFzjDdyowvabV9j2Ll/Ja1kkgSteychaS1zJI/tY4iGuoKlHX3+TvDsGRG1V
/MQVynZ8fFwu7dnZWTiBb/tatrvnLAkSiCvHi5Qo+kTBxjhtjNXOG8NvRbFe
xuelvSvBq6TUFkTJzAgcL4hBIbi47BrULHrNPO/w+/mwuIbqc7gABwYqfKp9
q5WVGpaWLTY7eWUHrlcajbalpbWgsKBD2a6ZmXbTPiEYEIJ+SHxAYESPF/yH
ttkZm51zeHgvIzIHV1xhe0QJbiYYH+VxOl12W+7gx2nd7z9d+51/q/3Gy+3f
f7v7Hy+OPPHx2D9fn/jJvZGncocOHRn52kuDf/Wk8i9/3vHXf1A+d7I/qWjq
eqOmuks7+GDi1IWx33z/7pf/KePr7xceuVx52uNysG5fEM7Kn+5FBy6adpfT
bLc57W673WGzW2f1us6R3mt16a/kvvp0/q9/W/DLP5b/4bDi+V/WP/H7lt8n
9X94byafCsIdjttCW/mYAMttZy+KqyQJHAsGYrfYjRrjeOd8c8V03u3x81eG
37kz/sF99anKudQaXVr7TEnbdHGl9uP7o+9f6D2UMnDs/NDbt7puPlAWlg7W
FA2W3hv+OGPkwscjSbcHz+X13huY7jaZjQxFw8En8iy4MR86WrkAH+AYwe3x
2ez2ZdOy2Wyx2GzdU/1NY+33uu7fUN5Ib7n0yofPn61461L12UulV5PvJ79z
9733PzrZPz04Mz9jWDJYLBaHwwGFDBduKAoQp23vFHi7YlxRXJE4geIab/Ly
8q5du5a+wrZ3+RqZYvurihRXEgoLCZQSssEAiUGN08tZJJV3Dke2ghVvcSVd
vsqlTR54bftatllcpVDDqjxpUED0s6KfpoVQE6ySl5N8gp/iJUqQ6EDoJR2R
KCgvMXbGrXGZ5h2uZRvncHBeN0d7aNpLsywLzur2uX0UFXodRBD9QUEQRVi4
P9Ttq+APJZGC0y6YbejlrCAYcehF+VDTScKC3tDT01deVl5bWwdXL5PVTPt9
RlFn4ZZcIK6sHcTVK4TE9ZOeYw+guIZ9nWM5iqItVtOSUd81rapVVyR3HTvW
/ruf1H3t3xr+vz+2fuednn88O/iz273H83rOXen+xYcdP/556ed+UPhf/+zB
X/3gwU8OZ73zel7y20VnXq14/oWaXzzZ+He/qfv20YI/vFNwdHpmymwyBuGC
SRL59qzfT4tuh89h98zr5ufmFuYM+u6J/nst+e+Uvf+7rGd+e+/Xv33w5O8U
//y7+p+8NnDsSP/xI71vpqqvdDv6Z71zLs6FNa6rIoJWsrTDaTPbjLPL2j69
qk5XcWvso9TBpLSR926OnSyZvaCYua6cVqi0la3ajPyR5BTV70/3/DG578jF
losf193LUGbf6rz3cc/la30p6eq3bg2fedBzUznZrFuYdrgdrMBJYjhsnLTs
wPo5SgDrtFis+kX9otG4ZDK3jKuqhxpud2akdaSlN186lvryLfXp/Jk7zUsd
ZQsV9zUPrmVdm6f0cFbYmZbNUFxRXHc5KK7xJt6hAiEXzQ2lq3ezj71xgjyg
Xz9UgFhr70pvVnEKFYiq15U7e8VQgRhxDT28XxHXQCjRAZaDCx4D1ioGfFKA
loJMIPjvIayMEDTR1LB9ccpqWzDTHo8Y5IIM5aMpMFea4Win1+mlfCLnFwVJ
CvKcIDIc6CofkDi/xEMKt331SasCYEcBuK76QXJDr11J4ebSbVb72Nh4fUN9
2s1r9yvutA402nyhUAE776AEHxtqpikcPOuPY7tYu1Rcw7BhcTVZjPrFufH5
SeW08trAufe7jny3+qs/rX386Ya/P9b54/f7fnar5+2C7qt3VC9eaP3Vzwr+
7NtZ/+U/3PzsV9K/8ctrL//6+ku/ufXik9m/+kXRT3/T+c2n277zYv6/vZbz
Qs9Il3Z+ysfRLB+OJibxqZQkeUW3nXLavNOaaa12RqPTNQ+rPq7NOF6U9Ov7
T/327q+fvv/kb2t/+JuW7yZNvPfG6NtH+l4/O55SZ26ccms8PIYKrA7Ph8TV
63N6vFaHa8lgHZsydhRP37qpPpeufjtd/UbW1KlCzYWWmazO2cIRXX2FJv38
+Muvd7/8Yvsrr7cfeaf96LHqo8dqjh5veOPN5jcujh473/t6css7l1vO32r9
+G5XzoP+snmL0WAzexmW5kTaK3pcrM3qXlq2zi0uafULUwvzdT3K0o766/W3
rtRey+y6eOLjF7Ot7xXYriocCoW5WqGvTs++vkgv+ngvL+5EX/bb2KqA6BdQ
XJFt58GDB7m5uXkbJDs7+/79+xudC8jMzNzc6srLyxNdVJtkJ2NcwVoLm7vW
EVewR9KJVUra7d6VjlnjIa6wZNBjkmCrjr7+JrYqsL64CqLICwLFcz6OC7XP
yooUK7FC6J2tkG6GM8kP/b1c0EoLOq/PTFMsz4iiAFMYwccIXkHySf5QI1lc
qEI15KBiMFTtynOBACuAEAdoFpI/EKp3DU0P9UoQDBus/xMXFUNJCjWT5Wd8
VEbGzabeivuFGRMLagfrdPMeRmB4sN+DLa5w2fJ4vQ6H2W5fMpqndUsDSk12
6diFp1t/9OvWf3ii9euHOr59RPX9jOFXqtWnFf13bncnf7P2L/+L4nOP5f35
/5T9uS/e/+JnPv78f/roz/+vK1/6k7Sv/rj+a/+95mvfuPv1v7v5t0/d+dWz
WX98rSzlbleZZnF+2eEMvx3HeRyMyeBcWrCPaXQD6qmOkaHi1qbz2Rmv3jzx
6ytPvZT7y1fLnnh15L8dnv72+4YPPpw/naq5kqG732HpnPHMgvNIKK6rwXE8
LJCmXRTl8HnNNsfUormnSpd5d+rC9cm30iaPZqo/yJs63zybodTlTs13Vs3c
Pac5crj7lWdaXn6l47ljqt8/W/67P1T84fnqV16pP5w68lpy95E3G4++W/Pm
B4q3k2s/OtWQpl7UaZf1Th/thePTI7ocTKjvCqN1dtE4OT8/PjdbrVQWtzSk
Vd+6rLia1Xvhresv5nnfKfRcLHOXVttq641NN3JuLNFLsBM5cSc6Wjog4jox
NQ4/p9BWorjuNSoqKjwej3+DzM3NqVSqjc4FwOrgtLa51SW6qDbJDrQqsOqz
+FhxJYEB4JBk4NgbJyJf5oprBwQvv3oYX85aM4UfuouSyIu8j2M8HCNyPIir
jwmyQlAMBFlIoYzyDEEPG7QxkoHmnTxMYcM1sUFW8rGSVwpQgSDNcaHeAkLX
jSCIqz/U4BYfDDBCgOYCPgYSzBIKGwg1weWXtyFIuhWQQiEJoRFSgPXSWVn3
ukcbs0vujS1MgLj6eF+o2wNJkPsvOJjiSjOM2+Nxuyxul8lum1k2Dat1pS1T
N19Q/utTHd/75/a/fqbjGy8rv5M5+kLD9MmmobL7fdceb/76/1z/hcdKPvdY
wWf/t9zPPHbtTx47/Z8e++gzj1388+9Wf+W7lV/5/O0v/GnaX3zt/ONfv/C9
b6U9+54ibWBGPW+22L2cy8k6bfTivE0/axnRzPWMTzYM9OY21J3JuPvytRO/
Tv3tqwW/OFb1s+Pa77xu/Fay+cNzSx+l627n6Au6rN06zxzF+3ag+fq9KK7B
UMyyxPMczdBWh33ZMr1o7F009erN3ZVTdzNGUu6Pn8hRv1cxfbF5/o7VM6Z3
DUw6u6rMV+4Zj34weuRo9+HDqmde7fr94b4/HO8/lDr4Vmr/mxd6j58fOHJ2
+NWzQ0fODr32rvLY+8q3UzvvXesq6tFPtWtGavq6sjqKLjdc+bDm9FvV759X
pl7qunin/9q9wbRsdcob6S9+PHPygf56k72109HTY+3LKcyRQs0th+4mt/e7
r8oBEVdOWrkLQHHda2CoQLyJt7hmlFSDfIK7vnfmPLholB9GiuupC1dv5JQQ
yyXRsGCwsvRur7iGOvPK/fcYBjDkqD4IUFwjxDWUeCHUvSMbSnA6dYt+mpOC
rBiKCgD1BJnk/aH2BBwM+Itz0eewsXYh6AjFEoif9GbPcUGWCXgpyUNJYqjl
HIoXXaJIheIQuABc7UOhAf6AAB+lgBCKq/2k/atQpwWSP9RbusBQQuhdaJ/E
iS636PFOT01dv56WmXOrvr3W4rNQgpfzM3Ax8odm+oSDKa4AfHcf5XO6nUtL
4wsLvROasnFNkVpXlN3/wXM1//Ri/bdebvz6+x3//Vz3k/PWeo25WrlUUGW4
/sLU4z/s/Op/LPj8Y1n/72OZ//dj+Z95rPRPv1v+1z8s//qPi776w6Ivf7v6
C9+o+OLXi7/6l3lf/tKDL33zwZM/ynrrbn9d7mDLnSbFzbryf0n7xXcv//fP
nf+br1z55rfv/ehXBU+8XPHUa61PHFH+9A+9P3i6/3vJ08kp06l3Z+/Xmxq9
fh8bbgwWm8Nai1B0N89StM9kMxuWNbOGnvml7rklVbO2oGTids746Tz1ubLp
S7W6GxpLy5StbcLV3ma7X2W5cG3yZPLAiZNDL703+OKb/c+d6D90dvDE2YHX
z/UfOdd/GNKZgcOnBl9L7jp6quvEeeXVi8rb5erawsGqe20laY23zteefb/q
5InKd863nrvQkXKr71rGYHrGWMprF5//oPyN1OozV4uv5bbkFzQX3c+5Hw4Z
QXFFcUVCoLjGm7h2+UpCBcAJIb386mFQ04c2hwVKWa5a5YWpuMa4khYGdkBc
92KXr58WVx7cNRDwipKPExia57ycKIBlhlTTy0suL2N105ZlyuZgHbzkFESf
BJMlKegPsHSApgJOn9/uhfMrBUsQJDcMhOblAxwbslO4+AkSpIC4Iq7+T4sr
LdC0yHh431h/f1F+fpeq02I1Olmzm7W7OU+4U1o2FGGA4hoWVy/lc7hdc/oR
ra6rbyyvZyyrV51d2Hfug6ZDSU0/Pd70395V/vRU9y+Vc3fa5+80LWZULV47
p/vXF/p/8Hjl418q/dLnij73/5R89v8o+9Nvlj/+7fLHv1X6pX8o/eL3yr7w
rdIvfq34y48Xfunx/C9+K+vH37v3zNuNKR80Xn6z8Pzx3LPfv/L9b1z49ufP
fO2vLv7dP9z+/i/y/uW5it+82PivL7X+7JDqZ891/+zq7LU7ujvlCxVd5m6f
SHF+Tgrvr+39+rHsaXH10h6DdWHKoB6a6Z2Y7ZycbVfPdUzMKyvUOWVTmYUz
VwpnLpdpP25eyh7z1U37uvXUaONiTt70pcLFD7Lm3zk3/MKHA8+/P/jGe0NH
3h558VTvKynKIx/2Hnl/8LVLo4cvDB451fb6h82vJzW8drzq6CuFrx8rOfpW
xZE3y46+UfL62ZoPUhpOp/Wm3Ri8mTZ06bLy0tXGtHsdD4raSlPTLjR1NFpt
lnA3yzvRGG8QxRXFddeD4hpv4trlK2lvCgaS3j0JrghSCvq6lrg2qfWQTZbJ
qCrQuIYK7FirAnuxy1cirqF+qwSREyROBIlkBdHF8QYfa3UwHk7kwkGoTr/f
KrHzEq1zszYfiCvnEXlPUPAERBbslPL4PW6/2e03uiGzLRBwgFgFAkyQhK9K
YWX1k7DWAGnJCpTwk5edQw24BkCebU5rd58qryh3aHTAx7gZgWYFWpDo0KaF
uuYi8hvwBwIoriFxpWmH2zM629c72VzZlV6mvFLW8XF1963mwQd3Ot8913ro
XdW/nej5RXLnb1L6ni0xJNeYLgw7a4vmLr7R/fPXuv/p1Z4f/VP9l/+24rNf
qfjqlyu+8mc1n/9c9ed++v+z9x5AcVxpw+7e+m/dun/VX3Wr/vuF+urb+327
a8uylWXLcpIc1mFtr1eWd22v43qdZOUcAEkgoYAQIAmEJDISCETOOec8QxrC
kAcYJsfOYWbu6W6JZUkiDTDoPHUKjYZOdE93P33mPe8bteGdmPUbkta9lrbu
w6x1b0ZteDVw03O31z7tt/Zfz6/7f86sX+/x7LpLz61zW//i5S3v+r75ccSO
L1K//iL9s68y/7q/8PCxYqecwcKy4UqpsmNIP0jRBFfcQjhSdsZxxZUgcTNm
BOIqHWpv6msQd5WKpIX1fEuVRCZKQiLbvSM7rsZ0eWUNB9Wbkjqxsn5CXKdO
KRq+V6YKyB32DWw95dt47KLoxLnmQ6c7dp+r33uh7MClukMejUf9mw/7iY96
lp+8XHLqWN7eg+l79zzYdyTxwOm0Qy5JR10STlzLueJX4BNWG3ZPFBnVdi+2
IyazJ7tsqLLL0Nur7k/JSAF/NS+ui2GttoUTV67MQX0NFFfIggPF1d7YO1QA
mKqgo0Lq1Is+ftPEuIKJhXSvYDIwy9he0IUVVyF0AYg02KpL124GRCcujrg6
ZKgA32iGpmgaiCsXPwpupLQRI+RmQqPHjZy4ct/zmxnWwJDDDDFopPQoZaAp
hKURGxcMQAFxNSNWg9miNLEjRtZqMwKrsrGYzcJLr4W1WhigxCQnn5zGctbF
j64SBliBdxQKZVFxUXJqSptUQlm4wWE4g6IUigFxtXAbxTAWzlstj6ow2b85
grhyhQCae+vrOotTa4ITKm5FFHg/KPFNqgy8XeLsUbjrRPGn+0r+eLxih1vd
55GyYymKc1Iku1gRGNx+KKDtwK22fftK3vkkfeO2tBdeytj8bPHaVSVr3r6/
5vexa9/MWP9+5vq/ZG94P2bT78Ne+O2tVf/u+9T/dfY3v3L6zYYrqzddeu4F
1w1vXHp5p98fv438dnfavv25ew4XHLhU5eFV61s1UteobB7UyTQmFVfZYqHz
fE6Fg4orEHuUQIyofkQ7OKDq6lG0lHXkZTemxNZGRlaHJohvRjX4+Nae9hO5
3B04Gzd8KUfjV43HNFkzNdYq2tpkQbrMenFNz4P8jqBboqPe0v1u2l1HW3/c
U/KDV+P+8M7joU0nQhqdbtdfvFl36UjZ7gPZP+958N2p5D2Xso97JJ/wjHeK
Lr6bUB6T05Bf0Fjaoeno0kplhgG5Sa7D9GYCIWgKnAiZGZncBWdReELSYUFx
XYaAvQp877GWOI24dnZ2TnWpn8YktVqtVCqd6iBOI65zW90i09PTA/7AWc1i
b3HlEgVc8hQKqgIdHTd4f1wBAqFXVoiJHZeiamHFFWwPkGSwMcClR70aius0
jWIokk9TjlO0mcINOKpFET1uMpNGigV3agZhrAhjwRmCYHEzS+AsYbGSljGF
7JU0O0IxKpRSIxS3SPAblBuyZbMCd8VBQzDKhAJBZrnMsezDGlpAaXv7BrJz
c/KLCroHZCaSYSjWxljVmFqDa3SkyUijtIWmuZ5aqxBlx+d+heLKx7jiZj2i
6xhsbuqtzW1KS6y9fyHllEvCkSOxu52T/+6W8fVXCdvejdn4jejVn5tev9K7
M2Dom2FbgMYaSViyULICwZpSGn2u5P7yXfbLnxW+sL5r0697N/4q6rcvpTxz
pHzT/sLNP2dv+S7tzW+SP1wV/sy/B/z2f7n++/889S/bfNa/4bH+/bObPvP4
w4HAw5diPAMzw2Ib41I6UmqGqpoU4mGjXGlSm3EUJ8mx1SfsjcOKK20mjDpE
3afubh2qr+4tSG6Mvl8THF59J6T6VmprUEzTzRu1btcanAN6jgb1ngyTnUlR
+xUY74qwhA4yw4A3qJHaTmVRqzy3qi88p+9m9MAFv95T7t2HLon3eVTvDRQd
vFN/5Hr5WZ8yt3MVR5wLDh5O2eOUfuB81hH3xGMXY048yI1OKU6vaxU3S9uH
DcNyg1xlVupRLUZhJE0KaetQBM3JyWltbV3Yv31SnhBxhemwliHglt3A09LS
Aq7YFDV52ZSpxBUYppeXl7u7O/DJib+dyiTBsXNycgoPDwfzTrq6qcR1bqtb
fIRdCs7rmTwUCCxCVgHgh/eziuIKqyZGro4bnOV1KxjI6rGTTq6XPccFFSys
uIIVAUkGsir06wJVhoOzHiOuNElQBEJiZgLVEQYtZtSgqB5HENJMssA+GS1G
6DCCH9FPmLlqriTNFYvlrqv8gGN2EENlKKLFUBOGMRaS5nITMDRB2UiCC3Jl
uehVBAV3adrGglktLMW0S9qTk1PLKqqUGi1p4wrOgtlYmrXSLEohCIWYKBSh
cWCtzENxfRgmAMXVxourBlUPGQbLugry2tIiqm7dLPb4Ofqbn6O/3hX79dHk
b1zSv/1r4lvvxG39rGbz57XPf9f42n7J2+maEzl611LUuxWNGMSyKvruprXc
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
F377q8tPrQrYsD5088thm9+N2P5N/Jd/S//0p9KP3835/XOpr2xP/vOO1B/u
V8QU15dw4sol4IXiOkcsfMQARqBmzDisHxrUyfrUvQPafp1ZZUR1KIFSNME/
IXInIoWziBnvGZFJBjsymlLvV969nuVxNePM5fRjFzKOn8867pp8CDS3lINn
Uw7uTz58MO3Y0Rxnp/yTboVHL5SfulR9JrDVN0jie11y3kdy1r328h1xcEln
Wedwu40igEM/POPmDdhvBQUFzc3Nj50SiuvMxRXc3MELKK6LDBRXe7N8BmdN
3+wtrkJhLyiuM2wj8pGS4uKsrMzubinFkiRL0sBRLQwQUYqhuIoBXB0BrpOP
Ae/QXA8sQ3P/YTh3BVNwI7y4erBAV/liW/y0wGkJ1iqIIBdQy1VoZ8HsVooC
jRNX0EjKRhA2HNybaaC7DJcblBdXi1WoALt4AQMOJ65Wq5WmaRQzawzKbqW0
dbipfqCuuq8aKKtcN6RHtCbMwNA4wx0IlsIYwsR0yvqqOxt8cr3Op5z52v/j
ndfefuvquje91m/32bjda+12z9UvX37mxYtP/8el1f/i8dy/3tj8r35bXgxa
91Lo5u1Rr/4x6b3vC7/6OPeDt7K3v5L07ltJH3sW+YSV37PhqI3Ebda5D+2Z
GytGXG38oSQpHCMQlUmpNnJNa1KTFMY18CzIBeUwD1PmEjYSoWTKkc6h7hRx
wr2KIO+s85fTnS6kHnFLP+KWdfR0yiHQzvLtcPLRg6knDmSdPpl70q3gyNmy
w2eqj9xuuRkkuXWn48IdqZtb7TlfkV9me07zYBN3HtL0QomrAJCuzMzM6Y8R
FNeZiyu4xSA8i/OxhAhAcbU3T6a4clVooxPHNtfLnsdOOkFxfWzr7enNzsou
LSlVjCisFiHJAKesD3s+WauQYx5YJy+uHLy4MjQtSCuf6ZWzTdpmwbmKA3wl
Am67WdzKonykAAf3viCuDHd7ZHlxZVgbRnDZsVCKxGggzDTFLYqrDMvnfYXi
Oh1cwADL4gRmNOuGtIM9qp4eZS9oOIZgGILiCBAhi4WyWPianqTNhthkwyNN
3R1XMi+4JBz93Petj7y2brv83Guea1+/vvF1n7Wve69++cozWy4/8/Tltf/l
sf5/em/5H9de2hKwZnPw2nWRG95KeOP7gh8+y9/xUf4bW5Pe2Jb43uk8V59i
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
MFghryzw2Cc5qwCKoKIGUXx8fEtzC0mQC6V2XM1W7ptD4KQ0QhkMpFaJyUfQ
ITNuQggEo3Cc6y3lamMB1yS5MgRcMiacE1eGy0LJiSvQV4pLLcDl0BIqDnA/
CArHSNxIYmYCBxtMcWkLWL5TliFJHCdRlKvYBcV1LoDdiGNEt1Ja1VcSKw65
U3n5p/hPvovZ8eW9P31x909fRn74acQ7O+9u+2P49rfD3vg8cseP0V9FlEcl
12VUdNbX9zSXisuCi8M+jvzq92F/XHtry7MBL6wKfv692E8+Sf7mUJmTU835
i2Lfa+LgCHFqUmtBVV+zeLitUy1Voio9aeDrVtiLJ1BcKYoaMgz2abvEg2Xl
vVn+lR5AXO/W3Ipq8I9r8g+quXqj4uId0bVgkV9ic0RaS2xjf6N0pFuLmOQ6
bZ9CUdRZHtuUcDH/imvO+dP5Li6Fzu7Vnn7igIy+zIz+rIyh3Iy+0ozummZl
r1Q7NGhUyM0qmh87aae/SKFQJCYm5uTkLKC4pg/eTh+aRcscDi5TZ1dqi2bR
NMUN6hqxun7mrVHdwMxSXIuLixt4RrumFxbwcQKqA5YPfoLX9ljFigGmw7I3
4CLQ3d09/AiRSLTgJV+BuKZUNo6+HqujSyWuwFRHSxuA1xd9/IBUj3YO209c
wUMxeG4d3dtSqTQvL2/B1zIrcVWr1OXl5ZkZmV1dXQuudlw6LG7wD0FZcB2h
0uDg1jY4bJYRFIKRZpQ0IwSK4CROcfVbCZqrAIvRNMrw3xcDIaQZG03aGJQr
D8s+LK1FcyN5GJzrU0XMJFgOZqWt3LgukmH4pLA4QaAEbmZQjIHiOhdomgaP
6lKVpHygIFJ8y6/C9esHf/wq+sNfYr/YF/f1oaTPf4j56KN7b+yIfucviX/c
n/bjmeyTqaLUIklJ18jAoFbV3teRKc45ke76bfSuLX5vbrj1ytrALVui/vBG
/CfOFWe9G7yvNt68UhfgURoVWJ9RLpOIRjrbNX0jqEpL6O3UWSfwZIqrVN3e
pmyukRWV9WZHNQRFi0JixeEJzWHJktC4luAHoLVGJEjuF3RklkrzO4Y6ZepB
M47rzSa1Xtc63FnRWxNaG3GnOsi31u963Y2zJe4elT7BzRFxXSllmuparUis
a+02DcnMCg1hMFBm2sJlvLPr3xUdHR0ZGTn/5YCDVddQkyD1T+iaRUvpCS5X
FNRqqmbTqpu14jZ968xbu17CWB/J4czEFfiqmWf+V6RpAD7W1tYG7mIasFWQ
KYDiam9iYmJu3boV9Ihr164tbFYBIY0AwPWypxDpuv/godFO16USV7ABwqgx
oQStELoAVHZ0w+wkriUlJTdu3Bjd2/7+/nFxcQu+lhmKq2xAlp+XX1RYNDw0
bCe1E3pcKa42FoGQRhNh0KBqNaoy4yYzbjTjBvDThJtAM3Mei6AkinPjsLhM
ohbGauVKDjA2vgYQMFAujwAFlBc1o2aSxgkK4xtOEowZozVmyoyTGFegHUeA
uAL54pfEQnGdJTRDYzjWpmgp6Ml+0BQUVOu5P+lvexO/PZz8w9GUn87m7nLO
+fk41345nrvfs/h8QJlfUWtRjbRuSKPUmkyDikFRT1NkbZxH/vW/Rv3w59iv
Pk78bOvdd7bcfefz1B++z9ofIo0Ok8ZFdGYm9BRXjrS16wdGcLWeMpvA4eXC
Suz1dz2J4kpTzQqxWF5bMZBf2pud1hqX2hqbKolNa49O77yf3RWX15uUKU3N
kWZU95aJ+qr7FP1KnZL7BgTHERQZ0iq6lP2pbVmxrcn3JPfvtkWezj/rVnzp
SrV/REd8o7m5m+gYZnvlhGKE0CAWjLBR4CGSWaA6sFMBrElIaAkO6HyWA2Qv
IOjOshVXtVb18Ou5qcU1tgiTy+XZ2dngb1Eo5nV/nBUqlUosFnd0dMCCXJMC
xdXeLEKMK3BXIIRHT5wCygoUcWwh1yUcnAW2BIgr2Cqg02U9qidqcBa44KSm
pIIPrU6rs5PUCU2IcQV3T264P0ngBA4c1YgbDRhoejOuM+E6I67TYlrQTHz8
AMnlDrCxpI0r/mN5mJTVytc0wCjCTKA6o06j1/A1DQguyoAiUJxSmymZgVSj
uJHAzASGkDjCdd4SfIoCKK6zgxNXAmsZacrpyohrCbsn9nNJP3Qqbf+p9H3O
Gfs8y455Vzr71124UX3Rp+LyvZrA5IaYms7apt4WjcGAYKRWr+1TyKq6xQ8a
ko9muB7IPbmv6MhLoW+vvfPaqxE7Xo/+NH4wI2k4N0tVXqCuqVa39aEjiI3L
NYFzxdcsLBTXBYL/voORG4eGDQMDuo5+bVuvulUir6vqL24YLG+RV0lGatuV
9Z3Kpo6RprZBcftgo1qv0pt04LEFw1AMRfQmvcqobVd0NQw2P2hJCBNF3G+J
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
AAAAAAAAAAAAAAAAAAAAeO4/bnOiUQ==
     "], {{0, 364.}, {915., 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag[
    "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
     Association["Comments" -> Association["Software" -> "gnome-screenshot"]]],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{676.5, Automatic},
   ImageSizeRaw->{915., 364.},
   PlotRange->{{0, 915.}, {0, 364.}}]], "Input",ExpressionUUID->
  "d61c5f2a-ecd8-49fa-9bc7-a2ccf73c80c5"]
}], "Text",
 CellChangeTimes->{{3.818511423072381*^9, 3.8185115010118523`*^9}, {
   3.818511556501314*^9, 3.8185116007911253`*^9}, 3.818511641084518*^9, {
   3.818511691202632*^9, 
   3.818511692834632*^9}},ExpressionUUID->"05d1d768-d458-4b14-97b2-\
7866e7716e79"],

Cell["Which consists of the following steps:", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 
  3.818511702346891*^9}},ExpressionUUID->"af3cfe4a-fb7a-4267-a1ac-\
75dbcd91401a"],

Cell[CellGroupData[{

Cell["1. Perception", "Item",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 
  3.818512581960203*^9}},ExpressionUUID->"13c0d3bb-6db2-4730-ab35-\
3cfb1a9fe3e5"],

Cell["\<\
We use three fixed kernels to allow the cell  to perceive its \
\[OpenCurlyQuote]local\[CloseCurlyQuote] environment\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 
  3.818512334366872*^9}},ExpressionUUID->"c1586e6a-fc7c-42ef-b8d9-\
d651475ee6b6"],

Cell["In particular we use Sobel kernels to encode the gradient", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 
  3.8185124003365707`*^9}},ExpressionUUID->"bb551d81-2b1b-4631-9c53-\
95a5050898ac"],

Cell[CellGroupData[{

Cell["\<\
and concatenate them with the cell\[CloseCurlyQuote]s identity to give a 16*3 \
= 48 dimensional vector (for each cell)\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 
  3.81851243659704*^9}},ExpressionUUID->"5a999b69-39fb-4d0e-8446-\
5fcf12c536a2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"kernel", "[", "\"\<sobel-x\>\"", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2"}], ",", "0", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"kernel", "[", "\"\<sobel-y\>\"", "]"}], "=", 
   SuperscriptBox[
    RowBox[{"kernel", "[", "\"\<sobel-x\>\"", "]"}], "\[Transpose]"]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"kernel", "[", "\"\<identity\>\"", "]"}], "=", 
    RowBox[{"BoxMatrix", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"conv", "[", "\"\<sobel-x\>\"", "]"}], "=", 
   RowBox[{"ConvolutionLayer", "[", 
    RowBox[{
     RowBox[{"\"\<Weights\>\"", "->", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"KroneckerDelta", "[", 
           RowBox[{"i", ",", "j"}], "]"}], 
          RowBox[{"Reverse", "[", 
           RowBox[{
            RowBox[{"kernel", "[", "\"\<sobel-x\>\"", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "+", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"0", ",", 
           RowBox[{"{", 
            RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "numChannels"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "numChannels"}], "}"}]}], "]"}]}], ",", 
     RowBox[{"\"\<Biases\>\"", "\[Rule]", "None"}], ",", 
     RowBox[{"PaddingSize", "\[Rule]", "1"}], ",", 
     RowBox[{"\"\<Interleaving\>\"", "\[Rule]", "True"}], ",", 
     RowBox[{"LearningRateMultipliers", "\[Rule]", "None"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"conv", "[", "\"\<sobel-y\>\"", "]"}], "=", 
    RowBox[{"ConvolutionLayer", "[", 
     RowBox[{
      RowBox[{"\"\<Weights\>\"", "->", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"KroneckerDelta", "[", 
            RowBox[{"i", ",", "j"}], "]"}], 
           RowBox[{"Reverse", "[", 
            RowBox[{
             RowBox[{"kernel", "[", "\"\<sobel-y\>\"", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "+", 
          RowBox[{"ConstantArray", "[", 
           RowBox[{"0", ",", 
            RowBox[{"{", 
             RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "numChannels"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "numChannels"}], "}"}]}], "]"}]}], ",", 
      RowBox[{"\"\<Biases\>\"", "\[Rule]", "None"}], ",", 
      RowBox[{"PaddingSize", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<Interleaving\>\"", "\[Rule]", "True"}], ",", 
      RowBox[{"LearningRateMultipliers", "\[Rule]", "None"}]}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net", "[", "\"\<perception\>\"", "]"}], "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<sobel-x\>\"", "->", 
       RowBox[{"conv", "[", "\"\<sobel-x\>\"", "]"}]}], ",", 
      RowBox[{"\"\<sobel-y\>\"", "->", 
       RowBox[{"conv", "[", "\"\<sobel-y\>\"", "]"}]}], ",", 
      RowBox[{"\"\<catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "3", "]"}]}]}], "|>"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
       "\"\<sobel-x\>\""}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
       "\"\<sobel-y\>\""}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", 
         "\"\<sobel-x\>\"", ",", "\"\<sobel-y\>\""}], "}"}], "\[Rule]", 
       RowBox[{"\"\<catenate\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", "\"\<percepted\>\"", "]"}]}]}]}], "}"}], ",", 
    
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"width", ",", "height", ",", "numChannels"}], "}"}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.818512467908074*^9, 3.818512471110112*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"9fec43b7-f05e-4128-ae5e-0dbf29d19de1"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"percepted\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]48\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    
                    Offset[{0, -7}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"catenate\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}], 
                    
                    Offset[{0, -13.5}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"sobel-x\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-27, 
                    2]}, {-2.0000000267948965`, -0.9999999464102056}], 
                    
                    Offset[{
                    0, -13.5}, {-2.0000000267948965`, -0.9999999464102056}]], 
                    
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"sobel-y\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{0, -13.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"percepted\"", 
                    Offset[{0, -7}, {0., 0.}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, StripOnInput -> 
                    False, FontColor -> GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{1.1931176618651784`, 
                    5.369028799042279}, {-1.9111110900059942`, 
                    0.7876543721956796}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9761870543713234, -0.216930483975487}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{3.8890874007337035`, 
                    3.889087192318316}, {-2.4500000147371925`, \
-0.5499999343525022}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396938, -0.7071068001334007}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999997}, {-2.4499999999999993`, 
                    6.564749772133872*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"48\""},
                     "RowWithSeparators"], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999998}, {-0.4499999999999998, 
                    1.2057703663103027`*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337035`}, {-1.450000012057703, \
-0.44999996114739915`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396938}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999998}, {-1.4499999999999993`, 
                    3.885260069222087*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, 
                    StripOnInput -> False, FontSize -> 8, FontWeight -> 
                    "Thin", FontColor -> GrayLevel[0.7]]}, {
                    GrayLevel[0.7], 
                    TagBox[
                    TooltipBox[
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/e8/CLAfOHXycsG/yaV2NvPWHn09n/3As831hoKs
K+znRe0r32XKfuAa306vTR477ZVMjcRyDrIduHNoqrn9y8P2x3Q5FzI4sx3w
ns/d/O38afseF2eJil2sB2L57jfb61yyL6p8UH1JnfXApLnXknIOXrOvOfPg
NH83ywGP2px7jctv2y+3deEweMJ8YH9YwG/7/Af2n89wGRobMx+QnL4z1Nj4
sb0cM88F9VqmAzd3t1tV7Hpq/zxDPl/mOOMBjcYLT1/Pf27v98+FT1CQ8QDr
88nhfY9f2AccrlnLGs1wIP/txf741pf2d/N7Z37x/L8/bUpXH4gftsP1xt27
f/e/ub03GKSeI0FJ/Hjhn/3/DmffB5n3JU05bAPr7/3zfKYYguyTOusxdebM
n/vPlJp7gdzzVkfkxXzzH/v/bgp8C3LvfQX2pAcvv+0PfL9vL8g/X1YoMkdv
+Lp/dvtBW5B/1Y4mA/37Zf81vdVRoPAoLz2761/l5/1cp75rgMLr5c64i+q1
n/YHhqRfswOGZ/Ukcf7uKR/3f/3hWb0RGN56/78Xaxz4sN+A63AVPzA+/oLj
6/3+pCQpx+CjMXYA/Irv2w==
                    "]], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-2.0000000267948965`, \
-0.9999999464102056}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]48\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"percepted\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]48\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "percepted"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.0000000267948965`, -0.9999999464102056}, \
{-0.9999999999999997, 2.6794897029117842`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.9111110900059942`,
                     0.7876543721956796}, {-0.25, 0}, 
                    Offset[8], {0.08888888835960684, -0.0197530888015216}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4500000147371925`, \
-0.5499999343525022}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051026, -1.0000000267948967`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999999999993`,
                     6.564749772133872*^-8}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999998, -2.679489702911785*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]48\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"percepted\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]48\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "percepted"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.450000012057703, \
-0.44999996114739915`}, {-0.25, 0}, 
                    Offset[8], {1.000000026794897, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4499999999999993`,
                     3.885260069222087*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.999999999999999, 8.038469108735353*^-8}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.3], 
                    
                    LineBox[{{-0.2, 0.2}, {-0.1, 0.2}, {0., 
                    0.}, {-0.1, -0.2}, {-0.2, -0.2}}], 
                    LineBox[{{0., 0.}, {0.2, 0.}}], 
                    LineBox[{{0.125, 0.075}, {0.2, 0.}, {0.125, -0.075}}]}, 
                    ImageSize -> 16], {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"catenate\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CatenateLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["catenate", Bold], 
                    Style[
                    CatenateLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    
                    Rational[-21, 
                    2]}, {-2.0000000267948965`, -0.9999999464102056}], 
                    
                    Offset[{-10.5, -10.5}, {-2.0000000267948965`, \
-0.9999999464102056}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[
                    21, 2]}, {-2.0000000267948965`, -0.9999999464102056}], 
                    
                    Offset[{10.5, 
                    10.5}, {-2.0000000267948965`, -0.9999999464102056}]]], 
                    InsetBox[
                    GraphicsBox[{
                    StyleBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-0.131, 0.05}, {-0.05, 0.05}, {-0.05, 
                    0.131}}]}, {
                    GrayLevel[0.4], 
                    CapForm["Round"], 
                    EdgeForm[
                    GrayLevel[0.4]], 
                    
                    PolygonBox[{{-0.15, 0.15}, {-0.1, 0.15}, {-0.1, 
                    0.1}, {-0.15, 0.1}}], 
                    
                    LineBox[{{0.2, -0.2}, {0.2, 0.05}, {-0.05, 
                    0.05}, {-0.05, -0.2}, {0.2, -0.2}}], 
                    
                    LineBox[{{-0.05, 0.131}, {-0.05, 0.2}, {-0.2, 0.2}, {-0.2,
                     0.05}, {-0.131, 0.05}}]}}, StripOnInput -> False, 
                    Antialiasing -> False], 
                    StyleBox[{
                    GrayLevel[0.4], 
                    LineBox[{{-0.1, 0.15}, {0.2, 0.05}}], 
                    LineBox[{{-0.15, 0.1}, {-0.05, -0.2}}]}, StripOnInput -> 
                    False, Antialiasing -> True]}, ImageSize -> 
                    18], {-2.0000000267948965`, -0.9999999464102056}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"sobel-x\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ConvolutionLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["sobel-x", Bold], 
                    Style[
                    ConvolutionLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{-10.5, -10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{10.5, 10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]]], 
                    InsetBox[
                    GraphicsBox[{
                    StyleBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-0.131, 0.05}, {-0.05, 0.05}, {-0.05, 
                    0.131}}]}, {
                    GrayLevel[0.4], 
                    CapForm["Round"], 
                    EdgeForm[
                    GrayLevel[0.4]], 
                    
                    PolygonBox[{{-0.15, 0.15}, {-0.1, 0.15}, {-0.1, 
                    0.1}, {-0.15, 0.1}}], 
                    
                    LineBox[{{0.2, -0.2}, {0.2, 0.05}, {-0.05, 
                    0.05}, {-0.05, -0.2}, {0.2, -0.2}}], 
                    
                    LineBox[{{-0.05, 0.131}, {-0.05, 0.2}, {-0.2, 0.2}, {-0.2,
                     0.05}, {-0.131, 0.05}}]}}, StripOnInput -> False, 
                    Antialiasing -> False], 
                    StyleBox[{
                    GrayLevel[0.4], 
                    LineBox[{{-0.1, 0.15}, {0.2, 0.05}}], 
                    LineBox[{{-0.15, 0.1}, {-0.05, -0.2}}]}, StripOnInput -> 
                    False, Antialiasing -> True]}, ImageSize -> 
                    18], {-1.9999999999999993`, 5.3589794058235685`*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"sobel-y\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ConvolutionLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["sobel-y", Bold], 
                    Style[
                    ConvolutionLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"percepted\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["percepted", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}, {-2.0000000267948965`, \
-0.9999999464102056}, {-1.9999999999999993`, 5.3589794058235685`*^-8}, {0., 
                    0.}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 21, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{25., 35.5}, {27.5, 15.}}, 
                    ImageSize -> {225.49999999999994`, 140.82098752332368`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox[
                    RowBox[{"Input", " ", "Port"}], FontWeight -> Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox[
                    RowBox[{"Output", " ", "Port"}], FontWeight -> Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"percepted\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]48\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    Part[
                    Association[
                    "Nodes" -> 
                    Association[
                    "sobel-x" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{16, 16, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$InputChannels" -> 16, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 16],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "sobel-y" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{16, 16, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 16, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "catenate" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 3], "Inputs" -> 
                    Association[
                    "Input1" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 48}, 
                    NeuralNetworks`RealT]]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "percepted" -> 
                    NeuralNetworks`TensorT[{56, 56, 48}, 
                    NeuralNetworks`RealT]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "sobel-y", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sobel-y", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "percepted"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Outputs", "Output"]}], 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "catenate"], 
                    NeuralNetworks`NetPath["Nodes", "sobel-x"], 
                    NeuralNetworks`NetPath["Nodes", "sobel-y"], 
                    NeuralNetworks`NetPath["Outputs", "percepted"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "catenate"], 
                    NeuralNetworks`NetPath["Nodes", "sobel-x"], 
                    NeuralNetworks`NetPath["Nodes", "sobel-y"], 
                    NeuralNetworks`NetPath["Outputs", "percepted"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[], {}], 
                    ToBoxes[""]], ImageSizeCache -> {0., {0., 5.}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.818512472528062*^9, {3.818568030934062*^9, 3.818568032550003*^9}, 
   3.818575839771934*^9, 3.818658648259212*^9, 3.81978553881901*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"c5ee1636-1bd5-4a9f-a087-e5f36618f2a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"net", "[", "\"\<perception\>\"", "]"}], "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"56", ",", "56", ",", "16"}], "}"}]}], "]"}], "]"}], "//", 
  "Dimensions"}]], "Input",
 CellChangeTimes->{{3.818512517918598*^9, 3.8185125334403133`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"eda04a70-5948-4495-bc93-af9f6dff2cbe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"56", ",", "56", ",", "48"}], "}"}]], "Output",
 CellChangeTimes->{3.818512534002686*^9, 3.819785543957036*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"d09685e4-27ed-49d1-a4dd-5b345457d6e4"]
}, Open  ]]
}, Open  ]],

Cell["\<\
Note this part is fully-initialized (i.e. has no trainable parameters)\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.81851243659704*^9}, {
  3.818512488710101*^9, 3.818512501605937*^9}, {3.818512540012044*^9, 
  3.818512540012166*^9}},ExpressionUUID->"b751051d-4ebc-4c60-9161-\
0415b281ef9b"],

Cell["\<\
Also note that we use Interleaving for convenience (and keep the channels as \
the last tensor dimension)\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.81851243659704*^9}, {
  3.818512488710101*^9, 3.818512501605937*^9}, {3.818512540527011*^9, 
  3.818512577191772*^9}},ExpressionUUID->"fa23d721-2303-4c76-a0fe-\
944192264e62"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2. Update Rule", "Item",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 
  3.818512618910511*^9}},ExpressionUUID->"0ee484bc-eeac-4be1-b4a3-\
7bd858757cd3"],

Cell["\<\
For each cell, we then apply a dense feed-forward network to go from this \
perception vector back to a state vector\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 
  3.818512749324685*^9}},ExpressionUUID->"6f0d4eca-bb2b-4e84-a0f1-\
31897f119b52"],

Cell["\<\
In particular we use a 128 Dense layer, followed by a ReLU activation layer, \
and a final 16 Dense layer\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512754849477*^9}, {3.81851279848423*^9, 
  3.818512858154705*^9}},ExpressionUUID->"4a201d7b-bf1a-4c55-aec5-\
bfe4adfd4418"],

Cell[CellGroupData[{

Cell[TextData[{
 "We then use  ",
 Cell[BoxData[
  TemplateBox[{"\"NetMapOperator\"", "paclet:ref/NetMapOperator"},
   "HyperlinkPaclet"]],ExpressionUUID->"37021618-60a3-4872-a602-215563c9b21b"],
 " twice to apply this at each cell"
}], "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512754849477*^9}, {3.81851279848423*^9, 
  3.8185129062302856`*^9}},ExpressionUUID->"4b00f3c8-f944-4267-bb46-\
a203e8895007"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "[", "\"\<update\>\"", "]"}], "=", 
  RowBox[{"NetMapOperator", "[", 
   RowBox[{"NetMapOperator", "[", 
    RowBox[{"NetChain", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"LinearLayer", "[", 
         RowBox[{"numChannels", " ", "8"}], "]"}], ",", "Ramp", ",", 
        RowBox[{"LinearLayer", "[", 
         RowBox[{"numChannels", ",", 
          RowBox[{"\"\<Weights\>\"", "\[Rule]", "0"}]}], "]"}]}], "}"}], ",", 
      
      RowBox[{"\"\<Input\>\"", "\[Rule]", 
       RowBox[{"numChannels", " ", "3"}]}]}], "]"}], "]"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.818512777410714*^9, 3.818512796444355*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"66364680-2135-44f5-8a2d-8f9cecd4ce8e"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetMapOperator", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[
                  
                  GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                    1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    GrayLevel[0.6], 
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]48\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[
                  
                  GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                    1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    GrayLevel[0.6], 
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`FormattingLayers`opart, 
                   NeuralNetworks`Private`FormattingLayers`part, 
                   NeuralNetworks`Private`FormattingLayers`selection = Null}, 
                  
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    StyleBox["Parameters", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Net\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Net\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Net"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Net\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Net"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    StyleBox[
                    TagBox[
                    RowBox[{"NetMapOperator", "[", 
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "3", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], Short], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    "SummaryItem"], 
                    Annotation[#, {"Parameters", "Net"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    ItemBox[
                    StyleBox["Input Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]48\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`FormattingLayers`part = 
                    MouseAnnotation[]], 
                    If[NeuralNetworks`Private`FormattingLayers`opart === 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null; 
                    NeuralNetworks`Private`FormattingLayers`opart = Null, 
                    NeuralNetworks`Private`FormattingLayers`selection = 
                    NeuralNetworks`Private`FormattingLayers`part; 
                    NeuralNetworks`Private`FormattingLayers`opart = 
                    NeuralNetworks`Private`FormattingLayers`part; Null]; 
                    Null], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterLayer[
                    Lookup[
                    
                    Association[{"Parameters", "Net"} -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 48}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {128}, "$OutputSize" -> 128, 
                    "$InputSize" -> 48, "$InputDimensions" -> {48}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`AtomT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {16, 128}], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {16}, "$OutputSize" -> 16, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[452535835], "$InputShape" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`AtomT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[452535835], 48}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[452535835], 16}, 
                    NeuralNetworks`RealT]]]], 
                    Key[NeuralNetworks`Private`FormattingLayers`selection], 
                    Null], NeuralNetworks`Private`FormattingLayers`part, 
                    Association[], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {232., {41.173828125, 45.826171875}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`FormattingLayers`selection}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetMapOperator[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.818512777726046*^9, 3.818512855021348*^9, 
  3.8185680310206842`*^9, 3.818575839857325*^9, 3.818658648325797*^9, 
  3.819785546855335*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"b2f17dc9-a917-43bd-ab69-811960055879"]
}, Open  ]]
}, Open  ]],

Cell["\<\
Note we\[CloseCurlyQuote]ve initialized the weights of the last dense layer \
to 0. This is to ensure \[OpenCurlyQuote]do-nothing\[CloseCurlyQuote] initial \
behavior and keep the gradients low.\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.81851243659704*^9}, {
  3.818512488710101*^9, 3.818512501605937*^9}, {3.818512540012044*^9, 
  3.818512540012166*^9}, {3.818513075713346*^9, 3.818513126426053*^9}, {
  3.818513165727839*^9, 
  3.818513165728281*^9}},ExpressionUUID->"7b09e80d-4e48-4f3d-9989-\
8aaf3e9014cf"],

Cell[CellGroupData[{

Cell["Also note this is the only layer with trainable parameters", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.81851243659704*^9}, {
  3.818512488710101*^9, 3.818512501605937*^9}, {3.818512540012044*^9, 
  3.818512540012166*^9}, {3.818513075713346*^9, 3.818513126426053*^9}, {
  3.81851316582728*^9, 
  3.8185131860991488`*^9}},ExpressionUUID->"d18ee3b6-f67d-466d-b6fe-\
0a7afbab2ef1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"net", "[", "\"\<perception\>\"", "]"}], "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"56", ",", "56", ",", "16"}], "}"}]}], "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NetInitialize", "[", 
    RowBox[{"net", "[", "\"\<update\>\"", "]"}], "]"}], "[", "%", "]"}], "//",
   "Dimensions"}]}], "Input",
 CellChangeTimes->{{3.818513137270825*^9, 3.818513139666483*^9}, {
  3.818513208700239*^9, 3.818513222588676*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"212a975e-e66e-4d9c-bf62-bb7d4e063ba1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"56", ",", "56", ",", "16"}], "}"}]], "Output",
 CellChangeTimes->{3.8185131580497217`*^9, 3.8185131891875563`*^9, 
  3.818513223256494*^9, 3.819785561006103*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"c27ac1a3-bbfe-40bb-a086-48ffc477a6c3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3. Dropout layer (per cell)", "Item",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512618910511*^9}, {3.818513278434306*^9, 
  3.818513290496519*^9}},ExpressionUUID->"ce58bc19-ddf2-4941-ad9e-\
8f0dcc653cb1"],

Cell[CellGroupData[{

Cell["\<\
Next, we apply a per cell Dropout layer to simulate the lack of a global \
clock in self-organizing systems (see blog post for more details)\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512618910511*^9}, {3.818513278434306*^9, 
  3.818513299914135*^9}, {3.81851334343384*^9, 
  3.818513380289859*^9}},ExpressionUUID->"2bf3889c-a9c3-4182-935f-\
ba3194dacb12"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "[", "\"\<cell-dropout\>\"", "]"}], "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NetArrayLayer", "[", 
      RowBox[{
       RowBox[{"\"\<Array\>\"", "\[Rule]", 
        RowBox[{"ConstantArray", "[", 
         RowBox[{
          RowBox[{"1", "/", "2"}], ",", 
          RowBox[{"{", 
           RowBox[{"width", ",", "height"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"LearningRateMultipliers", "\[Rule]", "0"}]}], "]"}], ",", 
     RowBox[{"DropoutLayer", "[", "]"}], ",", 
     RowBox[{"ReplicateLayer", "[", 
      RowBox[{"numChannels", ",", "3"}], "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{3.818513319200354*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"e0850b30-f209-4c00-b7e1-e85575f12ea5"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["0", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "NetArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{56, 56}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {56, 56}], "Inputs" -> 
                    Association[], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`AtomT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "2" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`AtomT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[16], 
                    "Level" -> 3], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NetArrayLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReplicateLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    Association[], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {194., {21.173828125, 25.826171875}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.818513323631548*^9, 3.818568031058195*^9, 
  3.818575839900124*^9, 3.8186586483594*^9, 3.819785566814069*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"aab19536-0cc4-4686-b5de-e30082d2b295"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"net", "[", "\"\<cell-dropout\>\"", "]"}], "[", "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.818513498153348*^9, 3.8185135032338743`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"61573687-1bca-4d28-9aee-5ae5cd85989b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"0.5`", ",", "50176"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.818513500036109*^9, 3.818513503562553*^9}, 
   3.819785569496009*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"845c6332-74ac-432a-9f32-d9620f37ee60"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"net", "[", "\"\<cell-dropout\>\"", "]"}], "[", 
    RowBox[{"NetEvaluationMode", "\[Rule]", "\"\<Train\>\""}], "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.81851342556175*^9, 3.8185134783835382`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"f7dffe81-302e-4a0f-9a8c-c8b434bc9cec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.`", ",", "24928"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "25248"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8185134345437183`*^9, 3.818513437565926*^9}, {
   3.818513470072357*^9, 3.8185134853472223`*^9}, 3.81978557118817*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"2eed5609-97e7-49ed-bf18-9d65af9f6614"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Note we used a constant array of 1/2, since \[LineSeparator]DropoutLayer \
sets the input elements to zero with probability ",
 Cell[BoxData[
  StyleBox["p", "TI"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "c445b119-654b-4b36-955f-bfbebd3b0b79"],
 " during training, multiplying the remainder by ",
 Cell[BoxData[
  RowBox[{"1", "/", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     StyleBox["p", "TI"]}], ")"}]}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "7d4c6000-707b-4177-997e-98daf98362ee"],
 ", \[LineSeparator]and we used the default  p=1/2"
}], "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512618910511*^9}, {3.818513278434306*^9, 
  3.818513299914135*^9}, {3.81851334343384*^9, 3.818513380289859*^9}, {
  3.818659225387384*^9, 3.818659281853856*^9}, {3.819785577146277*^9, 
  3.819785583132578*^9}},ExpressionUUID->"a0f82ece-c985-418c-b8be-\
72f5c931160d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["4. Living cell mask", "Item",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512618910511*^9}, {3.818513278434306*^9, 
  3.818513290496519*^9}, {3.818513388049714*^9, 
  3.818513393641758*^9}},ExpressionUUID->"abbbcdd2-3fe6-492b-82b2-\
a18a20ec271e"],

Cell[CellGroupData[{

Cell["\<\
And finally, we apply a pre-update and post-update living cell mask\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512618910511*^9}, {3.818513278434306*^9, 
  3.818513299914135*^9}, {3.81851334343384*^9, 3.818513398961626*^9}, {
  3.818513585105322*^9, 
  3.8185136014148703`*^9}},ExpressionUUID->"f0773fa0-aff5-402c-8e1f-\
17600d414bec"],

Cell[CellGroupData[{

Cell["where we\[CloseCurlyQuote]ve defined \[OpenCurlyQuote]living\
\[CloseCurlyQuote] as either \[OpenCurlyQuote]mature\[CloseCurlyQuote] or \
\[OpenCurlyQuote]growing\[CloseCurlyQuote]", "Subsubitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512618910511*^9}, {3.818513278434306*^9, 
  3.818513299914135*^9}, {3.81851334343384*^9, 3.818513398961626*^9}, {
  3.818513585105322*^9, 
  3.8185136176795187`*^9}},ExpressionUUID->"17bcd126-8235-40fe-990b-\
ebcd74ac019a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "[", "\"\<living\>\"", "]"}], "=", 
  RowBox[{"FunctionLayer", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"PartLayer", "[", 
       RowBox[{"{", 
        RowBox[{"All", ",", "All", ",", "1"}], "}"}], "]"}], "[", 
      RowBox[{
       RowBox[{"PoolingLayer", "[", 
        RowBox[{"3", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", "1"}], ",", 
         RowBox[{"\"\<Input\>\"", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"width", ",", "height", ",", "1"}], "}"}]}], ",", 
         RowBox[{"Interleaving", "\[Rule]", "True"}]}], "]"}], "[", 
       RowBox[{
        RowBox[{"PartLayer", "[", 
         RowBox[{"{", 
          RowBox[{"All", ",", "All", ",", 
           RowBox[{"4", ";;", "4"}]}], "}"}], "]"}], "[", "#", "]"}], "]"}], 
      "]"}], ">", "0.1"}], "&"}], "]"}]}]], "Input",
 CellChangeTimes->{3.8185136272494392`*^9},
 CellLabel->"In[28]:=",ExpressionUUID->"596743fa-401b-45f0-98df-437219b6596a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["FunctionLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014705882352941176`], {
                  RGBColor[0.557, 0.557, 0.557], 
                  RGBColor[0.33, 0.33, 0.33], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.557, 0.557, 0.557], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}},
                    CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.85, 0.85, 0.85], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   22.23, 18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 
                   7.23}}}]}, {
                  FaceForm[{
                    RGBColor[0.56, 0.56, 0.56], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                   18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {
                   44.25, 18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                   50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                   21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {
                   56.6, 16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17,
                     20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                    53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                    18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 
                    21.83}}, {{53.56, 21.83}, {53.56, 21.13}, {55.04, 
                    21.13}, {56.25, 19.92}, {56.25, 18.44}, {56.25, 16.96}, {
                    55.04, 15.75}, {53.56, 15.75}, {52.08, 15.75}, {50.87, 
                    16.96}, {50.87, 18.44}, {50.87, 19.92}, {52.08, 21.13}, {
                    53.56, 21.13}, {53.56, 21.83}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                   10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                   21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {
                   16.5, 16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27,
                     20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                    13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                    18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                    21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                    
                    "]}]}}, ImageSize -> {40, Automatic}], CacheGraphics -> 
               False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]\
\[DottedSquare]\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014705882352941176`], {
                  RGBColor[0.557, 0.557, 0.557], 
                  RGBColor[0.33, 0.33, 0.33], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.557, 0.557, 0.557], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}},
                    CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.85, 0.85, 0.85], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   22.23, 18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 
                   7.23}}}]}, {
                  FaceForm[{
                    RGBColor[0.56, 0.56, 0.56], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                   18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {
                   44.25, 18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                   50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                   21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {
                   56.6, 16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17,
                     20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                    53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                    18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 
                    21.83}}, {{53.56, 21.83}, {53.56, 21.13}, {55.04, 
                    21.13}, {56.25, 19.92}, {56.25, 18.44}, {56.25, 16.96}, {
                    55.04, 15.75}, {53.56, 15.75}, {52.08, 15.75}, {50.87, 
                    16.96}, {50.87, 18.44}, {50.87, 19.92}, {52.08, 21.13}, {
                    53.56, 21.13}, {53.56, 21.83}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                   10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                   21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {
                   16.5, 16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27,
                     20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                    13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                    18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                    21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                    
                    "]}]}}, ImageSize -> {40, Automatic}], CacheGraphics -> 
               False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`FormattingLayers`opart, 
                   NeuralNetworks`Private`FormattingLayers`part, 
                   NeuralNetworks`Private`FormattingLayers`selection = Null}, 
                  
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    StyleBox["Parameters", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Function\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Function\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Function"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Function\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Function"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    StyleBox[
                    RowBox[{
                    TagBox["Function", HoldForm], "[", "\"\[Ellipsis]\"", 
                    "]"}], FontFamily -> "Source Code Pro", StripOnInput -> 
                    False], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Net\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Net\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Net"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Net\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Net"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem"], 
                    Annotation[#, {"Parameters", "Net"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    ItemBox[
                    StyleBox["Input Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]\
\[DottedSquare]\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`FormattingLayers`part = 
                    MouseAnnotation[]], 
                    If[NeuralNetworks`Private`FormattingLayers`opart === 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null; 
                    NeuralNetworks`Private`FormattingLayers`opart = Null, 
                    NeuralNetworks`Private`FormattingLayers`selection = 
                    NeuralNetworks`Private`FormattingLayers`part; 
                    NeuralNetworks`Private`FormattingLayers`opart = 
                    NeuralNetworks`Private`FormattingLayers`part; Null]; 
                    Null], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterLayer[
                    Lookup[
                    
                    Association[{"Parameters", "Net"} -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 4]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{
                    56, 56, NeuralNetworks`SizeT}, NeuralNetworks`AtomT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`AtomT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$Channels" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 1}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[# > 
                    0.1& ], "$Dimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{
                    56, 56, NeuralNetworks`SizeT}, NeuralNetworks`AtomT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]]]], 
                    Key[NeuralNetworks`Private`FormattingLayers`selection], 
                    Null], NeuralNetworks`Private`FormattingLayers`part, 
                    Association[], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`FormattingLayers`selection}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("FunctionLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.818513627989398*^9, 3.818568031520545*^9, 
  3.818575840354093*^9, 3.818658648797597*^9, 3.819785586883561*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"f0bc806a-544f-48cb-98b3-6271bd40d720"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Image", "[", 
  RowBox[{
   RowBox[{"net", "[", "\"\<living\>\"", "]"}], "[", 
   RowBox[{"ImageData", "[", 
    RowBox[{"generationOnePokemonImgs", "[", 
     RowBox[{"[", "25", "]"}], "]"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.818513678833671*^9, 3.818513711234274*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"a97de355-0d7a-49e1-a661-464d2922651e"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt0kEKwjAQheHgQryGV9CNO/EK9QQRdFUQ6kLceXQdULCllURnJpnh/RBB
1Em+1OXh3JxmIYTL4vnSxOuu6+JtP6c3x9iuVy19uHkthBBCCKF+921/eWpo
g89OYzYNn9ZeEr5vs7Tv8l/f1O/HZqV8h7tf9ksxDWel3oGGbWq/XFfuHWj6
tJd3n4SxtEfSJ3lGjz6OuTXaOOd69nFWm487Tt/n+Uq7avJJxu3LMWpVwmfN
VMv/ET74areV9Hl/fprPsJS7dJ5tlGcb5d1HebZR8Nm1vfPuo1LObNlH5ZzZ
oo/KObNFH0IIIYSQbA+dEajK
    "], {{0, 56.}, {56., 0}}, {0., 1.},
    ColorFunction->GrayLevel],
   BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{56., 56.},
  PlotRange->{{0, 56.}, {0, 56.}}]], "Output",
 CellChangeTimes->{{3.818513679664912*^9, 3.818513711651985*^9}, 
   3.819785591734436*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"d14db609-e3c5-47a3-b424-11cb9f0f8927"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["Putting it all together, we have our single update cell net:", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 
  3.818513745122015*^9}},ExpressionUUID->"76440cb2-8f91-4ac5-8cb5-\
de21816d6b97"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "[", "\"\<single-update\>\"", "]"}], "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<perception\>\"", "->", 
       RowBox[{"net", "[", "\"\<perception\>\"", "]"}]}], ",", 
      RowBox[{"\"\<update\>\"", "\[Rule]", 
       RowBox[{"net", "[", "\"\<update\>\"", "]"}]}], ",", 
      RowBox[{"\"\<cell-dropout\>\"", "\[Rule]", 
       RowBox[{"net", "[", "\"\<cell-dropout\>\"", "]"}]}], ",", 
      RowBox[{"\"\<dot-plus\>\"", "\[Rule]", 
       RowBox[{"FunctionLayer", "[", 
        RowBox[{"Apply", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#1", " ", "#2"}], "+", "#3"}], "&"}], "]"}], "]"}]}], ",", 
      RowBox[{"\"\<pre-living\>\"", "\[Rule]", 
       RowBox[{"net", "[", "\"\<living\>\"", "]"}]}], ",", 
      RowBox[{"\"\<post-living\>\"", "\[Rule]", 
       RowBox[{"net", "[", "\"\<living\>\"", "]"}]}], ",", 
      RowBox[{"\"\<times\>\"", "\[Rule]", 
       RowBox[{"FunctionLayer", "[", 
        RowBox[{"Apply", "[", 
         RowBox[{
          RowBox[{"#1", " ", "#2", "#3"}], "&"}], "]"}], "]"}]}]}], "|>"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
       "\"\<pre-living\>\""}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
       RowBox[{"\"\<perception\>\"", "->", "\"\<update\>\""}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         AdjustmentBox["\"\<cell-dropout\>\"",
          
          BoxMargins->{{-0.07271074755737332, 0.07271074755737332}, {0., 
           0.}}], 
         AdjustmentBox[",",
          
          BoxMargins->{{-0.07271074755737332, 0.07271074755737332}, {0., 
           0.}}], "\"\<update\>\"", 
         AdjustmentBox[",",
          
          BoxMargins->{{-0.07271074755737332, 0.07271074755737332}, {0., 
           0.}}], 
         RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}]}], 
        AdjustmentBox["}",
         BoxMargins->{{-0.07271074755737332, 0.07271074755737332}, {0., 
          0.}}]}], "->", 
       RowBox[{"\"\<dot-plus\>\"", "->", "\"\<post-living\>\""}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<pre-living\>\"", ",", "\"\<post-living\>\"", ",", 
         "\"\<dot-plus\>\""}], "}"}], "\[Rule]", 
       RowBox[{"\"\<times\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", "\"\<Output\>\"", "]"}]}]}]}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"width", ",", "height", ",", "numChannels"}], "}"}]}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"width", ",", "height", ",", "numChannels"}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"670d7677-d892-43d7-8b84-47bc30bdd7c7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    
                    Offset[{0, -7}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"dot-plus\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    
                    Offset[{0, -15.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"perception\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    
                    Offset[{0, -15.5}, {-4.999999999999998, 
                    1.339744851455892*^-7}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"pre-living\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-31, 
                    2]}, {-2.0000000535897935`, -1.9999999464102052`}], 
                    
                    Offset[{
                    0, -15.5}, {-2.0000000535897935`, -1.9999999464102052`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"cell-drop..\"", "\"cell-dropout\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "cell-dropout", "Tooltip"]& ], 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-31, 
                    2]}, {-4.000000026794896, -0.9999998928204116}], 
                    Offset[{
                    0, -15.5}, {-4.000000026794896, -0.9999998928204116}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"post-livi..\"", "\"post-living\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "post-living", "Tooltip"]& ], 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-31, 
                    2]}, {-2.0000000267948965`, -0.9999999464102056}], 
                    
                    Offset[{
                    0, -15.5}, {-2.0000000267948965`, -0.9999999464102056}]], 
                    
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"times\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-31, 
                    2]}, {-1.0000000267948967`, -0.9999999732051026}], 
                    
                    Offset[{
                    0, -15.5}, {-1.0000000267948967`, -0.9999999732051026}]], 
                    
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"update\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{0, -15.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    
                    Offset[{
                    0, -7}, {-2.6794897029117842`*^-8, -0.9999999999999997}], 
                    
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, StripOnInput -> 
                    False, FontColor -> GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{0.21945949285143818`, 
                    5.495619849570874}, {-4.356278721940312, 
                    0.9982541740564437}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9992036090128861, -0.03990172597298876}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{1.4737193366014818`*^-7, 
                    5.499999999999997}, {-5.4499999999999975`, 
                    1.4603218880869225`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.679489702911785*^-8}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{1.473719296596333*^-7, 
                    5.499999999999998}, {-4.0888889424786825`, \
-1.9999998904386427`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489630175151*^-8}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337035`}, {-3.4500000120577026`, \
-0.44999990755760505`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396938}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{3.8890874007337035`, 
                    3.889087192318316}, {-2.4500000147371925`, \
-0.5499999343525022}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396938, -0.7071068001334007}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    Offset[{2.56165398681321, 
                    4.867024640562649}, {-1.95522589507007, \
-0.10650245045530474`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.8849135710113907, -0.46575527032967456`}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"48\""},
                     "RowWithSeparators"], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999999}, {-4.449999999999998, 
                    1.192372917795744*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4500000267948967`, \
-0.999999961147399}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337035`}, {-1.4500000388526004`, \
-1.4499999611473986`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396938}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.45000002679489687`, \
-0.9999999879422959}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999999}, {-3.449999999999999, 
                    9.244239475045655*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897029117842`*^-8}]}, 
                    StripOnInput -> False, FontSize -> 8, FontWeight -> 
                    "Thin", FontColor -> GrayLevel[0.7]]}, {
                    GrayLevel[0.7], 
                    TagBox[
                    TooltipBox[
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQ/e8/CIgfOHXycsG/ya12T/zqd1adEz8goC3av+LQ
CvtcncZpH6aIH2D1UPl15/Au+6kzWKcnBosfOFGklnpu8lH7mMk8u89yih8Q
Nme643nsnP1hmWlMpjvEDpTsuFSwoeaK/WmTRbnT48QOKAhw7O4Uu2VfdNvg
z5c/ogc8JgakRUg8sN8l4LTOd7LogUffz12alPrYftGVq80LFUUP3LP+r/Tl
0zP7prXKk07eFzlwa0t6gv3NF/Y3BY/7/p4lcsDeuGBaSNsr++WMB7aZBYsc
4NsucdT412v71zV8Z6s5RA44OyS+uWPy1n5Z86YJp3YJH3h8zpMnwOyd/TXR
NYzKWcIH3iRdUun9986+zvi3fKuY8IGYP79Mp/S+t59zZ/7rD/uFDpjPPmyf
+vi9fYrL2ekzZwoemHx7qTwDwwf7n+tPCfA7CB5g5oi3AslL/au4U/VS4MC6
Nep6IP3H9W78ujNV4ID60qVSIPP/Ob7INnUVOJD58cZ/f6D9rflB8Rzv+Q9U
TTx4F+Q+JQWznkmR/AciWuO3gNx/bWp1HOcpvgOMZzc1g/y3+ILStRwHvgMV
Gbu9Qf5vvaD9ec8e3gO7wyt5QOHTul9+fspNngO/ysR3gsLvvioDixgbzwEr
xYWeoPCdzHxW8aIT94GPa3RqQOE/J6Ltx9R+rgPZuu90QPHzT0WnI+UN54Ez
7bzeoPjblbHvgk0k54F9D96cPguM33PKtpfkrnEciDn9ZcdtYPxbhq3o4Urm
OFAUdePTUmD6gKQfdmj6KbUDAB6TNBw=
                    "]], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999999999998, 
                    1.6076938217470707`*^-7}, {-4.999999999999998, 
                    1.339744851455892*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    LineBox[CompressedData["
1:eJxF0n8s1HEYB/AvcTrH5dxxcmVJMT+uw1U7aifJb5u5mXFdOpUmW0m79YPz
68acH0VhTVJHao25rVhi8nkwlF1dO+uOlfIjXOFQZhJ3+X7/6dmePXv99bz3
7HE9lyFINccw7NB249NowosJw+9Grhqrivh9jS8ivN4zgVUXRBtL70TSLrVG
WcEET5bYPoqhQpxw4aPb4UyYyscao6k6pIuIaxlcdYREhdiqpm0CSVD7n6T7
jpDn3ukhLp1F1i2FJeEcR5jRkP2LKYuomtIrrOh2gAGBJ72I9Qs5TV667Bfk
AAHqSJmEtIYqvfN62R0MUCVfnL0btoHGB44KWssYUP27me6a9ReliXYra4QM
cJb2RBWUbCLfJfdPs24MSFpXlL2UbCFu7tkhxRwd4tME2vZjRnSN3F/Y/5QO
NiqNl/yrERkq42xjk+mQ77a/xOeMCT1jUFJCaHRQXjmx0tBhQg+rl/IUPfbw
oJV9Xr9oQtgp//raWhqkHRBObB8KxfJ1C1V8Gix83CL8mCc9fmfaDjJzGiZx
L/u7lsvldrDmGTqFO4g9+FnGtoMsrZ6wS6w2YaNpFxhl5dO4e0L2rRkMVJBx
fL/jFvHSa6Z5VCB9GSG85dN+eFRmC2XyGzO4MfmFQC6XArxbZXO4FVLlmEeO
NXQd5OiJfZnrN/cMkSFYoyE8kXrSiUYjw2Du9R+4c4XlHZand0KUt/NP3HuJ
PFbwQfeGcDeRhwSCwpT5/3lIoPW1XMC9SeSxBNH4c8J1rsYRlcoCvpXELOI+
EszYUrMsILt5nvDbV30By5IdEN1WYMAtkJFL2aPmENNEXcKteaJfLA41B2nO
PcKRLHGqqdsMJvi2y7hf6zOWq/hmINHnEnaxcaoIHcYgMGuOcHZRYjBDjAF3
NWwFtzrez2r7rUGUUE/4H0dNrZc=
                    "]], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.000000026794896, -0.9999998928204116}, \
{-2.999999999999999, 8.038469108735353*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    
                    8.038469108735353*^-8}, {-2.0000000267948965`, \
-0.9999999464102056}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    LineBox[CompressedData["
1:eJwB0QEu/iFib1JlAgAAABwAAAACAAAA/v//////B8DKydNw/pN1PlLP2MXr
nwfAzI5zR5w9dT6vSBl4ujUHwIxonU8i3nQ+FmzBFmzBBsAJV1GJkHV0PoM5
0aEAQwbAQVqP9OYDdD78sEgZeLoFwDZyV5EliXM+fNInfdInBcDqnqlfTAVz
PgSebs0PiwTAWOCFX1t4cj6XEx0KMOQDwIU27JBS4nE+MjMzMzMzA8Buodzz
MUNxPlwKLiUegALAhjpLZuKabL+epoq89dIBwAekaaf7moy/+AdJ+bkrAcCQ
4fohMBegv2cuadtqigDAVB3GzgGbrL/bM9bFEN7/vycOHvgZWba/FpWdHyWz
/r+fN5ehMRfAv3+AKMQSlP2/+RhKZK7mxb8X9naz2YD8vx6rJ0QDm8y/3PWI
7Xl5+78J95cgGBrSv93TcEXJsvm/iLhbx9o02b+SoDEPLAz4vwlkSKZPz9+/
9lvLSqKF9r/H/K5eu/TivwoGPvgrH/W/iDxOBqjB5b/QnokXydjzv0zxAcpt
Tui/RiauqHmy8r8OG8qpDJvqv26cq6s9rPG/0rmmpYSn7L9GAYIgFcbwv5fN
l73Vc+6/z1QxBwAA8L9cVp3x///vv6Qj6yY=
                    "]], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]48\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"percepted\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]48\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"percepted", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.0000000267948965`, -0.9999999464102056}, \
{-1.0000000267948967`, -0.9999999732051026}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.0000000535897935`, -1.9999999464102052`}, \
{-1.0000000267948967`, -0.9999999732051026}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.0000000267948967`, -0.9999999732051026}, \
{-2.6794897029117842`*^-8, -0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999999999999, 
                    8.038469108735353*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.356278721940312, 
                    0.9982541740564437}, {-0.25, 0}, 
                    Offset[8], {0.08744250252957908, -0.003491887682205763}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-5.4499999999999975`,
                     1.4603218880869225`*^-7}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794897029117862`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-4.0888889424786825`, \
-1.9999998904386427`}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888946, -2.381768560155706*^-9}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-3.4500000120577026`, \
-0.44999990755760505`}, {-0.25, 0}, 
                    Offset[8], {1.000000026794897, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4500000147371925`, \
-0.5499999343525022}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051026, -1.0000000267948967`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.95522589507007, \
-0.10650245045530474`}, {-0.25, 0}, 
                    Offset[8], {0.07297863893647727, -0.038410740686576225`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.449999999999998, 
                    1.192372917795744*^-7}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897029117836`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]48\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"percepted\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]48\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"percepted", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4500000267948967`, \
-0.999999961147399}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4500000388526004`, \
-1.4499999611473986`}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-0.45000002679489687`, \
-0.9999999879422959}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.449999999999999, 
                    9.244239475045655*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897029117836`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-5.999999999999998, 1.6076938217470707`*^-7}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], {
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    DiskBox[{-2.999999999999999, 8.038469108735353*^-8}, 
                    Offset[13.88888888888889]]}, 
                    DiskBox[{-2.999999999999999, 8.038469108735353*^-8}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    StripOnInput -> False, LineColor -> GrayLevel[0.33], 
                    FrontFaceColor -> GrayLevel[0.33], BackFaceColor -> 
                    GrayLevel[0.33], GraphicsColor -> GrayLevel[0.33], 
                    FontFamily -> "Source Code Pro", FontSize -> 14, 
                    FontWeight -> Bold, FontSlant -> Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`]], {-2.999999999999999, 
                    8.038469108735353*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dot-plus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "FunctionLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["dot-plus", Bold], 
                    Style[
                    FunctionLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], {
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    
                    Offset[{-12.5, -12.5}, {-4.999999999999998, 
                    1.339744851455892*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    
                    Offset[{12.5, 12.5}, {-4.999999999999998, 
                    1.339744851455892*^-7}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    
                    Offset[{-10.5, -10.5}, {-4.999999999999998, 
                    1.339744851455892*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    
                    Offset[{10.5, 10.5}, {-4.999999999999998, 
                    1.339744851455892*^-7}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-4.999999999999998, 1.339744851455892*^-7}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"perception\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["perception", Bold], 
                    Style[NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], {
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    DiskBox[{-2.0000000535897935`, -1.9999999464102052`}, 
                    Offset[13.88888888888889]]}, 
                    DiskBox[{-2.0000000535897935`, -1.9999999464102052`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, ImageMargins -> 
                    0., ImagePadding -> 0, ImageSize -> 16, PlotRange -> All, 
                    PlotRangePadding -> 
                    1], {-2.0000000535897935`, -1.9999999464102052`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pre-living\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "FunctionLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["pre-living", Bold], 
                    Style[
                    FunctionLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], {
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    
                    Rational[-25, 
                    2]}, {-4.000000026794896, -0.9999998928204116}], 
                    
                    Offset[{-12.5, -12.5}, {-4.000000026794896, \
-0.9999998928204116}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[
                    25, 2]}, {-4.000000026794896, -0.9999998928204116}], 
                    
                    Offset[{12.5, 
                    12.5}, {-4.000000026794896, -0.9999998928204116}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    
                    Rational[-21, 
                    2]}, {-4.000000026794896, -0.9999998928204116}], 
                    
                    Offset[{-10.5, -10.5}, {-4.000000026794896, \
-0.9999998928204116}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[
                    21, 2]}, {-4.000000026794896, -0.9999998928204116}], 
                    
                    Offset[{10.5, 
                    10.5}, {-4.000000026794896, -0.9999998928204116}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, ImageMargins -> 
                    0., ImagePadding -> 0, ImageSize -> 16, PlotRange -> All, 
                    PlotRangePadding -> 
                    1], {-4.000000026794896, -0.9999998928204116}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"cell-dropout\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["cell-dropout", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], {
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    DiskBox[{-2.0000000267948965`, -0.9999999464102056}, 
                    Offset[13.88888888888889]]}, 
                    DiskBox[{-2.0000000267948965`, -0.9999999464102056}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, ImageMargins -> 
                    0., ImagePadding -> 0, ImageSize -> 16, PlotRange -> All, 
                    PlotRangePadding -> 
                    1], {-2.0000000267948965`, -0.9999999464102056}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"post-living\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "FunctionLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["post-living", Bold], 
                    Style[
                    FunctionLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], {
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    DiskBox[{-1.0000000267948967`, -0.9999999732051026}, 
                    Offset[13.88888888888889]]}, 
                    DiskBox[{-1.0000000267948967`, -0.9999999732051026}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    StyleBox[
                    "\"\[Times]\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 12, FontWeight -> Bold, 
                    FontColor -> GrayLevel[
                    0.33]], {-1.0000000267948967`, -0.9999999732051026}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"times\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "FunctionLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["times", Bold], 
                    Style[
                    FunctionLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], {
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{-12.5, -12.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{12.5, 12.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{-10.5, -10.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{10.5, 10.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, ImageMargins -> 
                    0., ImagePadding -> 0, ImageSize -> 16, PlotRange -> All, 
                    PlotRangePadding -> 1], {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"update\"", Bold, StripOnInput -> False]}, {
                    StyleBox["NetMapOperator", FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["update", Bold], 
                    Style[
                    NetMapOperator, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.6794897029117842`*^-8, -0.9999999999999997}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-5.999999999999998, 
                    1.6076938217470707`*^-7}, {-2.999999999999999, 
                    8.038469108735353*^-8}, {-4.999999999999998, 
                    1.339744851455892*^-7}, {-2.0000000535897935`, \
-1.9999999464102052`}, {-4.000000026794896, -0.9999998928204116}, \
{-2.0000000267948965`, -0.9999999464102056}, {-1.0000000267948967`, \
-0.9999999732051026}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.6794897029117842`*^-8, \
-0.9999999999999997}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 25, 25, 25, 25, 25, 25, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{29., 29.}, {29.499999999999986`, 19.}}, 
                    ImageSize -> {387.9999985262806, 213.40397662566568`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox[
                    RowBox[{"Input", " ", "Port"}], FontWeight -> Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox[
                    RowBox[{"Output", " ", "Port"}], FontWeight -> Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    Part[
                    Association[
                    "Nodes" -> 
                    Association[
                    "cell-dropout" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "NetArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT], "$ArrayDimensions" -> {56, 56}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`AtomT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "2" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`AtomT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[16], "Level" -> 3], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], "perception" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "percepted" -> NeuralNetworks`TensorT[{56, 56, 48}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "sobel-x" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 16, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 16, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "sobel-y" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 16, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 16, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "catenate" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 3], 
                    "Inputs" -> Association[
                    "Input1" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 48}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "sobel-y", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sobel-y", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "percepted"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Outputs", "Output"]}], "pre-living" -> 
                    Association[
                    "Type" -> "Function", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> (PartLayer[{All, All, 1}][
                    PoolingLayer[
                    3, "PaddingSize" -> 1, 
                    "Input" -> {$CellContext`width, $CellContext`height, 1}, 
                    Interleaving -> True][
                    PartLayer[{All, All, 
                    Span[4, 4]}][#]]] > 0.1& ), "Net" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 4]}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`AtomT]]], "2" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$Channels" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 1}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 1},
                     NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[# > 
                    0.1& ], "$Dimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]]]],
                     "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input"}, "$OutputNames" -> {"Output"}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "update" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{128, 48},
                     NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {128}, "$OutputSize" -> 128, 
                    "$InputSize" -> 48, "$InputDimensions" -> {48}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {16, 128}], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {16}, "$OutputSize" -> 16, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> 56, "$InputShape" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 48}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 16}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 56, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{56, 48}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{56, 16}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 48}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], "dot-plus" -> 
                    Association[
                    "Type" -> "Function", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Apply[# #2 + #3& ], "Net" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[#3 + # #2& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]], 
                    "Inputs" -> Association[
                    "Input1" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input1", "Input2", "Input3"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association[
                    "Input1" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], "post-living" -> 
                    Association[
                    "Type" -> "Function", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> (PartLayer[{All, All, 1}][
                    PoolingLayer[
                    3, "PaddingSize" -> 1, 
                    "Input" -> {$CellContext`width, $CellContext`height, 1}, 
                    Interleaving -> True][
                    PartLayer[{All, All, 
                    Span[4, 4]}][#]]] > 0.1& ), "Net" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 4]}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$Channels" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 1}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 1},
                     NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[# > 
                    0.1& ], "$Dimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]]]],
                     "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input"}, "$OutputNames" -> {"Output"}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "times" -> 
                    Association[
                    "Type" -> "Function", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Apply[# #2 #3& ], "Net" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input1", "Input2", "Input3"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association[
                    "Input1" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Input3" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "pre-living", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "perception", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cell-dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "update", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "perception", "Outputs", "percepted"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pre-living", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "update", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "post-living", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "post-living", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Outputs", "Output"]}], 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "dot-plus"], 
                    NeuralNetworks`NetPath["Nodes", "perception"], 
                    NeuralNetworks`NetPath["Nodes", "pre-living"], 
                    NeuralNetworks`NetPath["Nodes", "cell-dropout"], 
                    NeuralNetworks`NetPath["Nodes", "post-living"], 
                    NeuralNetworks`NetPath["Nodes", "times"], 
                    NeuralNetworks`NetPath["Nodes", "update"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "dot-plus"], 
                    NeuralNetworks`NetPath["Nodes", "perception"], 
                    NeuralNetworks`NetPath["Nodes", "pre-living"], 
                    NeuralNetworks`NetPath["Nodes", "cell-dropout"], 
                    NeuralNetworks`NetPath["Nodes", "post-living"], 
                    NeuralNetworks`NetPath["Nodes", "times"], 
                    NeuralNetworks`NetPath["Nodes", "update"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[], {}], 
                    ToBoxes[""]], ImageSizeCache -> {0., {0., 5.}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.818513751839551*^9, 3.8185680317691517`*^9, 
  3.818575840619046*^9, 3.818658648986377*^9, 3.8197855945623617`*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"1b91508d-03bc-49d7-b737-d374c0905378"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NetInitialize", "[", 
    RowBox[{"net", "[", "\"\<single-update\>\"", "]"}], "]"}], "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"56", ",", "56", ",", "16"}], "}"}]}], "]"}], "]"}], "//", 
  "Dimensions"}]], "Input",
 CellChangeTimes->{{3.818513772673892*^9, 3.818513785178081*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"1baa47bc-becd-4cd6-9886-079b9d626dc3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"56", ",", "56", ",", "16"}], "}"}]], "Output",
 CellChangeTimes->{{3.8185137792611313`*^9, 3.81851378575338*^9}, 
   3.819785597637405*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"f6f2b590-10ea-4bdd-829e-63f08c423a5c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Nested Network", "Section",
 CellChangeTimes->{{3.818511409735784*^9, 3.818511411335927*^9}, {
  3.818511533012868*^9, 3.8185115406932783`*^9}, {3.818513792697876*^9, 
  3.818513805337872*^9}, {3.8185140190188704`*^9, 
  3.818514023939152*^9}},ExpressionUUID->"d19bd63b-d9ef-4f14-bc33-\
67105738502c"],

Cell[TextData[{
 "We now wish to nest this network, using the same set of trainable \
parameters. ",
 Cell[BoxData[
  TemplateBox[{"\"NetNestOperator\"", "paclet:ref/NetNestOperator"},
   "HyperlinkPaclet"]],ExpressionUUID->"e7200513-b33c-4b1d-a46d-c67d61d816f3"],
 " seems like a perfect fit:"
}], "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 
  3.818514114922675*^9}},ExpressionUUID->"0af5f690-4f84-4250-9e4d-\
16a188c442eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "[", "\"\<nested\>\"", "]"}], "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NetNestOperator", "[", 
      RowBox[{
       RowBox[{"net", "[", "\"\<single-update\>\"", "]"}], ",", "64"}], "]"}],
      ",", 
     RowBox[{"PartLayer", "[", 
      RowBox[{"{", 
       RowBox[{"All", ",", "All", ",", 
        RowBox[{";;", "4"}]}], "}"}], "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{3.818514120724539*^9},
 CellLabel->"In[32]:=",ExpressionUUID->"2ead90f6-d50d-4e25-8ec9-e663f7bc0cdc"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "NetNest", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "cell-dropout" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "NetArray", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT], "$ArrayDimensions" -> {56, 56}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`AtomT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "2" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`AtomT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[16], "Level" -> 3], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], "perception" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["percepted" -> 
                    NeuralNetworks`TensorT[{56, 56, 48}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["sobel-x" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 16, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 16, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "sobel-y" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 16, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 16, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "catenate" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 3], 
                    "Inputs" -> Association[
                    "Input1" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 48}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "sobel-y", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sobel-y", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "percepted"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Outputs", "Output"]}], "pre-living" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> (PartLayer[{All, All, 1}][
                    PoolingLayer[3, "PaddingSize" -> 1, 
                    "Input" -> {$CellContext`width, $CellContext`height, 1}, 
                    Interleaving -> True][
                    PartLayer[{All, All, 
                    Span[4, 4]}][#]]] > 0.1& ), "Net" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 4]}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$Channels" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 1}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 1},
                     NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[# > 0.1& ], 
                    "$Dimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input"}, "$OutputNames" -> {"Output"}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]]], 
                    "update" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Net" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{128, 48},
                     NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {128}, "$OutputSize" -> 128, 
                    "$InputSize" -> 48, "$InputDimensions" -> {48}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {16, 128}], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {16}, "$OutputSize" -> 16, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 56, 
                    "$InputShape" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 48}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 16}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> 56, "$InputShape" -> 
                    NeuralNetworks`TensorT[{56, 48}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{56, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 48}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], "dot-plus" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Apply[# #2 + #3& ], "Net" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[#3 + # #2& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]], 
                    "Inputs" -> Association[
                    "Input1" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input1", "Input2", "Input3"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input1" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], "post-living" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> (PartLayer[{All, All, 1}][
                    PoolingLayer[3, "PaddingSize" -> 1, 
                    "Input" -> {$CellContext`width, $CellContext`height, 1}, 
                    Interleaving -> True][
                    PartLayer[{All, All, 
                    Span[4, 4]}][#]]] > 0.1& ), "Net" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 4]}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$Channels" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 1}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 1},
                     NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[# > 0.1& ], 
                    "$Dimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input"}, "$OutputNames" -> {"Output"}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]]], 
                    "times" -> Association[
                    "Type" -> "Function", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> Apply[# #2 #3& ], "Net" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, NeuralNetworks`RealT]
                    ]], "$InputNames" -> {"Input1", "Input2", "Input3"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input1" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "pre-living", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "perception", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cell-dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "update", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "perception", "Outputs", "percepted"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pre-living", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "update", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "post-living", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "post-living", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Outputs", "Output"]}], "Iterations" -> 
                    64, "$InternalLengths" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[1, 4]}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TagBox[
                    RowBox[{"NetNestOperator", "[", 
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PartLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    Association[], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {296., {21.173828125, 25.826171875}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8185141213284197`*^9, 3.818568031925189*^9, 
  3.8185758407829103`*^9, 3.818658649076584*^9, 3.819785624827911*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"94c1438d-1331-4882-ba2a-b9aca70c30b8"]
}, Open  ]],

Cell["\<\
Note that after we iterate n times, we drop the hidden layers (to allow \
direct loss comparison with the visible channels of the target image)\
\>", "Subitem",
 CellChangeTimes->{{3.818514132037798*^9, 
  3.818514192356412*^9}},ExpressionUUID->"168c8294-c306-457a-96ca-\
cb6585f72161"],

Cell[CellGroupData[{

Cell["Training", "Subsection",
 CellChangeTimes->{{3.818514216813692*^9, 
  3.8185142214934053`*^9}},ExpressionUUID->"55dfce9a-e157-44d7-8c05-\
e1c0c7218bc5"],

Cell["\<\
We could now train this starting from a single seed against a single target \
Image:\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 
  3.818514271373528*^9}},ExpressionUUID->"d9f88634-5976-483c-9772-\
d65cf1522ae8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"singleSeed", "=", 
   RowBox[{"Normal", "@", 
    RowBox[{"SparseArray", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"width", "/", "2"}], ",", 
           RowBox[{"height", "/", "2"}], ",", "i"}], "}"}], "\[Rule]", "1"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "4", ",", "numChannels"}], "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"width", ",", "height", ",", "numChannels"}], "}"}]}], 
     "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"targetPokemon", "=", 
   RowBox[{"ImageData", "[", 
    RowBox[{"generationOnePokemonImgs", "[", 
     RowBox[{"[", "6", "]"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.818514248061767*^9, 3.81851424898905*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"5252b675-10d3-428e-90da-2085237de856"],

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{"NetTrain", "[", 
   RowBox[{
    RowBox[{"net", "[", "\"\<nested\>\"", "]"}], ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Input\>\"", "\[Rule]", 
       RowBox[{"{", "singleSeed", "}"}]}], ",", 
      RowBox[{"\"\<Target\>\"", "\[Rule]", 
       RowBox[{"{", "targetPokemon", "}"}]}]}], "|>"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "10"}], ",", 
    RowBox[{"RandomSeeding", "\[Rule]", "1996"}]}], "]"}], 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{
  3.818514280999319*^9, {3.818659513968412*^9, 
   3.818659516336213*^9}},ExpressionUUID->"162344cc-59e3-49b7-ac8b-\
6922a50b0375"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parallel Nesting", "Subsection",
 CellChangeTimes->{{3.818514386591069*^9, 
  3.818514395805378*^9}},ExpressionUUID->"b6843923-e536-428f-817f-\
a91d15053b1a"],

Cell["\<\
However, while this will likely learn the target image well - the fixed \
number of iterations will mean it\[CloseCurlyQuote]ll have very little \
predictive power beyond the 64 number of iterations. I.e. the growth pattern \
will not be stable.

The authors of the blog post deal with this in two ways:\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}},ExpressionUUID->"0e3761c6-ab00-4ac3-b688-\
645d5cc7ce79"],

Cell["\<\
Using a Pool/Batch technique in their second \[OpenCurlyQuote]persistent\
\[CloseCurlyQuote] experiment\
\>", "Subitem",
 CellChangeTimes->{{3.81851447098253*^9, 
  3.818514496684842*^9}},ExpressionUUID->"951f7e38-940b-4d4e-9a6f-\
f9ff05420f06"],

Cell[CellGroupData[{

Cell["\<\
Nesting for a random number of iterations between 64 and 96 iterations\
\>", "Subitem",
 CellChangeTimes->{{3.81851447098253*^9, 
  3.8185145206770887`*^9}},ExpressionUUID->"97e2b914-2b5d-41a8-a6e2-\
22be3c58fd4b"],

Cell["\<\
This should at-least ensure the system is stable for a limited number of \
iterations\
\>", "Subsubitem",
 CellChangeTimes->{{3.81851447098253*^9, 
  3.818514539854784*^9}},ExpressionUUID->"9caa5eb8-c87a-465a-972a-\
b2739ad5f83c"]
}, Open  ]],

Cell[TextData[{
 "We\[CloseCurlyQuote]ll use a (much more expensive) variant of the second \
technique since I couldn\[CloseCurlyQuote]t figure out how to get ",
 Cell[BoxData[
  TemplateBox[{"\"NetNestOperator\"", "paclet:ref/NetNestOperator"},
   "HyperlinkPaclet"]],ExpressionUUID->"5f53c90e-53d5-48f9-be67-89001b80f377"],
 " take a random number."
}], "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}, {3.818514548302979*^9, 
  3.8185145964179707`*^9}},ExpressionUUID->"b1ac948d-d1b7-4aa0-bebc-\
7852e4705e3e"],

Cell["\<\
We\[CloseCurlyQuote]ll nest three nets in parallel for 50, 64, and 78 \
iterations each and assign the maximum deviation as the current loss function.\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}, {3.818514548302979*^9, 3.8185145964179707`*^9}, {
  3.8185147141548977`*^9, 
  3.818514757715315*^9}},ExpressionUUID->"7473c52f-99d6-4fd8-846d-\
5208824274ef"],

Cell["\<\
This should at-least ensure the system is stable for a limited number of \
iterations\
\>", "Subsubitem",
 CellChangeTimes->{{3.81851447098253*^9, 
  3.818514539854784*^9}},ExpressionUUID->"1e1aa4f1-a496-48c1-a77d-\
bc0b2fa1199e"],

Cell["\<\
We must ensure our parallel nested nets will share trainable parameters:\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}, {3.818514548302979*^9, 3.8185145964179707`*^9}, {
  3.8185147141548977`*^9, 
  3.818514798499524*^9}},ExpressionUUID->"0cbcf96c-f551-4a04-9096-\
d2aa10348a75"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"net", "[", "\"\<single-shared\>\"", "]"}], "=", 
   RowBox[{"NetInsertSharedArrays", "[", 
    RowBox[{"net", "[", "\"\<single-update\>\"", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net", "[", "\"\<nested-parallel\>\"", "]"}], "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"Association", "[", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<nest-\>\"", "<>", 
            RowBox[{"ToString", "[", "#", "]"}]}], ")"}], "\[Rule]", 
          RowBox[{"NetGraph", "[", 
           RowBox[{
            RowBox[{"<|", 
             RowBox[{
              RowBox[{"\"\<nested\>\"", "->", 
               RowBox[{"NetNestOperator", "[", 
                RowBox[{
                 RowBox[{"net", "[", "\"\<single-shared\>\"", "]"}], ",", 
                 "#"}], "]"}]}], ",", 
              RowBox[{"\"\<part\>\"", "->", 
               RowBox[{"PartLayer", "[", 
                RowBox[{"{", 
                 RowBox[{"All", ",", "All", ",", 
                  RowBox[{";;", "4"}]}], "}"}], "]"}]}], ",", 
              RowBox[{"\"\<loss\>\"", "->", 
               RowBox[{"MeanSquaredLossLayer", "[", "]"}]}]}], "|>"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<nested\>\"", "\[Rule]", 
              RowBox[{"\"\<part\>\"", "->", "\"\<loss\>\""}]}], "}"}]}], 
           "]"}]}], "&"}], "/@", 
        RowBox[{"Subdivide", "[", 
         RowBox[{"50", ",", "78", ",", "2"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<max\>\"", "\[Rule]", 
         RowBox[{"ThreadingLayer", "[", "Max", "]"}]}], "}"}]}], "]"}], "]"}],
     ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<nest-50\>\"", ",", "\"\<nest-64\>\"", ",", "\"\<nest-78\>\""}], 
       "}"}], "\[Rule]", 
      RowBox[{"\"\<max\>\"", "->", 
       RowBox[{"NetPort", "[", "\"\<Loss\>\"", "]"}]}]}], "}"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8185148104446983`*^9, 3.8185148105840273`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"1b41c198-4ecc-4edc-96f2-cee07b8ee7fd"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    
                    Offset[{0, -7}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"nest-50\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{0, -15.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"nest-64\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -15.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"nest-78\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-1.9999999464102052`, 
                    2.0000000535897935`}], 
                    
                    Offset[{0, -15.5}, {-1.9999999464102052`, 
                    2.0000000535897935`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Target\"", 
                    
                    Offset[{0, -7}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"max\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Loss\"", 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, StripOnInput -> 
                    False, FontColor -> GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999997}, {-2.4499999999999993`, 
                    6.564749772133872*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337035`}, {-2.4499999852628056`, 
                    0.5500000656474976}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396938}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{-4.919349484592803, 
                    2.459674907063233}, {-2.4559016702793777`, 
                    1.0881966669306433`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.4472136194660424,
                     0.8944271790168733}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"4\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.889087400733703, 
                    3.889087192318317}, {-2.4499999879422956`, 
                    0.45000006564749745`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396939, -0.7071068001334005}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"4\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"4\""}, 
                    "RowWithSeparators"], 
                    Offset[{-3.889087192318316, 
                    3.8890874007337035`}, {-2.4499999584679086`, 
                    1.5500000656474973`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396938}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-1.449999985262806, 
                    0.5500000388526006}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.8890874007337035`, 
                    3.889087192318316}, {-1.4499999611473986`, 
                    1.4500000388526004`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396938, -0.7071068001334007}]}, StripOnInput -> 
                    False, FontSize -> 8, FontWeight -> "Thin", FontColor -> 
                    GrayLevel[0.7]]}, {
                    GrayLevel[0.7], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999464102052`, 
                    2.0000000535897935`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999464102052`, 
                    2.0000000535897935`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999464102052`, 
                    2.0000000535897935`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999999999993`,
                     6.564749772133872*^-8}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999998, -2.679489702911785*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999852628056`,
                     0.5500000656474976}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4559016702793777`,
                     1.0881966669306433`}, {-0.25, 0}, 
                    Offset[8], {1.000000053589794, 1.9999999732051024`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999879422956`,
                     0.45000006564749745`}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051028, -1.0000000267948965`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999732051023`,
                     1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999584679086`,
                     1.5500000656474973`}, {-0.25, 0}, 
                    Offset[8], {1.000000026794897, 0.9999999732051028}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.449999985262806, 
                    0.5500000388526006}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4499999732051023`,
                     1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4499999611473986`,
                     1.4500000388526004`}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051026, -1.0000000267948967`}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.999999999999999, 8.038469108735353*^-8}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], {
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{-12.5, -12.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{12.5, 12.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{-10.5, -10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{10.5, 10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-1.9999999999999993`, 5.3589794058235685`*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"nest-50\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["nest-50", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], {
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{-12.5, -12.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{12.5, 12.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{-10.5, -10.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{10.5, 10.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-1.9999999732051024`, 1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"nest-64\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["nest-64", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], {
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-1.9999999464102052`, 
                    2.0000000535897935`}], 
                    
                    Offset[{-12.5, -12.5}, {-1.9999999464102052`, 
                    2.0000000535897935`}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-1.9999999464102052`, 
                    2.0000000535897935`}], 
                    
                    Offset[{12.5, 12.5}, {-1.9999999464102052`, 
                    2.0000000535897935`}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-1.9999999464102052`, 
                    2.0000000535897935`}], 
                    
                    Offset[{-10.5, -10.5}, {-1.9999999464102052`, 
                    2.0000000535897935`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-1.9999999464102052`, 
                    2.0000000535897935`}], 
                    
                    Offset[{10.5, 10.5}, {-1.9999999464102052`, 
                    2.0000000535897935`}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-1.9999999464102052`, 2.0000000535897935`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"nest-78\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["nest-78", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    StripOnInput -> False, LineColor -> GrayLevel[0.33], 
                    FrontFaceColor -> GrayLevel[0.33], BackFaceColor -> 
                    GrayLevel[0.33], GraphicsColor -> GrayLevel[0.33], 
                    FontFamily -> "Source Code Pro", FontSize -> 14, 
                    FontWeight -> Bold, FontSlant -> Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"max\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["max", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-1.9999999464102052`, 
                    2.0000000535897935`}, {-2.999999973205102, 
                    1.0000000803846907`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 25, 25, 8, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{29., 29.}, {29.5, 19.}}, 
                    ImageSize -> {223.0000014737193, 158.49999999999994`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox[
                    RowBox[{"Input", " ", "Ports"}], FontWeight -> Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox[
                    RowBox[{"Output", " ", "Port"}], FontWeight -> Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    Part[
                    Association[
                    "Nodes" -> 
                    Association[
                    "nest-50" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "nested" -> Association[
                    "Type" -> "NetNest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["cell-dropout" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "NetArray", "Arrays" -> 
                    Association["Array" -> NetArray["cell-dropout/1/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT], "$ArrayDimensions" -> {56, 56}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "2" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[16], "Level" -> 3], 
                    "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], "perception" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["percepted" -> NeuralNetworks`TensorT[{56, 56,
                     48}, NeuralNetworks`RealT]], "Nodes" -> 
                    Association["sobel-x" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetArray[
                    "perception/sobel-x/Weights"], "Biases" -> None], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$InputChannels" -> 16, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 16],
                     "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "sobel-y" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetArray[
                    "perception/sobel-y/Weights"], "Biases" -> None], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$InputChannels" -> 16, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 16],
                     "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "catenate" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 3], 
                    "Inputs" -> Association["Input1" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    48}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sobel-y", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Inputs", 
                    "Input3"] -> NeuralNetworks`NetPath[
                    "Nodes", "sobel-y", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "percepted"] -> 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Outputs", 
                    "Output"]}], "pre-living" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> (PartLayer[{All, All, 1}][
                    PoolingLayer[
                    3, "PaddingSize" -> 1, 
                    "Input" -> {$CellContext`width, $CellContext`height, 1}, 
                    Interleaving -> True][
                    PartLayer[{All, All, 
                    Span[4, 4]}][#]]] > 0.1& ), "Net" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 4]}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$Channels" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 1}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 1},
                     NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[# > 
                    0.1& ], "$Dimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]]], "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "update" -> 
                    Association["Type" -> "NetMap", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "Net" -> Association["Type" -> "NetMap", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NetArray["update/Net/Net/1/Weights"], "Biases" -> 
                    NetArray["update/Net/Net/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {128}, "$OutputSize" -> 
                    128, "$InputSize" -> 48, "$InputDimensions" -> {48}], 
                    "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "2" -> Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128}], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "3" -> Association[
                    "Type" -> "Linear", "Arrays" -> Association[
                    "Weights" -> NetArray["update/Net/Net/3/Weights"], 
                    "Biases" -> NetArray["update/Net/Net/3/Biases"]], 
                    "Parameters" -> Association["OutputDimensions" -> {16}, 
                    "$OutputSize" -> 16, "$InputSize" -> 128, 
                    "$InputDimensions" -> {128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]]]], "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 56, 
                    "$InputShape" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 48}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 16}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> 56, "$InputShape" -> 
                    NeuralNetworks`TensorT[{56, 48}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{56, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    48}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], "dot-plus" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Apply[# #2 + #3& ], "Net" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[#3 + # #2& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]], 
                    "Inputs" -> Association["Input1" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input1", "Input2", "Input3"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], "post-living" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> (PartLayer[{All, All, 1}][
                    PoolingLayer[
                    3, "PaddingSize" -> 1, 
                    "Input" -> {$CellContext`width, $CellContext`height, 1}, 
                    Interleaving -> True][
                    PartLayer[{All, All, 
                    Span[4, 4]}][#]]] > 0.1& ), "Net" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 4]}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$Channels" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 1}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 1},
                     NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[# > 
                    0.1& ], "$Dimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]]], "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "times" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Apply[# #2 #3& ], "Net" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Input3" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input1", "Input2", "Input3"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Input3" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "pre-living", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "perception", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cell-dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "update", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "perception", "Outputs", "percepted"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pre-living", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "update", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "post-living", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "post-living", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Outputs", "Output"]}], "Iterations" -> 
                    50, "$InternalLengths" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], "part" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[1, 4]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`RealT]]], "loss" -> 
                    Association["Type" -> "MeanSquaredLoss", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Dimensions" -> {56, 56, 4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, NeuralNetworks`RealT],
                     "Target" -> NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "nested", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "nested", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], "nest-64" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "nested" -> Association[
                    "Type" -> "NetNest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["cell-dropout" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "NetArray", "Arrays" -> 
                    Association["Array" -> NetArray["cell-dropout/1/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT], "$ArrayDimensions" -> {56, 56}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "2" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[16], "Level" -> 3], 
                    "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], "perception" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["percepted" -> NeuralNetworks`TensorT[{56, 56,
                     48}, NeuralNetworks`RealT]], "Nodes" -> 
                    Association["sobel-x" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetArray[
                    "perception/sobel-x/Weights"], "Biases" -> None], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$InputChannels" -> 16, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 16],
                     "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "sobel-y" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetArray[
                    "perception/sobel-y/Weights"], "Biases" -> None], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$InputChannels" -> 16, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 16],
                     "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "catenate" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 3], 
                    "Inputs" -> Association["Input1" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    48}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sobel-y", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Inputs", 
                    "Input3"] -> NeuralNetworks`NetPath[
                    "Nodes", "sobel-y", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "percepted"] -> 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Outputs", 
                    "Output"]}], "pre-living" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> (PartLayer[{All, All, 1}][
                    PoolingLayer[
                    3, "PaddingSize" -> 1, 
                    "Input" -> {$CellContext`width, $CellContext`height, 1}, 
                    Interleaving -> True][
                    PartLayer[{All, All, 
                    Span[4, 4]}][#]]] > 0.1& ), "Net" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 4]}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$Channels" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 1}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 1},
                     NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[# > 
                    0.1& ], "$Dimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]]], "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "update" -> 
                    Association["Type" -> "NetMap", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "Net" -> Association["Type" -> "NetMap", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NetArray["update/Net/Net/1/Weights"], "Biases" -> 
                    NetArray["update/Net/Net/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {128}, "$OutputSize" -> 
                    128, "$InputSize" -> 48, "$InputDimensions" -> {48}], 
                    "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "2" -> Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128}], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "3" -> Association[
                    "Type" -> "Linear", "Arrays" -> Association[
                    "Weights" -> NetArray["update/Net/Net/3/Weights"], 
                    "Biases" -> NetArray["update/Net/Net/3/Biases"]], 
                    "Parameters" -> Association["OutputDimensions" -> {16}, 
                    "$OutputSize" -> 16, "$InputSize" -> 128, 
                    "$InputDimensions" -> {128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]]]], "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 56, 
                    "$InputShape" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 48}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 16}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> 56, "$InputShape" -> 
                    NeuralNetworks`TensorT[{56, 48}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{56, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    48}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], "dot-plus" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Apply[# #2 + #3& ], "Net" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[#3 + # #2& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]], 
                    "Inputs" -> Association["Input1" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input1", "Input2", "Input3"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], "post-living" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> (PartLayer[{All, All, 1}][
                    PoolingLayer[
                    3, "PaddingSize" -> 1, 
                    "Input" -> {$CellContext`width, $CellContext`height, 1}, 
                    Interleaving -> True][
                    PartLayer[{All, All, 
                    Span[4, 4]}][#]]] > 0.1& ), "Net" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 4]}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$Channels" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 1}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 1},
                     NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[# > 
                    0.1& ], "$Dimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]]], "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "times" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Apply[# #2 #3& ], "Net" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Input3" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input1", "Input2", "Input3"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Input3" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "pre-living", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "perception", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cell-dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "update", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "perception", "Outputs", "percepted"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pre-living", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "update", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "post-living", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "post-living", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Outputs", "Output"]}], "Iterations" -> 
                    64, "$InternalLengths" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], "part" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[1, 4]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`RealT]]], "loss" -> 
                    Association["Type" -> "MeanSquaredLoss", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Dimensions" -> {56, 56, 4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, NeuralNetworks`RealT],
                     "Target" -> NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "nested", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "nested", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], "nest-78" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "nested" -> Association[
                    "Type" -> "NetNest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["cell-dropout" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "NetArray", "Arrays" -> 
                    Association["Array" -> NetArray["cell-dropout/1/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT], "$ArrayDimensions" -> {56, 56}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "2" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[16], "Level" -> 3], 
                    "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], "perception" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["percepted" -> NeuralNetworks`TensorT[{56, 56,
                     48}, NeuralNetworks`RealT]], "Nodes" -> 
                    Association["sobel-x" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetArray[
                    "perception/sobel-x/Weights"], "Biases" -> None], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$InputChannels" -> 16, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 16],
                     "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "sobel-y" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetArray[
                    "perception/sobel-y/Weights"], "Biases" -> None], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$InputChannels" -> 16, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 16],
                     "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "catenate" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 3], 
                    "Inputs" -> Association["Input1" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    48}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sobel-y", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Inputs", 
                    "Input3"] -> NeuralNetworks`NetPath[
                    "Nodes", "sobel-y", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "percepted"] -> 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Outputs", 
                    "Output"]}], "pre-living" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> (PartLayer[{All, All, 1}][
                    PoolingLayer[
                    3, "PaddingSize" -> 1, 
                    "Input" -> {$CellContext`width, $CellContext`height, 1}, 
                    Interleaving -> True][
                    PartLayer[{All, All, 
                    Span[4, 4]}][#]]] > 0.1& ), "Net" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 4]}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$Channels" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 1}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 1},
                     NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[# > 
                    0.1& ], "$Dimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]]], "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "update" -> 
                    Association["Type" -> "NetMap", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "Net" -> Association["Type" -> "NetMap", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NetArray["update/Net/Net/1/Weights"], "Biases" -> 
                    NetArray["update/Net/Net/1/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {128}, "$OutputSize" -> 
                    128, "$InputSize" -> 48, "$InputDimensions" -> {48}], 
                    "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "2" -> Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128}], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "3" -> Association[
                    "Type" -> "Linear", "Arrays" -> Association[
                    "Weights" -> NetArray["update/Net/Net/3/Weights"], 
                    "Biases" -> NetArray["update/Net/Net/3/Biases"]], 
                    "Parameters" -> Association["OutputDimensions" -> {16}, 
                    "$OutputSize" -> 16, "$InputSize" -> 128, 
                    "$InputDimensions" -> {128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]]]], "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 56, 
                    "$InputShape" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 48}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 16}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> 56, "$InputShape" -> 
                    NeuralNetworks`TensorT[{56, 48}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{56, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    48}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], "dot-plus" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Apply[# #2 + #3& ], "Net" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[#3 + # #2& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]], 
                    "Inputs" -> Association["Input1" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input1", "Input2", "Input3"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], "post-living" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> (PartLayer[{All, All, 1}][
                    PoolingLayer[
                    3, "PaddingSize" -> 1, 
                    "Input" -> {$CellContext`width, $CellContext`height, 1}, 
                    Interleaving -> True][
                    PartLayer[{All, All, 
                    Span[4, 4]}][#]]] > 0.1& ), "Net" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 4]}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$Channels" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 1}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 1},
                     NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[# > 
                    0.1& ], "$Dimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]]], "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "times" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Apply[# #2 #3& ], "Net" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Input3" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input1", "Input2", "Input3"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Input3" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "pre-living", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "perception", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cell-dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "update", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "perception", "Outputs", "percepted"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pre-living", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "update", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "post-living", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "post-living", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Outputs", "Output"]}], "Iterations" -> 
                    78, "$InternalLengths" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], "part" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[1, 4]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`RealT]]], "loss" -> 
                    Association["Type" -> "MeanSquaredLoss", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Dimensions" -> {56, 56, 4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, NeuralNetworks`RealT],
                     "Target" -> NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "nested", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "nested", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], "max" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Max], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]], "Inputs" -> 
                    Association[
                    "Input1" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "Input3" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "nest-50", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "nest-64", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "nest-78", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "nest-50", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "nest-64", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "nest-78", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "nest-50", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "nest-64", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "nest-78", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max", "Outputs", "Output"]}], 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "nest-50"], 
                    NeuralNetworks`NetPath["Nodes", "nest-64"], 
                    NeuralNetworks`NetPath["Nodes", "nest-78"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "max"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "nest-50"], 
                    NeuralNetworks`NetPath["Nodes", "nest-64"], 
                    NeuralNetworks`NetPath["Nodes", "nest-78"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "max"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "cell-dropout/1/Array" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "perception/sobel-x/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 16, 3, 3}], 
                    "perception/sobel-y/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 16, 3, 3}], 
                    "update/Net/Net/1/Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "update/Net/Net/1/Weights" -> 
                    NeuralNetworks`TensorT[{128, 48}, NeuralNetworks`RealT], 
                    "update/Net/Net/3/Biases" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "update/Net/Net/3/Weights" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {16, 
                    128}]], {}], 
                    ToBoxes[""]], ImageSizeCache -> {0., {0., 5.}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.818514815944789*^9, 3.8185680323722773`*^9, 
  3.818575841183032*^9, 3.818658649507069*^9, 3.81978564813546*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"583a69dd-d2f9-4cd9-be76-cd04dc9525f1"]
}, Open  ]],

Cell["\<\
We ensure we only have the one set of trainable parameters (which only amount \
to ~8k)\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}, {3.818514548302979*^9, 3.8185145964179707`*^9}, {
  3.8185147141548977`*^9, 3.818514798499524*^9}, {3.818514832844393*^9, 
  3.8185148786291857`*^9}},ExpressionUUID->"0cd0c6cb-498f-440f-9e11-\
6b792a28a175"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Information", "[", 
  RowBox[{
   RowBox[{"NetInitialize", "[", 
    RowBox[{"net", "[", "\"\<nested-parallel\>\"", "]"}], "]"}], ",", 
   "\"\<ArraysDimensions\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Information", "[", 
  RowBox[{
   RowBox[{"net", "[", "\"\<nested-parallel\>\"", "]"}], ",", 
   "\"\<ArraysLearningRateMultipliers\>\""}], "]"}]}], "Input",
 CellChangeTimes->{{3.81851488702106*^9, 3.8185148871584044`*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"840e799c-7482-4032-8943-fd3ae2f81b24"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"cell-dropout/1/Array\"\>", "]"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"56", ",", "56"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"perception/sobel-x/Weights\"\>", "]"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"16", ",", "16", ",", "3", ",", "3"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"perception/sobel-y/Weights\"\>", "]"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"16", ",", "16", ",", "3", ",", "3"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"update/Net/Net/1/Biases\"\>", "]"}], 
    "\[Rule]", 
    RowBox[{"{", "128", "}"}]}], ",", 
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"update/Net/Net/1/Weights\"\>", "]"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"128", ",", "48"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"update/Net/Net/3/Biases\"\>", "]"}], 
    "\[Rule]", 
    RowBox[{"{", "16", "}"}]}], ",", 
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"update/Net/Net/3/Weights\"\>", "]"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"16", ",", "128"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",\

 CellChangeTimes->{3.818514887491371*^9, 3.819785653275496*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"683617aa-8ae3-49a0-9153-99c49b642850"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"cell-dropout/1/Array\"\>", "]"}], "\[Rule]",
     "0.`"}], ",", 
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"perception/sobel-x/Weights\"\>", "]"}], 
    "\[Rule]", "0.`"}], ",", 
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"perception/sobel-y/Weights\"\>", "]"}], 
    "\[Rule]", "0.`"}], ",", 
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"update/Net/Net/1/Biases\"\>", "]"}], 
    "\[Rule]", "1.`"}], ",", 
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"update/Net/Net/1/Weights\"\>", "]"}], 
    "\[Rule]", "1.`"}], ",", 
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"update/Net/Net/3/Biases\"\>", "]"}], 
    "\[Rule]", "1.`"}], ",", 
   RowBox[{
    RowBox[{"NetArray", "[", "\<\"update/Net/Net/3/Weights\"\>", "]"}], 
    "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.818514887491371*^9, 3.819785653288571*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"7541ba7c-8df4-4c0b-9d24-13f731c3f2c7"]
}, Open  ]],

Cell["\<\
We train a net for each target image (~1hr per net on  my GPU) and obtain:\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}, {3.818514548302979*^9, 3.8185145964179707`*^9}, {
  3.8185147141548977`*^9, 3.818514798499524*^9}, {3.818514832844393*^9, 
  3.8185148786291857`*^9}, {3.8185149755015993`*^9, 3.818515036006954*^9}, {
  3.818515076967311*^9, 
  3.818515079287026*^9}},ExpressionUUID->"32eaeb98-fbf1-4d50-ad18-\
c5bcaf8f3bf8"],

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{"NetTrain", "[", 
   RowBox[{
    RowBox[{"net", "[", "\"\<nested-parallel\>\"", "]"}], ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Input\>\"", "\[Rule]", 
       RowBox[{"{", "singleSeed", "}"}]}], ",", 
      RowBox[{"\"\<Target\>\"", "\[Rule]", 
       RowBox[{"{", "targetPokemon", "}"}]}]}], "|>"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "25000"}], ",", 
    RowBox[{"RandomSeeding", "\[Rule]", "1996"}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}], 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.818514935217626*^9, 3.818514961197528*^9}, {
  3.8185150550949917`*^9, 
  3.818515061974812*^9}},ExpressionUUID->"651c0f1c-9459-4c57-bc38-\
d2699948da6f"],

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{"CopyFile", "[", 
   RowBox[{
   "\"\</home/george/ca-pokemon/neural-cellular-automata-pokemon.gif\>\"", 
    ",", " ", 
    RowBox[{"CloudObject", "[", 
     RowBox[{
     "\"\<gifs/differentiable-cellular-automata-animation.gif\>\"", ",", 
      RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}], "]"}], 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.819786113130556*^9, 3.819786135105291*^9}, {
  3.819786221654068*^9, 
  3.8197862382664623`*^9}},ExpressionUUID->"b9d64b1b-46f3-4170-a21e-\
cd8c561f49e0"],

Cell[BoxData[
 RowBox[{"CloudImport", "[", 
  RowBox[{
  "\"\<https://www.wolframcloud.com/obj/gvarnavi/gifs/differentiable-cellular-\
automata-animation.gif\>\"", ",", "\"\<Animation\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.819786192109997*^9, 3.819786227890388*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"fdfdd3ca-fa9b-45d8-8a59-0efefb64093d"],

Cell["\<\
As we can see - while some growth patterns are stable (like Charizard, \
Venusaur, and Arbok), others like Rattata, Caterpie, and Spearow are not\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}, {3.818514548302979*^9, 3.8185145964179707`*^9}, {
  3.8185147141548977`*^9, 3.818514798499524*^9}, {3.818514832844393*^9, 
  3.8185148786291857`*^9}, {3.8185149755015993`*^9, 3.818515036006954*^9}, {
  3.818515076967311*^9, 3.818515079287026*^9}, {3.818515171040354*^9, 
  3.818515281481512*^9}},ExpressionUUID->"709f418e-b11e-4282-8fe9-\
93083cf8f85e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Folded Network", "Section",
 CellChangeTimes->{{3.818511409735784*^9, 3.818511411335927*^9}, {
  3.818511533012868*^9, 3.8185115406932783`*^9}, {3.818513792697876*^9, 
  3.818513805337872*^9}, {3.8185140190188704`*^9, 3.818514023939152*^9}, {
  3.81851529772126*^9, 
  3.8185152983693247`*^9}},ExpressionUUID->"0d97ad07-18df-4b07-9a35-\
1688b3f18ee3"],

Cell[TextData[{
 "I get the sense we ",
 StyleBox["cheated. \n",
  FontSlant->"Italic"],
 "The blog post mentions back propagation through time in training this so I \
assume one ought to use ",
 Cell[BoxData[
  TemplateBox[{"\"NetFoldOperator\"", "paclet:ref/NetFoldOperator"},
   "HyperlinkPaclet"]],ExpressionUUID->"8270f92a-4e35-47a6-a769-3357b44f9905"],
 " instead of ",
 Cell[BoxData[
  TemplateBox[{"\"NetNestOperator\"", "paclet:ref/NetNestOperator"},
   "HyperlinkPaclet"]],ExpressionUUID->"1eda58bf-aca5-4289-92e8-479aa80fdd48"],
 ".\n\nNaively, it seems to me that one could also solve the constant \
iterations problem outline above, by providing a (dummy) \
\[OpenCurlyDoubleQuote]Iterations\[CloseCurlyDoubleQuote] sequence of 1s with \
the required length. "
}], "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
   3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
   3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
   3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
   3.81851446955212*^9}, {3.818514548302979*^9, 3.8185145964179707`*^9}, {
   3.8185147141548977`*^9, 3.818514798499524*^9}, {3.818514832844393*^9, 
   3.8185148786291857`*^9}, {3.8185149755015993`*^9, 3.818515036006954*^9}, {
   3.818515076967311*^9, 3.818515079287026*^9}, {3.818515171040354*^9, 
   3.8185154140963182`*^9}, {3.818515452826192*^9, 3.818515509570326*^9}, {
   3.818575718645668*^9, 3.818575718805747*^9}, {3.818575759206249*^9, 
   3.818575782222622*^9}, {3.818576418019964*^9, 3.818576428287108*^9}, {
   3.818659326094056*^9, 3.818659346758048*^9}, 
   3.819785670669161*^9},ExpressionUUID->"24cf4ccb-a8d5-4930-abcd-\
2e52af9dd71c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"net", "[", "\"\<folded\>\"", "]"}], "=", 
    RowBox[{"NetFoldOperator", "[", 
     RowBox[{"NetGraph", "[", 
      RowBox[{
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<single-update\>\"", "\[Rule]", 
          RowBox[{"net", "[", "\"\<single-update\>\"", "]"}]}], ",", 
         RowBox[{"\"\<dummy-input\>\"", "\[Rule]", 
          RowBox[{"ThreadingLayer", "[", 
           RowBox[{"Times", ",", "1"}], "]"}]}]}], "|>"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"NetPort", "[", "\"\<State\>\"", "]"}], ",", 
            RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}]}], "}"}], 
          "\[Rule]", "\"\<dummy-input\>\""}], ",", 
         RowBox[{
         "\"\<dummy-input\>\"", "\[Rule]", "\"\<single-update\>\""}]}], "}"}],
        ",", 
       RowBox[{"\"\<State\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"width", ",", "height", ",", "numChannels"}], "}"}]}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"width", ",", "height", ",", "numChannels"}], "}"}]}], ",", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net", "[", "\"\<graph\>\"", "]"}], "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<folded\>\"", "\[Rule]", 
       RowBox[{"net", "[", "\"\<folded\>\"", "]"}]}], ",", 
      RowBox[{"\"\<loss\>\"", "\[Rule]", 
       RowBox[{"MeanSquaredLossLayer", "[", "]"}]}], ",", 
      RowBox[{"\"\<state-seq\>\"", "->", 
       RowBox[{"SequenceLastLayer", "[", "]"}]}], ",", 
      RowBox[{"\"\<part\>\"", "->", 
       RowBox[{"PartLayer", "[", 
        RowBox[{"{", 
         RowBox[{"All", ",", "All", ",", 
          RowBox[{";;", "4"}]}], "}"}], "]"}]}]}], "|>"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Iterations\>\"", "]"}], "\[Rule]", 
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<folded\>\"", ",", "\"\<Input\>\""}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<InitialState\>\"", "]"}], "\[Rule]", 
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<folded\>\"", ",", "\"\<State\>\""}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<folded\>\"", ",", "\"\<Output\>\""}], "]"}], "\[Rule]", 
       RowBox[{"\"\<state-seq\>\"", "->", 
        RowBox[{"\"\<part\>\"", "->", 
         RowBox[{"NetPort", "[", "\"\<Prediction\>\"", "]"}]}]}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<part\>\"", ",", 
         RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}]}], "}"}], "\[Rule]", 
       "\"\<loss\>\""}]}], "}"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",\

 CellChangeTimes->{{3.8184051101184387`*^9, 3.818405119005425*^9}, {
  3.818575880110058*^9, 3.818575892065795*^9}, {3.818576068244289*^9, 
  3.818576177515418*^9}, {3.8185763215268087`*^9, 3.8185763502543697`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"502e141e-8e1d-41e8-a520-b04b09975a1d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    TagBox[
                    TooltipBox[
                    "\"InitialSt..\"", "\"InitialState\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "InitialState", "Tooltip"]& ], 
                    
                    Offset[{0, -7}, {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"folded\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -15.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Iterations\"", 
                    
                    Offset[{0, -7}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Target\"", 
                    
                    Offset[{0, -7}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"loss\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}], 
                    
                    Offset[{0, -13.5}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"state-seq\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Loss\"", 
                    Offset[{0, -7}, {0., 0.}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"part\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Prediction\"", 
                    
                    Offset[{0, -7}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, StripOnInput -> 
                    False, FontColor -> GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{-3.8890871923183172`, 
                    3.8890874007337035`}, {-4.449999985262805, 
                    0.5500001192372916}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.707106762239694}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"1\""}, "RowWithSeparators"], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-4.449999973205101, 
                    1.0000001192372916`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"4\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999998}, {-1.4499999999999993`, 
                    3.885260069222087*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"56\"", "\"56\"", "\"16\""}, "RowWithSeparators"], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999998}, {-0.4499999999999998, 
                    1.2057703663103027`*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"4\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"4\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{3.8890874007337035`, 
                    3.889087192318317}, {-1.4499999879422958`, 
                    0.4500000388526005}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396939, -0.7071068001334007}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"56\"", "\"56\"", "\"16\""},
                     "RowWithSeparators"], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}]}, 
                    StripOnInput -> False, FontSize -> 8, FontWeight -> 
                    "Thin", FontColor -> GrayLevel[0.7]]}, {
                    GrayLevel[0.7], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"InitialState\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"State\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"InitialState", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "State"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]1\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Iterations\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]1\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Iterations", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]56\[Times]56\[Times]16\[VeryThinSpace])\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], 
                    "\[Times]56\[Times]56\[Times]16\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Prediction\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Prediction"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.449999985262805, 
                    0.5500001192372916}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948965`, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"InitialState\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"State\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"InitialState", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "State"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.449999973205101, 
                    1.0000001192372916`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]1\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Iterations\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]1\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Iterations", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4499999999999993`,
                     3.885260069222087*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]56\[Times]56\[Times]16\[VeryThinSpace])\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], 
                    "\[Times]56\[Times]56\[Times]16\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4499999732051023`,
                     1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Prediction\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Prediction"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4499999879422958`,
                     0.4500000388526005}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051027, -1.0000000267948967`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999732051023`,
                     1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4.999999999999998, 1.339744851455892*^-7}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"InitialState\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["InitialState", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], {
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{-12.5, -12.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{12.5, 12.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{-10.5, -10.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{10.5, 10.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.041666666666666664`], {
                    GrayLevel[0.33], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}}}, {{{13.0937, 
                    4.5791}, {16.7177, 5.109100000000001}, {19.4997, 
                    8.2291}, {19.4997, 12.0001}, {19.4997, 
                    13.968100000000002`}, {18.7417, 15.7591}, {17.5017, 
                    17.097099999999998`}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.33], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}}}, {{{9.3247, 
                    19.0088}, {6.5037, 17.9308}, {4.499700000000001, 
                    15.199800000000002`}, {4.499700000000001, 11.9998}, {
                    4.499700000000001, 9.9488}, {5.3237, 8.090800000000002}, {
                    6.6577, 6.736800000000001}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.33], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{9.5937, 19.4375}, {
                    3.2187, 19.4375}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.33], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    10., 4.562499999999999}, {13.5, 1.9374999999999991`}, {
                    13.5, 7.187499999999999}, {10., 4.562499999999999}}}, 
                    CurveClosed -> {1}]}, {
                    GrayLevel[0.33], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    13.0937, 19.4375}, {9.5937, 22.0625}, {9.5937, 16.8125}, {
                    13.0937, 19.4375}}}, CurveClosed -> {1}]}}, AspectRatio -> 
                    Automatic, ImageSize -> {24., 24.}, 
                    PlotRange -> {{0., 24.}, {0., 
                    24.}}], {-3.9999999732051017`, 1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"folded\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetFoldOperator", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["folded", Bold], 
                    Style[
                    NetFoldOperator, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4.999999973205101, 1.0000001339744848`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Iterations\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Iterations", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.9999999999999993`, 5.3589794058235685`*^-8}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.584, 0.51, 0.839]], 
                    FaceForm[
                    RGBColor[
                    0.7226666666666666, 0.6733333333333333, 
                    0.8926666666666666]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    StyleBox[
                    "\"MS\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 10, FontWeight -> Bold, 
                    FontColor -> GrayLevel[0.33]], {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "MeanSquaredLossLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["loss", Bold], 
                    Style[
                    MeanSquaredLossLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    StyleBox[
                    "\"Last\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 9, FontWeight -> Bold, 
                    FontColor -> GrayLevel[0.33]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"state-seq\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    "SequenceLastLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["state-seq", Bold], 
                    Style[
                    SequenceLastLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    StyleBox[
                    "\"Part\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 9, FontWeight -> Bold, 
                    FontColor -> GrayLevel[0.33]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"part\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "PartLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["part", Bold], 
                    Style[
                    PartLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Prediction\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Prediction", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-4.999999973205101, 
                    1.0000001339744848`}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}, {-2.999999973205102, 
                    1.0000000803846907`}, {0., 0.}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 8, 8, 21, 21, 8, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{38.49999852628065, 29.}, {29., 19.}}, 
                    ImageSize -> {342.49999852628054`, 103.00000736859667`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox[
                    RowBox[{"Input", " ", "Ports"}], FontWeight -> Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Iterations\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]1\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"InitialState\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]16\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox[
                    RowBox[{"Output", " ", "Ports"}], FontWeight -> Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Prediction\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 56\[Times]56\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    Part[
                    Association[
                    "Nodes" -> 
                    Association[
                    "folded" -> 
                    Association[
                    "Type" -> "NetFold", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["State" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["dummy-input" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input1" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], "single-update" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["cell-dropout" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "NetArray", "Arrays" -> 
                    Association["Array" -> NeuralNetworks`Private`DummyArray[{
                    56, 56}]], "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT], "$ArrayDimensions" -> {56, 56}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "2" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Replicate", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[16], "Level" -> 3], 
                    "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], "perception" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["percepted" -> NeuralNetworks`TensorT[{56, 56,
                     48}, NeuralNetworks`RealT]], "Nodes" -> 
                    Association["sobel-x" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 16, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 16, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "sobel-y" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 16, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 16, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "catenate" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 3], 
                    "Inputs" -> Association["Input1" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    48}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "sobel-y", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath[
                    "Nodes", "sobel-x", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Inputs", 
                    "Input3"] -> NeuralNetworks`NetPath[
                    "Nodes", "sobel-y", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "percepted"] -> 
                    NeuralNetworks`NetPath["Nodes", "catenate", "Outputs", 
                    "Output"]}], "pre-living" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> (PartLayer[{All, All, 1}][
                    PoolingLayer[3, "PaddingSize" -> 1, 
                    "Input" -> {$CellContext`width, $CellContext`height, 1}, 
                    Interleaving -> True][
                    PartLayer[{All, All, 
                    Span[4, 4]}][#]]] > 0.1& ), "Net" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 4]}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$Channels" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 1}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 1},
                     NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[# > 
                    0.1& ], "$Dimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]]], "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "update" -> 
                    Association["Type" -> "NetMap", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "Net" -> Association["Type" -> "NetMap", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> Association[
                    "1" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{128, 48},
                     NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association["OutputDimensions" -> {128}, 
                    "$OutputSize" -> 128, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]], "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128}], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "3" -> Association[
                    "Type" -> "Linear", "Arrays" -> Association[
                    "Weights" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {16, 128}], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association["OutputDimensions" -> {16}, 
                    "$OutputSize" -> 16, "$InputSize" -> 128, 
                    "$InputDimensions" -> {128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]]]], "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 56, 
                    "$InputShape" -> NeuralNetworks`TensorT[{48}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> 
                    NeuralNetworks`TensorT[{56, 48}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> 
                    NeuralNetworks`TensorT[{56, 16}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> 56, "$InputShape" -> 
                    NeuralNetworks`TensorT[{56, 48}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{56, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    48}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], "dot-plus" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Apply[# #2 + #3& ], "Net" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[#3 + # #2& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]], 
                    "Inputs" -> Association["Input1" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input1", "Input2", "Input3"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], "post-living" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> (PartLayer[{All, All, 1}][
                    PoolingLayer[3, "PaddingSize" -> 1, 
                    "Input" -> {$CellContext`width, $CellContext`height, 1}, 
                    Interleaving -> True][
                    PartLayer[{All, All, 
                    Span[4, 4]}][#]]] > 0.1& ), "Net" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 4]}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> True, 
                    "$Channels" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False], "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    1}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 1}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 1},
                     NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[# > 
                    0.1& ], "$Dimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]]], "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT]]], "times" -> 
                    Association["Type" -> "Function", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Apply[# #2 #3& ], "Net" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Input3" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]], 
                    "$InputNames" -> {"Input1", "Input2", "Input3"}, 
                    "$OutputNames" -> {"Output"}], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{56, 56}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Input3" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{56, 56, 
                    16}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "pre-living", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "perception", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cell-dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "update", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "perception", "Outputs", "percepted"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pre-living", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "update", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "post-living", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot-plus", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "post-living", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "times", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "dummy-input", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dummy-input", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "single-update", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dummy-input", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "single-update", "Outputs", "Output"]}], 
                    "Recurrence" -> 
                    NeuralNetworks`ValidatedParameter[{"Output" -> "State"}], 
                    "ConstantPorts" -> {}, "OutputPorts" -> {"Output"}, 
                    "$InputNames" -> {"Input"}, "$StateNames" -> {"State"}, 
                    "$OutputNames" -> {"Output"}, "$ForceStateRank" -> False, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[358005548]],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[358005548], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[358005548], 56, 56, 16}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], "state-seq" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[358005548], 56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]]], "part" -> 
                    Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[1, 4]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`RealT]]], "loss" -> 
                    Association[
                    "Type" -> "MeanSquaredLoss", "Arrays" -> Association[], 
                    "Parameters" -> Association["$Dimensions" -> {56, 56, 4}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], "Inputs" -> 
                    Association["Iterations" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[358005548], 1}, 
                    NeuralNetworks`RealT], "InitialState" -> 
                    NeuralNetworks`TensorT[{56, 56, 16}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Prediction" -> 
                    NeuralNetworks`TensorT[{56, 56, 4}, NeuralNetworks`RealT],
                     "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "folded", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Iterations"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "folded", "States", "State"] -> 
                    NeuralNetworks`NetPath["Inputs", "InitialState"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "state-seq", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "folded", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "state-seq", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Prediction"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "InitialState"], 
                    NeuralNetworks`NetPath["Nodes", "folded"], 
                    NeuralNetworks`NetPath["Inputs", "Iterations"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Nodes", "state-seq"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Nodes", "part"], 
                    NeuralNetworks`NetPath["Outputs", "Prediction"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "InitialState"], 
                    NeuralNetworks`NetPath["Nodes", "folded"], 
                    NeuralNetworks`NetPath["Inputs", "Iterations"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Nodes", "state-seq"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Nodes", "part"], 
                    NeuralNetworks`NetPath["Outputs", "Prediction"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[], {}], 
                    ToBoxes[""]], ImageSizeCache -> {0., {0., 5.}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.818515425365979*^9, 3.818576178347951*^9, {3.818576345045866*^9, 
   3.818576350974546*^9}, {3.8186586497242804`*^9, 3.8186586499320602`*^9}, 
   3.8197856752707376`*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"4d4c4781-ff68-4ac1-b391-472b9e1950ae"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"net", "[", "\"\<graph-trained\>\"", "]"}], "=", 
    RowBox[{"NetTrain", "[", 
     RowBox[{
      RowBox[{"net", "[", "\"\<graph\>\"", "]"}], ",", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<InitialState\>\"", "\[Rule]", 
         RowBox[{"Table", "[", 
          RowBox[{"singleSeed", ",", "3"}], "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "\[Rule]", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"targetPokemon", ",", "3"}], "]"}]}], ",", 
        RowBox[{"\"\<Iterations\>\"", "->", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ConstantArray", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"RandomInteger", "[", 
                RowBox[{"{", 
                 RowBox[{"64", ",", "96"}], "}"}], "]"}], ",", "1"}], "}"}]}],
             "]"}], ",", "3"}], "]"}]}]}], "|>"}], ",", 
      RowBox[{"MaxTrainingRounds", "\[Rule]", "10000"}], ",", 
      RowBox[{"RandomSeeding", "\[Rule]", "1996"}], ",", 
      RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.81851553305954*^9, 3.818515541754099*^9}, {
   3.8185762196253147`*^9, 3.818576246387735*^9}, {3.818576306757676*^9, 
   3.818576312564877*^9}, {3.818576358228922*^9, 3.818576384403867*^9}, {
   3.818576464838314*^9, 3.81857647589393*^9}, 
   3.8185792575700207`*^9},ExpressionUUID->"f619f914-191a-423a-b80f-\
3de044075494"],

Cell["\<\
The growth patterns showed good stability b/w the \[OpenCurlyQuote]seen\
\[CloseCurlyQuote] training set (i.e. 64-96 iterations), but were unstable \
afterwards..\
\>", "Text",
 CellChangeTimes->{
  3.818659352044465*^9, {3.818659402974571*^9, 3.818659501128038*^9}, {
   3.818737321634192*^9, 3.8187373218748417`*^9}, 3.818757413174541*^9, {
   3.819785681597157*^9, 
   3.8197856832367973`*^9}},ExpressionUUID->"9253afc2-fc66-42ad-a562-\
1fcaf03cf706"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 760.5},
WindowMargins->{{0, Automatic}, {0, Automatic}},
PrivateNotebookOptions->{"CloudPublishPath"->"03_differentiable-cellular-\
automata.nb"},
FrontEndVersion->"12.2 for Linux x86 (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"ac058d56-8cc4-4a5d-923a-ad3ffc6d93ef"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "SlideShowHeader"->{
  Cell[1322, 40, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"7c6b01f7-debe-4cb1-80d0-b3808cf2e13b",
   CellTags->"SlideShowHeader"],
  Cell[3263, 86, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"efc2bc96-d648-4174-bd96-7d2c764b56da",
   CellTags->"SlideShowHeader"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"SlideShowHeader", 2566032, 46094}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 395, 7, 98, "Title",ExpressionUUID->"46f0ebb6-da31-46ef-9c45-71befa538d10"],
Cell[978, 31, 307, 4, 53, "Subtitle",ExpressionUUID->"50eacdd3-276d-4ac8-a6e7-95b7fc4a741f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1322, 40, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"7c6b01f7-debe-4cb1-80d0-b3808cf2e13b",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[1469, 46, 261, 4, 68, "Section",ExpressionUUID->"de87d933-2457-4f35-a065-f6c53bb382a9"],
Cell[CellGroupData[{
Cell[1755, 54, 788, 11, 29, "Input",ExpressionUUID->"4361f01e-889f-4967-a9db-ea2b92bf8c25"],
Cell[2546, 67, 180, 2, 33, "Output",ExpressionUUID->"c8c7e840-c32c-41ad-a35b-d70f6a54c38c"]
}, Open  ]],
Cell[2741, 72, 473, 8, 29, "Input",ExpressionUUID->"aee06d82-363b-4b0f-a7a1-50dc2a947075"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3263, 86, 122, 2, 74, "SlideShowNavigationBar",ExpressionUUID->"efc2bc96-d648-4174-bd96-7d2c764b56da",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[3410, 92, 86, 0, 68, "Section",ExpressionUUID->"ffc3a815-1b09-436c-8413-03ed89068b8f"],
Cell[3499, 94, 1169, 21, 81, "Text",ExpressionUUID->"274cc22a-5f52-4754-bb3c-5a7b686103b0"],
Cell[CellGroupData[{
Cell[4693, 119, 94, 0, 54, "Subsection",ExpressionUUID->"57054323-69c2-4e41-9de6-1c1db67f2b72"],
Cell[4790, 121, 78077, 1295, 577, "Text",ExpressionUUID->"be87c24d-e61a-4fde-8a92-bfc61156c54f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[82916, 1422, 158, 3, 68, "Section",ExpressionUUID->"a4014d4e-489b-4225-82b1-e9bb96e6bf22"],
Cell[83077, 1427, 370, 8, 35, "Text",ExpressionUUID->"c0c662e2-dfa7-4609-b607-9d62ca8fb63e"],
Cell[83450, 1437, 640, 15, 92, "Input",ExpressionUUID->"937d354b-38ae-4bca-9e60-2deb70ae1199"],
Cell[84093, 1454, 1817, 43, 119, "Input",ExpressionUUID->"f22bd225-daa9-49fa-8eb2-4e18e2fa912e"],
Cell[CellGroupData[{
Cell[85935, 1501, 2514, 55, 139, "Input",ExpressionUUID->"e6fd4f58-1fd2-434d-93b1-36f675103a46"],
Cell[88452, 1558, 273, 4, 33, "Output",ExpressionUUID->"3797a524-d091-45a4-acc4-3abea1b98cf6"],
Cell[88728, 1564, 1432065, 23481, 633, "Output",ExpressionUUID->"1f93744a-016b-449f-a0f8-9d938e9dc10d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1520842, 25051, 155, 3, 68, "Section",ExpressionUUID->"92284798-39ce-4e4d-8f72-326f391b94b9"],
Cell[CellGroupData[{
Cell[1521022, 25058, 267, 5, 32, "Item",ExpressionUUID->"fedd8ed3-9942-4ea1-84b3-88b9232bdd8e"],
Cell[1521292, 25065, 288, 5, 26, "Subitem",ExpressionUUID->"ff160c33-be6c-4e95-b5c9-59647d33f4cb"],
Cell[1521583, 25072, 291, 6, 26, "Subitem",ExpressionUUID->"14de067e-7630-4dd1-b205-980f225e3398"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1521911, 25083, 277, 5, 32, "Item",ExpressionUUID->"7bccf2d0-d66c-4991-9603-bdb524aebe16"],
Cell[1522191, 25090, 329, 5, 26, "Subitem",ExpressionUUID->"bb02116f-bee2-41d6-a0d8-9704bb12938f"],
Cell[1522523, 25097, 448, 8, 26, "Subitem",ExpressionUUID->"2e48e69c-b34f-4638-832b-3ccf0fe3b9e5"],
Cell[1522974, 25107, 418, 8, 26, "Subitem",ExpressionUUID->"1889e217-fceb-4838-8ae9-2c759a868a23"]
}, Open  ]],
Cell[1523407, 25118, 599, 12, 58, "Text",ExpressionUUID->"41981c75-94e7-4cb7-a4b9-e80750700b38"],
Cell[1524009, 25132, 1580, 44, 133, "Input",ExpressionUUID->"781cb364-bb34-4155-8583-d29392ea623c"],
Cell[1525592, 25178, 919, 20, 113, "Input",ExpressionUUID->"e6fc06ae-e2bb-4c74-9158-207f33010750"],
Cell[CellGroupData[{
Cell[1526536, 25202, 818, 19, 51, "Input",ExpressionUUID->"da9a5f67-ce60-4fbc-94ab-86d2bab9d01a"],
Cell[1527357, 25223, 3748, 68, 466, "Output",ExpressionUUID->"df72beff-6de4-4593-9cd1-fdc7b6906393"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1531154, 25297, 277, 4, 68, "Section",ExpressionUUID->"0b13ca31-fcd1-4e40-872c-01cc73b40fca"],
Cell[1531434, 25303, 63118, 1041, 327, "Text",ExpressionUUID->"05d1d768-d458-4b14-97b2-7866e7716e79"],
Cell[1594555, 26346, 182, 3, 35, "Text",ExpressionUUID->"af3cfe4a-fb7a-4267-a1ac-75dbcd91401a"],
Cell[CellGroupData[{
Cell[1594762, 26353, 203, 4, 32, "Item",ExpressionUUID->"13c0d3bb-6db2-4730-ab35-3cfb1a9fe3e5"],
Cell[1594968, 26359, 269, 6, 26, "Subitem",ExpressionUUID->"c1586e6a-fc7c-42ef-b8d9-d651475ee6b6"],
Cell[1595240, 26367, 204, 3, 26, "Subitem",ExpressionUUID->"bb551d81-2b1b-4631-9c53-95a5050898ac"],
Cell[CellGroupData[{
Cell[1595469, 26374, 271, 6, 26, "Subitem",ExpressionUUID->"5a999b69-39fb-4d0e-8446-5fcf12c536a2"],
Cell[CellGroupData[{
Cell[1595765, 26384, 4614, 125, 257, "Input",ExpressionUUID->"9fec43b7-f05e-4128-ae5e-0dbf29d19de1"],
Cell[1600382, 26511, 108499, 2303, 258, "Output",ExpressionUUID->"c5ee1636-1bd5-4a9f-a087-e5f36618f2a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1708918, 28819, 467, 12, 29, "Input",ExpressionUUID->"eda04a70-5948-4495-bc93-af9f6dff2cbe"],
Cell[1709388, 28833, 229, 4, 33, "Output",ExpressionUUID->"d09685e4-27ed-49d1-a4dd-5b345457d6e4"]
}, Open  ]]
}, Open  ]],
Cell[1709644, 28841, 317, 6, 26, "Subitem",ExpressionUUID->"b751051d-4ebc-4c60-9161-0415b281ef9b"],
Cell[1709964, 28849, 352, 7, 26, "Subitem",ExpressionUUID->"fa23d721-2303-4c76-a0fe-944192264e62"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1710353, 28861, 204, 4, 32, "Item",ExpressionUUID->"0ee484bc-eeac-4be1-b4a3-7bd858757cd3"],
Cell[1710560, 28867, 317, 7, 26, "Subitem",ExpressionUUID->"6f0d4eca-bb2b-4e84-a0f1-31897f119b52"],
Cell[1710880, 28876, 351, 7, 26, "Subitem",ExpressionUUID->"4a201d7b-bf1a-4c55-aec5-bfe4adfd4418"],
Cell[CellGroupData[{
Cell[1711256, 28887, 468, 10, 28, "Subitem",ExpressionUUID->"4b00f3c8-f944-4267-bb46-a203e8895007"],
Cell[CellGroupData[{
Cell[1711749, 28901, 762, 19, 29, "Input",ExpressionUUID->"66364680-2135-44f5-8a2d-8f9cecd4ce8e"],
Cell[1712514, 28922, 38947, 725, 127, "Output",ExpressionUUID->"b2f17dc9-a917-43bd-ab69-811960055879"]
}, Open  ]]
}, Open  ]],
Cell[1751488, 29651, 539, 10, 26, "Subitem",ExpressionUUID->"7b09e80d-4e48-4f3d-9989-8aaf3e9014cf"],
Cell[CellGroupData[{
Cell[1752052, 29665, 396, 6, 26, "Subitem",ExpressionUUID->"d18ee3b6-f67d-466d-b6fe-0a7afbab2ef1"],
Cell[CellGroupData[{
Cell[1752473, 29675, 678, 18, 51, "Input",ExpressionUUID->"212a975e-e66e-4d9c-bf62-bb7d4e063ba1"],
Cell[1753154, 29695, 280, 5, 33, "Output",ExpressionUUID->"c27ac1a3-bbfe-40bb-a086-48ffc477a6c3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1753495, 29707, 263, 4, 32, "Item",ExpressionUUID->"ce58bc19-ddf2-4941-ad9e-8f0dcc653cb1"],
Cell[CellGroupData[{
Cell[1753783, 29715, 435, 8, 26, "Subitem",ExpressionUUID->"2bf3889c-a9c3-4182-935f-ba3194dacb12"],
Cell[CellGroupData[{
Cell[1754243, 29727, 782, 19, 29, "Input",ExpressionUUID->"e0850b30-f209-4c00-b7e1-e85575f12ea5"],
Cell[1755028, 29748, 20595, 424, 87, "Output",ExpressionUUID->"aab19536-0cc4-4686-b5de-e30082d2b295"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1775660, 30177, 317, 7, 29, "Input",ExpressionUUID->"61573687-1bca-4d28-9aee-5ae5cd85989b"],
Cell[1775980, 30186, 275, 6, 33, "Output",ExpressionUUID->"845c6332-74ac-432a-9f32-d9620f37ee60"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1776292, 30197, 380, 8, 29, "Input",ExpressionUUID->"f7dffe81-302e-4a0f-9a8c-c8b434bc9cec"],
Cell[1776675, 30207, 403, 9, 33, "Output",ExpressionUUID->"2eed5609-97e7-49ed-bf18-9d65af9f6614"]
}, Open  ]]
}, Open  ]],
Cell[1777105, 30220, 997, 22, 66, "Subitem",ExpressionUUID->"a0f82ece-c985-418c-b8be-72f5c931160d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1778139, 30247, 304, 5, 32, "Item",ExpressionUUID->"abbbcdd2-3fe6-492b-82b2-a18a20ec271e"],
Cell[CellGroupData[{
Cell[1778468, 30256, 413, 8, 26, "Subitem",ExpressionUUID->"f0773fa0-aff5-402c-8e1f-17600d414bec"],
Cell[CellGroupData[{
Cell[1778906, 30268, 521, 8, 25, "Subsubitem",ExpressionUUID->"17bcd126-8235-40fe-990b-ebcd74ac019a"],
Cell[CellGroupData[{
Cell[1779452, 30280, 992, 25, 51, "Input",ExpressionUUID->"596743fa-401b-45f0-98df-437219b6596a"],
Cell[1780447, 30307, 50419, 932, 64, "Output",ExpressionUUID->"f0bc806a-544f-48cb-98b3-6271bd40d720"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1830903, 31244, 392, 8, 29, "Input",ExpressionUUID->"a97de355-0d7a-49e1-a661-464d2922651e"],
Cell[1831298, 31254, 850, 18, 73, "Output",ExpressionUUID->"d14db609-e3c5-47a3-b424-11cb9f0f8927"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[1832199, 31278, 253, 4, 35, "Text",ExpressionUUID->"76440cb2-8f91-4ac5-8cb5-de21816d6b97"],
Cell[CellGroupData[{
Cell[1832477, 31286, 2868, 71, 113, "Input",ExpressionUUID->"670d7677-d892-43d7-8b84-47bc30bdd7c7"],
Cell[1835348, 31359, 223818, 4660, 331, "Output",ExpressionUUID->"1b91508d-03bc-49d7-b737-d374c0905378"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2059203, 36024, 510, 13, 29, "Input",ExpressionUUID->"1baa47bc-becd-4cd6-9886-079b9d626dc3"],
Cell[2059716, 36039, 258, 5, 33, "Output",ExpressionUUID->"f6f2b590-10ea-4bdd-829e-63f08c423a5c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2060023, 36050, 307, 5, 68, "Section",ExpressionUUID->"d19bd63b-d9ef-4f14-bc33-67105738502c"],
Cell[2060333, 36057, 582, 12, 36, "Text",ExpressionUUID->"0af5f690-4f84-4250-9e4d-16a188c442eb"],
Cell[CellGroupData[{
Cell[2060940, 36073, 564, 15, 29, "Input",ExpressionUUID->"2ead90f6-d50d-4e25-8ec9-e663f7bc0cdc"],
Cell[2061507, 36090, 51883, 958, 65, "Output",ExpressionUUID->"94c1438d-1331-4882-ba2a-b9aca70c30b8"]
}, Open  ]],
Cell[2113405, 37051, 296, 6, 26, "Subitem",ExpressionUUID->"168c8294-c306-457a-96ca-cb6585f72161"],
Cell[CellGroupData[{
Cell[2113726, 37061, 158, 3, 54, "Subsection",ExpressionUUID->"55dfce9a-e157-44d7-8c05-e1c0c7218bc5"],
Cell[2113887, 37066, 433, 9, 35, "Text",ExpressionUUID->"d9f88634-5976-483c-9772-d65cf1522ae8"],
Cell[2114323, 37077, 934, 25, 52, "Input",ExpressionUUID->"5252b675-10d3-428e-90da-2085237de856"],
Cell[2115260, 37104, 691, 17, 71, "Input",ExpressionUUID->"162344cc-59e3-49b7-ac8b-6922a50b0375"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2115988, 37126, 164, 3, 54, "Subsection",ExpressionUUID->"b6843923-e536-428f-817f-a91d15053b1a"],
Cell[2116155, 37131, 697, 13, 104, "Text",ExpressionUUID->"0e3761c6-ab00-4ac3-b688-645d5cc7ce79"],
Cell[2116855, 37146, 255, 6, 26, "Subitem",ExpressionUUID->"951f7e38-940b-4d4e-9a6f-f9ff05420f06"],
Cell[CellGroupData[{
Cell[2117135, 37156, 224, 5, 26, "Subitem",ExpressionUUID->"97e2b914-2b5d-41a8-a6e2-22be3c58fd4b"],
Cell[2117362, 37163, 240, 6, 25, "Subsubitem",ExpressionUUID->"9caa5eb8-c87a-465a-972a-b2739ad5f83c"]
}, Open  ]],
Cell[2117617, 37172, 784, 14, 36, "Text",ExpressionUUID->"b1ac948d-d1b7-4aa0-bebc-7852e4705e3e"],
Cell[2118404, 37188, 646, 11, 35, "Text",ExpressionUUID->"7473c52f-99d6-4fd8-846d-5208824274ef"],
Cell[2119053, 37201, 240, 6, 25, "Subsubitem",ExpressionUUID->"1e1aa4f1-a496-48c1-a77d-bc0b2fa1199e"],
Cell[2119296, 37209, 568, 10, 35, "Text",ExpressionUUID->"0cbcf96c-f551-4a04-9096-d2aa10348a75"],
Cell[CellGroupData[{
Cell[2119889, 37223, 2185, 56, 154, "Input",ExpressionUUID->"1b41c198-4ecc-4edc-96f2-cee07b8ee7fd"],
Cell[2122077, 37281, 257498, 4987, 288, "Output",ExpressionUUID->"583a69dd-d2f9-4cd9-be76-cd04dc9525f1"]
}, Open  ]],
Cell[2379590, 42271, 631, 11, 35, "Text",ExpressionUUID->"0cd0c6cb-498f-440f-9e11-6b792a28a175"],
Cell[CellGroupData[{
Cell[2380246, 42286, 538, 11, 51, "Input",ExpressionUUID->"840e799c-7482-4032-8943-fd3ae2f81b24"],
Cell[2380787, 42299, 1377, 37, 75, "Output",ExpressionUUID->"683617aa-8ae3-49a0-9153-99c49b642850"],
Cell[2382167, 42338, 1034, 25, 55, "Output",ExpressionUUID->"7541ba7c-8df4-4c0b-9d24-13f731c3f2c7"]
}, Open  ]],
Cell[2383216, 42366, 718, 12, 35, "Text",ExpressionUUID->"32eaeb98-fbf1-4d50-ad18-c5bcaf8f3bf8"],
Cell[2383937, 42380, 790, 18, 71, "Input",ExpressionUUID->"651c0f1c-9459-4c57-bc38-d2699948da6f"],
Cell[2384730, 42400, 603, 14, 71, "Input",ExpressionUUID->"b9d64b1b-46f3-4170-a21e-cd8c561f49e0"],
Cell[2385336, 42416, 352, 6, 29, "Input",ExpressionUUID->"fdfdd3ca-fa9b-45d8-8a59-0efefb64093d"],
Cell[2385691, 42424, 835, 13, 35, "Text",ExpressionUUID->"709f418e-b11e-4282-8fe9-93083cf8f85e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2386575, 42443, 357, 6, 68, "Section",ExpressionUUID->"0d97ad07-18df-4b07-9a35-1688b3f18ee3"],
Cell[2386935, 42451, 1729, 31, 105, "Text",ExpressionUUID->"24cf4ccb-a8d5-4930-abcd-2e52af9dd71c"],
Cell[CellGroupData[{
Cell[2388689, 42486, 3263, 78, 174, "Input",ExpressionUUID->"502e141e-8e1d-41e8-a520-b04b09975a1d"],
Cell[2391955, 42566, 171540, 3460, 258, "Output",ExpressionUUID->"4d4c4781-ff68-4ac1-b391-472b9e1950ae"]
}, Open  ]],
Cell[2563510, 46029, 1584, 36, 113, "Input",ExpressionUUID->"f619f914-191a-423a-b80f-3de044075494"],
Cell[2565097, 46067, 464, 10, 35, "Text",ExpressionUUID->"9253afc2-fc66-42ad-a562-1fcaf03cf706"]
}, Open  ]]
}, Open  ]]
}
]
*)

