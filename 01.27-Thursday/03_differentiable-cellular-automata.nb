(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    209741,       4005]
NotebookOptionsPosition[    200069,       3854]
NotebookOutlinePosition[    200565,       3872]
CellTagsIndexPosition[    200522,       3869]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Differentiable CAs (NNs)", "Title",
 CellChangeTimes->{
  3.559948400406288*^9, {3.6940927217181253`*^9, 3.694092740906395*^9}, {
   3.787777920516901*^9, 3.787777926080781*^9}, {3.7877843783043165`*^9, 
   3.7877843821022177`*^9}, {3.819778299979034*^9, 3.819778307514834*^9}, {
   3.819785068455414*^9, 
   3.819785075671529*^9}},ExpressionUUID->"46f0ebb6-da31-46ef-9c45-\
71befa538d10"],

Cell[CellGroupData[{

Cell["Following along", "Section",
 CellChangeTimes->{{3.694093676858917*^9, 3.6940936816804*^9}, {
  3.6940937866096673`*^9, 3.6940937867661943`*^9}, {3.6941317124743834`*^9, 
  3.6941317126488924`*^9}},ExpressionUUID->"de87d933-2457-4f35-a065-\
f6c53bb382a9"],

Cell[BoxData[
 RowBox[{"URLShorten", "[", 
  "\"\<https://raw.githubusercontent.com/gvarnavi/generative-art-iap/master/\
01.27-Thursday/03_differentiable-cellular-automata.nb\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.694093199793154*^9, 3.694093228612194*^9}, {
  3.6940932838462496`*^9, 3.6940933356994576`*^9}, {3.726249112392106*^9, 
  3.7262491155801144`*^9}, {3.7262495833255453`*^9, 3.7262495839677534`*^9}, {
  3.7877780577882156`*^9, 3.787778077488515*^9}, {3.787784429038597*^9, 
  3.787784439979081*^9}, {3.788089486924706*^9, 3.7880894870496764`*^9}, {
  3.819778334924054*^9, 3.8197783575881367`*^9}, {3.819784865430065*^9, 
  3.819784865501759*^9}, {3.81978506501598*^9, 3.819785090967433*^9}, {
  3.8518606988134117`*^9, 3.851860703387589*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"4361f01e-889f-4967-a9db-ea2b92bf8c25"],

Cell["\<\
Evaluate the following command in an empty notebook locally to get this \
notebook\
\>", "Text",
 CellChangeTimes->{
  3.851860715603005*^9},ExpressionUUID->"3f2f9f5b-4803-4d2b-977c-\
2cee168d949e"],

Cell[BoxData[
 RowBox[{"NotebookOpen", "[", "\"\<https://wolfr.am/11HRO7zjm\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.694093341974367*^9, 3.6940933595080605`*^9}, 
   3.726249127923258*^9, {3.726249586284813*^9, 3.7262495868166833`*^9}, {
   3.787778082380721*^9, 3.7877780831460705`*^9}, 3.787784447309518*^9, 
   3.788089493525613*^9, 3.8197783737575293`*^9, 3.819784981176464*^9, 
   3.8197851029769506`*^9, 
   3.851860718358759*^9},ExpressionUUID->"aee06d82-363b-4b0f-a7a1-\
50dc2a947075"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Introduction", "Section",ExpressionUUID->"ffc3a815-1b09-436c-8413-03ed89068b8f"],

Cell[TextData[{
 "So far, we\[CloseCurlyQuote]ve mostly looked at discrete state CA, e.g. our \
\[OpenCurlyQuote]binary\[CloseCurlyQuote] elementary CAs - which could either \
be \[OpenCurlyDoubleQuote]alive\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]dead\[CloseCurlyDoubleQuote].\nI recently stumbled \
upon this ",
 ButtonBox["excellent blog post",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://distill.pub/2020/growing-ca/"], None}],
 " about a differentiable model of morphogenesis using neural networks and \
cellular automata, and figured it would be a great demonstration for the \
class!\nIn order to allow for our neural networks to minimize the gradient \
loss function - we need to allow for continuum state CAs, e.g. taking any \
real value between 0-1."
}], "Text",
 CellChangeTimes->{{3.818576836267108*^9, 3.818576836267812*^9}, {
  3.8186591864130297`*^9, 3.818659189165161*^9}, {3.818659643841962*^9, 
  3.818659651655953*^9}, {3.818757220150125*^9, 3.818757220629629*^9}, {
  3.819785129296197*^9, 3.8197852224806633`*^9}, {3.819785307257308*^9, 
  3.819785349593803*^9}},ExpressionUUID->"274cc22a-5f52-4754-bb3c-\
5a7b686103b0"],

Cell[CellGroupData[{

Cell["Problem Statement", "Subsection",ExpressionUUID->"57054323-69c2-4e41-9de6-1c1db67f2b72"],

Cell[TextData[{
 "I recommend reading the blog post above after class, but essentially we're \
trying to ",
 StyleBox["teach",
  FontSlant->Italic],
 " a neural network to learn the update rules for a continuous state cellular \
automaton on a 3x3 ",
 StyleBox["Moore ",
  FontSlant->Italic],
 StyleBox["neighborhood in order to grow and reproduce a pattern. \n\nWhile \
the blog above uses emojis, we'll query the Wolfram Knowledgebase and use \
first-generation Pokemon characters instead.",
  FontSlant->Plain],
 "\n",
 StyleBox["At the end, we'll end up with cellular automata models of the \
sort:\n\n",
  FontSlant->Plain],
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzs3AdYU9m6MP6d3kMSQm+h9957771L79J7k94EpCkgKNhQEcVewS5YsGBX
VFARURERFSlKE/cXPfP9773fvXNm/vc5c5xx1u95yFZIdvZab9Za77t3EtHQ
RLflSAiCUvHsG7eQTNOUlJAsdzr7P54JqdGRCRHhtglpEZERKapaUSj2b9vZ
P8/ZP2gIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgr0cHbYnrwiRSzCltnAK0tVLn6HuY
TM5NCs34UswZvAX5Rx8fAAAAAPwRSLgWCoW4ko8l+EI8nO+MQ5Zyo0KnmEzK
TpYyfSdXlqkJ/j/uy4k4ivi1/QjxV36/p6vaMwEIEuVjKezg7cLflr7MaUdk
oPW5nqJ8kRAU+quPBwAA+KuTRBtgXFBX8XLEMhwGc58xQoERFoibdC7CP/6e
gv6fHxfA8Y/tY85vtyqITuq37R3sW0IkCoIESTb4HGwg8jDxIyYXcw4ZjP+f
9wL8/2VJfUyPICaKximcVpER2hb10rLDJFr5zf4NLnWqN2Q4D82IdzKMMZlm
LMJ/fpQO5v/dj5q1PMcxZLewa8YpozbRxCQZl7cqR/i6gi4ZxrN2UJttadSr
6CDULg5ZzLcXwNC/rX0A8DPRxH677YEmkf/1959/2QZj/7GV/j7PXkR8wa5F
L0P64Neiy9Cfka+x/7YD/Zt6gnUhvMbPMy7w1QkE8W4yvyRlT8ohXbfWVkhg
//WylpPEt3td5cKjvm3zf1n1bCiCkt+2B8XXOdTxXKLa2KzWXc0N0U46PDWY
5DtOpLhGSEpwnSBVKj5g7CN34vi4J4nF+HWoCeIPauZPo5h2jceRmixToHXd
mEcmsui2xaK3jJ3YtX0y1Q6BPr2P9Oyvql/lW3dste2QuAKjvTRZB0vnJfY7
HCB9ezQs/Y+9bJJJDRmU6OR/npTbLh9wz+TVpf6sOstF3oA1+HoxDy3ZfYcW
VYd5r5KCjKL4VQi2qOPMbN4e9isgla7Mu4Bj74fSiBZk///1r2RHAPD3tolA
J9SgRagtgvn4JUSr5Djr2289lBe+z6Daqha837YNVg91blI3Ym29FTSbOCsI
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
1Vf9KPSG/hn5+KZ0tzRDRRXefTf0D6hPK8nuTKZ3SBPV+vccwaN1N5upboMg
mvohI0QVBDkoOOkcT8vljhNnyNzyD+M8w7zGgGV+dO/+qxzFPSSnErw4IWgP
WYnixs7vr+Gd8dvZfZtGbsMdwYgjmTxt3Kf4GxWG7VQd1da91v6acCfFabJN
Mz5nWx67n5X35roUwLC37rvcsKybizix+7ErMm/Nt3CLLzOP3jESz+vq4BaU
8DUsWjx9nVfGx7fVJjZuyjX9spIF7Odoifyar2WuIcraD8MTdWJ2iImiWa+a
B+z43R2IX9HEHq/JeQ/MHCQ0GiJT79gGyqXXnQiTNY5XQuxY4xhq1aZhfey5
3jXbYYuzt7mIrXqbnDYMnOMQ9paN7HvYxWcX9jAO9cAG4e7SECx3CYIk9Jxc
SAfvSbsbG1kUbkvW+WxyVk+7bJuIlPScpKrNdexH4lHiNP1Hx+O3eJBTCGoY
b/pVHkNxD+Fb5iziiHqtHikAgj5xinPT2PONDPU1IYJdYYXRjUlnEWW4eFYl
a1zUXx1eTk5svxmrcjHza0nukpDKx5yqEhiuU3qTw8eOn6v25sK2vDZ4r7hG
clN2w0IGl7SvfIz8WIrAXmeTIMyc7fLRVCsP7reKhRZmzrLZPWmSNBIEZYZu
yf1gdUb6YDt7ZK43dV0aH/rYszqBnbe8fPI4y8Py4pf01CEDW7EVK9NTHW1n
5HpqNkZZm5upPNuLcFntUK2bd95OM955n92b4RRip9W4d+qHJM7jUXrZapOX
ZV/n2a4qnD7ILxqPzlwx+oBi5f10udmTGYER23jPzstZuu0+Sz4t17K1+Pxy
/EU7rojZ678yNs7dyPVKsE043ug2joGn4PP/9PnM73UKuZ+4F32OfIXzk9g1
TgltXv0ppx1G+ptZupKhOsHzNwPkukPk4waeDdDuOlF9owdV+Z76SviNTI9K
SSyz9hWdGhOO907xg+EDoV+Lbi+D4auPODY72sLwm+P8OdNaKZ/3vuVc38KO
G8/7E3Vr9W8sPZvsq2Caty+47+5wm+ENOHOrki8Yp6X0eN5k3GmLzrn7uhqV
hqn65w/JS9/kahPUihHm1BPOFXKIZs8ofHQhX1sIKmWe4Z5W/NH99qMJInLx
/pgb2BlsHNdl5m1xPxVduzLL3sZek/UJ4lHTL7YYWOdhC2kwv2ZcjFfihwl3
ponTS++EZ0eEIO/0ZQrvZbitLYVdVSaI/L5uRl4wvCoqv/Ayex2cuLV/vaMZ
DB+7cLlkij1fVnwq2Nxjx/77zN7aMV35L/yLGrUW7PmzoeNqaKtEzqPuNSGB
nhrcd14oY+3nDAl9h8VemDqYlB7n4nureFh9xXYndKXonHLZ6mO4bA2kWdp2
CMKpGpjLrIegIilYc19yNbe/yDbRLR6dPMPMozSG9I/u1z/eaRwnqh+Sgeox
LXgYfZDjkFiJzBHTHdrx4YFht/v6DewKI9jrH4emcYkDu34IUW+Mt01pm1Tl
VPX8GFw6psL5xPNq0J7JHVyfzLrdRT/iRQZd/D2vfMmNnsmgs+P0/DZ//bgB
e307f71snzV7HV24uSOEHVfrqaG1RFMY7v1SWbuCHV/9Q8XhfbLeowHN04Gj
yrm35uSVbLOMhZ5H0AcMVCzkz5gJPbK96KjBXt8IyorW+w7nEAY83BNc++/z
PgvDpxYPQFCyFSbQ8QwELYmuNW6qW6UirDKi6FSUYe1vQdLyL2bJjMj1S521
ScWXkwdIOM4f3eu/pYugi6ej75DQtBxua455MQiapLQQZxkQJI70/y/vTqgm
kHEQFAW9RccTHDFUvlOK0yr3Xa5pRCQ8TpOeENYoK8aXwTCfemqhLLtuz1bR
T96xYuxzA9c639joVxOGZIZXb8T8Ag+9xOLQsu0zBwWJLvxeX2eTIvfEbDSH
Yfte+YotOjAMd2WXwzbhXz99pbevd+dYFH23YV2J5a2vMMxf52Zm+PXOnvZQ
f/mA0fcNUr7TcpKP1OTP2A6aYN/eJfQY2Nva3IjkW+s66L3nNgTx6Cu5I3rO
cixGTBUxxssUVuZUVuRPqdFVIoIyBl5C0BOZa5bXd6awriiL6ys25NubLWM5
ne82MN3ub+cdcjBH6qxBgUl9XiBvoqib+Bub+/hQgiPh6k9zHXA9wgLdBhVh
lJECVEPCDLcd5zqpx+JZtnbCXNqDxhO5IpxFukO2lA0DBk89eWw1z8bGl6xs
jaqZtc70reuNheHmq5HN9a4FQ8dvBTVssZH4WjFvfs7UjR0/2PPDxZUwXDnp
eIo7CoabXlxftdP44njRE1LxcquTX8LOfY3cLGP/UrEY8seYRPdXW90wP6zO
sfOWOkX5q2pg7YxlkeYnpZshXiLrJVwkHfwQqLsseUl3H/a8yXTlq1T60f32
w6FfYu6hlhPeI87jZQiC5ASipshdSaLBuIq062OPylZzyWz3tpBrhyAoS+KR
ftqKNyrN1o56upu/JMTn8YavfkMuXFOT4sP88HnvUlW3w6vXqx6qbS51SGCP
r11nYly/xa95EJENw7afg05MxMEw5iVXVaoZ52Tic7vScPb8eePq/hU1coYj
DbuH47qN6e+cY1V8erQ+38yxO2Yxrb5ty2pnnHuNOWPrBxE7OS6l26lN9CJN
Z1OJnRDkovDVnGMtBPVKhaovxB7hmRfkFbS2J/HzMc9TILEf3a3/LqFoZcJp
rBNGC3mIWECTYuwXemWIt9TOs9UMiolLNn4uLlFjFxlwsZEC1dBviRsYh0ll
qAmK2ach0yk5vBH73kpVnlol5Cj5ZKJVY+WIbeB40qOIzV6OXxZg+Fon0eFb
/NJvWybBMOuz3pG6SBi+8jy4+pqV3WTvALkkjb0ONlwYycGqFI8c3iOcrGpK
eWueJxP0QqNnMCRsziva4NWx2Ez9jAFPmbsvWL7SJKVnJXzc1U5cYft7cRzv
vdPSyDcgyFhf0v/qcQhSI9fLckUhdXMle4RnAo959VjeUcJmrFVVVsRK1lso
ENMpGPLOn2a+/L+6oG788e/XS2sJz0lORIIoynbJ2W5HtEpjyoeChikeXmmj
dOe5EmG0PVWe/5WYmZCnbLdAXEBPnP0K4YjHYzaloaWWTtVDiTssS7Ttd7y3
7a/cdNm+ah6GXxzZbvstfpe6pb7FbSp4/+5AGK59s3+Nqg1t9kN/cYmz2a7F
8AtX8mDVa6Ob94wmaZhojflVvk+w0NcYdc0Yinpj0nZFspq/wslf8V2c8mW1
R6q0+iyR894fow9c5hAfzYTrZIYhyMlJNuHBk28tMBXYGBytw5DcIW7mUxa9
5IkyCt4V4ns6dNTNYc82qSCdJH33eDneXLE5iRd2+QQvogJxA9eP7f1/vThE
H7odtQkPQSSCHLWX8Qa/mrNf5JDqLjcFvQNa82vn92/PGnVd6pq+opK60TXu
svPGfa6NihNtT3YjMu+ZC717u2dPqYvTq6GKD14NcMC3+NW1DrPzn84vr7s2
prHriesTDaFm7ez4UvY9d7aYwLw7m+OsUDmq3Lo9Zlzf4sI1MwG9gyoX8mTV
u9S6ZPycykO9A44Zltnp6Xio31a66JxP2yxzSW6Yvf5ZcW/gI8v/6P76s9iE
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
CTp1GiriK0ZV3FncEFr8L3Oewp7bidmRikuc0dpe7azguH9WSJKlnbxg4bms
lj1kLcHK9AqyV5C+b618xXrosklpPffZhCP7XWNbfO/q1fMFnH9l/iThelZU
0OBSz+G22diOMeTbpYfx8VLguk+v40li61TWi+h7nvGuE2/bE67sChT48L4w
MpfRbuqijAun531NqxjPfdb7zJXYgz4GvrLHigV75RqcFD/H5Ch9hNyDI6Ke
/tt+r+b/NG14d+x5VA3lgogtezzdLRWye7T2jrh9Wlqeqes9nbX2+coc3ypD
vefzzbPRO5bDvXVvLLJqbRuGz7xJTus20RlZa0fkHrD1H69/7nwzKjZ2VLk/
5Ln54fFZ04Hi3vnsioWi0Y1+wVz9pbAxl3dPjzgtt4wJv31Q9GK5bjSw/0Vh
ycq5j+NdGdnHl4yfVd2gi2mbmD5dVlznfuxBXpNKKWbPRlves5UiGWvzHv+C
DgcGwTMZ4cxhBCz6NCr2LxpDH6FzkEqIUOwnunyCAo6VpU5+kCuYmXnXxwxt
R0VNs7uLTepBm+ZdK++b3AMOGRZPMlyHRxWZBo+zDk4WsdtcnC7YPl9d7woA
n1YCjo5ai22/eMtXwGUIAG+7Sq/EBlpv2X7I7jHJeb59fuTlB8e881uPx89+
kiu8t1k/Nv+prMxpc+XL5MerJzk3HSYefPQ8Hr6BHn/0uqRQaetmX1uLdlLS
8pe7grX9fuNj0x/eV7e7XfmasehSfcTObNH4elv4lJzX/TXWSkIqzPkvc93D
f4YHpwZ7BePAOIqbM3LQ1iq+yYyyy1eRv5V62ypM0RQAJK/GHqzXu7JId9U/
eMvQ69uFm4j4cGPi7L6Js+VEa/GZ5K2ySti+5zuvd4BTwXvAfOUrXXkz+DnR
l4q1THuNAc63HK+2vz8ndORtfwpYIsby3zjkAkDa583XWsXntisHM/quHGvZ
fDzk9/ZhWeVG5VBRt0rh9PbLfpOW1aQj6933J+rvBH2bUxrarLDZu2vBebut
ltu2GXjS6JKwrJHx6BSDFriGD4Li569wiWWQdhdhlhuvoy8pxkJx7HZv0tXh
xUcKxthabQkdSBPNEnJWl2zLyzkCHMhUjz3depIl7rap8G2ls8J55+xSO89c
u3W8zvX2+1O360/Xe34dYWpzPXPOO318465mDWl//yhby5OTIS5PB4fOreeQ
zZ0fyyUnHnymMFq8tWfNHMP3wPem1YyhBBfS0dUOvqubTc5cWLNDYhf9Mclg
anNyOcbyT/Pc1f9fXAmz2M8oXqqD4s84vel61C12W6u7CprFR4aJWbopohpu
5Mm552rca3a8eDpoXKvljmw3JinfZOjZ3WczqRvG7m+M7l0tQ7lf/PT+sewl
g3DqybLuxNs2cXdmxfoF2wPjMfNa7zH3S+KdFkbeOTw8mvxuUf/Dq0dHU4RW
Cj4kPgiNG1qN62O4wxlRuLj73qszuAPrX46d2pNOtqZvJ5ejY8t1mxrm6h+l
NurpXXp5pi48XSOg0dI3TP0ya4uVoIAMnQKejZYWG4xeR2T/ab9f+j9jheVB
eyDLCRlcDXQ4SpVIoFmYpCWXw/7gDIr9vFpK22Ypj6eE/uyHtZq2gJRd3wbm
mwtikEZmo/PjUkWl1s1zn7+1lL50UlqtHQ8oETELXTLpRpX5O3QsbvfoNovF
Oix19Pc8PZFlvTo4tPf5VsbA4r3h0WdxmSWLAsMlL77mSaw0fw7tmSvQXV8a
SX19O895+/rnh92Iw7I7n94dbH0Tlbgu9mq9zsA7ei64b7Xadk/IWMtn69O7
rPkm+Ef6SruNrszy51+ye8/LnuPKqQWuBfgpCz8fUUvBncU0IZ/+ae9bQeHv
IAbg9Tg6JkZCAU6FTdROUfa4wF5/Ur2Y78guqjGtc3f9hYwvL/mehwfdNp7+
xnATF/nZ5NSq+2P1VBWL8O3LCx+qHjj7bHEuh5wmgOv3sXn/yn7zg8CtftsC
GJi/4F9FXq7zb92of3P0WUMeALAOHe12ytPZZB5JeZGYd2Zlfsis62PRsxXj
kaIe1RKGte7Rp2/oiuY3zMacXyfnOe08GbLs4EqcAu6/Z28KOuCzPTze1mDt
UrdSOX6nap9N/9rxBZGKFnCevXu8xHeXaFmVGj0SnAfV/3Yer+XHke1V5Cmq
Y+THuBss/ugy9CPkt79snmNOHU9cRZPpXwoXsy+SL8jJGixJszBG74bv5deq
YTkbQA6uNmXg3kl3jLPbfUAiqII+rdnjuRJ743Du8kG49terUUWnQ9INQlu4
ih2jIszd24QKTaJrrc62KeaxhHdbxLWEpEf73TQcv3w64o3LVZWT5Vt7n+tf
4nUNrTC7omBLc9lSX7tdup9iq4NX8hfbpKjIUfgH2T8TA7lkCNfxH1F2f5l1
+K+xhTuBaUVKkzgEZ1g6Kd6yRUYnZCQ55nw0Pd7rKYll5OfHnbfTlLU7s1Mu
6hktI3R19tpgiJ7yvgdzd94lTRhc7R9qnj4i7Wg0UtuqUu7isTCV9cCjdtw3
bf7D07jz7/0fLpK6ai8bhjxZ5OmiufgpqGYx/JlnA5sfbsHpgX7Fogdpluq2
8BEqB/jY3kaemA193a6WojP7X8s/btwsIOx3laA64VGK8huWPHPSMd/DR1uy
pUQ1rMFSXkjfu0BHXiKV+ZxcKXGNQINV/tOfT/jf5OKEMF+QuiSMkAPzaaop
OaRljJQOh8zBm0EnDLtlHM6sZfC56Omc7Jwuf33Idlf2APr2g8hzOuyj2u+P
Z5/TN537NL5Z0Gkwuvr6/ediYYuLK+PPk041efWvur0YuZwcIbV5tbf++tNI
9LrZB8qdoGihjTODEvdfxU5sCA4O378U17Gu8on57t7osrXhvqNXNYKn1tx7
pWoLPFJWo7sKjnLsHl1QfRCcFWDGOdzTfbjIw+TbJ52hzxVDpk4TQN+eY6eM
n4yhHj5J6dTb3eOTtWKrJ8iTUKPfIRhOCyhZ0GpTBRDsmX5v+/6zqAWz7lZU
LVWV0FEGS6ob0qmHGDXjRcry7ErCne+ra/ZkVxf5Ful2fhW87BH6wTByBXuj
O6LRpH5V+G5XQrDx6qrjqO6J2ybgvDYrcdLTGADKBmBHCnUvblm+eXbS1bFv
bfTN+FXpCBWA8IGlRTK+dWNy4P7dxrjhLbXPpx4cTLyw7TL87ZFucub2m4HF
h1RJ0Rvr7zhun46Cb0z1l57POPRu89nbi1VSbprb2u9CypbsjdbOTpw9ZWnt
srF3zqWh16x469i0dY29qfp68XBiLpd++LZkVaDXkIDypb27o6TC8GOWLQpq
XHiyv9JFxqv0X6npJD6hiOhDSKe/7PzXgRlGBSFOYb/R3CJdxNgzIPirWcbI
ZyVJqlsiKCZTi3mLSypKPPcP6e7d0esSmY7b8eQz5pbSTaZz/2iMkwmLMtkd
ZUCUsfObMfPQTJAIcfXX7VYQENa19FBnljbm9zaIVikVd+Bp00lSdBO5z9Gm
WS9DJ1DGHKAaIfyec5xmj9QU5w7zJBHHJ8fgRCuFG2F8hz+G70SJ/mXi5G+l
C9ODCkU44mQYCBR+rCPrJ+lo7nXqQh0VS3UlEidv0JdDPobvBDWKbDLQthki
h84fKg9wS5F8/CCiXsGPSgXosavLjLpq2NWfXOOWGm0X+pbqjHreKbemPoZT
drlu+9f7Qkoo6eneKi9tsyZjBzxGOyqTJcP79gbdtUngCY7cI91CTjDz+2Jd
c70hAubepLO/QTuw2rxXVK2kMyTQIIT9QcpABMaEnt07+XUgxVidoz7shMOO
6gk2ZqsNkTqeRToDQU9cDv4mJvcvk89MYV3RskgLwhQvgSGelCAuo3VB8BXj
muNxp0tqOsKy2XQhcxZnlGguVWc/czHWtHwxVwP3bVKVGFBu145hVR2Yte26
mL6iRVyreJCa32tusk7TKn4y2tNpM/Le2fO7InqAuMcR11NjTbd2P/580TS6
adX4nn3DrsiyxaCrMRUxoYen+Bp4SlsDM0Yrq8yPRPqNjQacGMpM2T88pnBS
PO6V/c3R5RPd3m9UuXudLxw/MCCt8uxuR3Bkj3RFj1nnQJKiYkgf/I5VVL8S
x/3NoiwPKsU9h+ksB5RSBVaNR8kFVObkZ3+a7238z1ynPoczQgfQdkkuMF+n
RKq8d/KVP8FTmZAU02opqVDWQim643FPBzvAXB3mP2XgNHuqkSs43bB0teWW
eeyg/stt0dcq+Zx6AFA63nM0WQsA6ts8i9/bAkDhE5eGroMAoNs30qoQDwBc
79zvySQAwJW3OXcl4gBg9t2nZu0Y453lV72XkqKMN68/kGpYjty/7nTDvGo1
JHTDsaGu8IpP8Ebd+dIUD1vutePXWYM71I0WsU8ORFoqCcweHp3NrlcSXXec
u3I8VPPe5ugEW1nIrpV1wTeU4nEb3WGV01Zhl8zSLkVrWkozCovY78MtEIaI
7MyfEHWIGDjNX+a4zK/RiidjZ5BFhLf0HlRO+ONMzdw+LNrUvEJDgnych+iU
JHQFmThwdAdEArgfMyvT2PMcYVGgt6FiYb1N30qtSXZnkKVdo0wT3eiO0hyn
9BGV6FwpKiRfvB6VC2WRaIGbouAoD4kt2B3KbZII0QFbQNHEErGpqM2/bP7x
/4otLgn9EBGDz2Gxo7mEf8vVLV3JF0pvqBdiWa5Kz9cdVHvwotmEuFxhQ7yV
E4d8aM1OauS+HnWZs7Hx0Z5ueqNVlAAPp2NaEYe3bXbrqsoOuvcoV4ljBXy1
HASusfezHBHw5/Bj9KP3ZVFlf8ywTivGFMjJzsxHP8omKqzGpcPMKTqi+EBE
g1NCy1F3WkaTZ8BazEBIPoRbyPGprqDMR04OGzmlAJFR1nqdav4LHB10PSLi
VCJUfgTGv9x9YQyYR0gC4g1Gj/4Y8Tkmi8lY5BCrJ1WPEm5XjdQkh47PbU9f
A1UJ52P8cdMOtxU+3Mo6VufVqNzYN3QlMLRSLXl64Z5//Jiu/dKdy6ppzQ5X
vrJWiqRbuft1H8+bi+Z1rbktGNN9QN3Rtw6z953Na8OTKXPaM8qRsn6OZ6R7
RVr5V9XxYkICA9zr8nslh4Re8sLVItT5FMMlmu1YXYPtzHRccoDISN9FY4ZL
KVnvDrToyLamldkcuKmKbg87fs3LXXHrxq14Otsiab18WYt78mu8NaaPOX2Y
yujE2c5i9uCSMEp/Wn8to3RgVFDzlExeS9o6gqDoFa2LovvYUG7j3iVmDnKB
p1eSe/bt0/N6dqLovb+ncddgRNVgiLLhyQW5S+thNtoAsPAkMPmNBgDge6xS
b4Bly9V7ucZ74he0rukf4wnInWi8MFdi6h81cKu0OPmW97lH55M3QsT27bvW
61vvctXyYJG9xZC+tfq5wFv6Z7VWVdh9v5mxmX7Si4k2c4e5a9j0VtyJLo6o
dM1/Kl+yffi1W9u4YAM5WdyKc/lLe3nyLX3Z9dt9uMxUrc5vBm38kQ7qs92k
jAUbLTnWxGI9rLioIFpRgSqVdJhminwAdhNhAc/7vc0NAfHfohtrie5DoHHh
DFlUbXgfJin+R2ybNByinLIxQnSs3mo2GmLSJ7hLDFvU8VIXuJv0a6VVBa6z
nZJr53ZkaqEL5xyhx1F2UwRo8sn78UmEDJI30QbnjR8lOuBisF+x1n87v7MP
u4i5iy7H5ZI2CXdwUeRh6jGyMkGeZoT+MvU1oiUDnsmN9iEpiPkLAyftIimb
2Ywqk3wDn09zE/sUuwfthGdGq6MlkEl/2fv/aokaWAOUMYmToZq8gGVichBo
Zc2l1pV4ruYkZcdRYRmwx8+YQ8I35mn0gHuM2mjVfEFvMJNRQLN/MV9YucW7
5qsx1/b176oqeWzkKF8guGQkzMpDe5T2BdVrsizegtQI08MHor4fveJED8Kk
QCs3IKhh359FMIXQQkRhGhC9SH+EKAaLZMfOI5dRdxDPqDEkO5wdPkXoG6cI
wycBY11W+SD+W+Zfrdo0EsSyPT6ZdCpnCrvvGZTLFh7lzNHgYg1nyKbBc4wT
KMSr2KA//XGZBIIn+iiylYCmy8M/R8/RunJXMnaRqfmPK1pLHuEoM9m0STE0
lPoSuR6M2Felk19fdVw8WsQs8Z3uLdoMLtPyxfxn/EVpNgXba3efFZx1M5ie
yzT3abDsqKdR/ShUzf1OnpOhma6FQZBGn/SYIEHhRGjhT6O5QG9D4/OQ+VgY
bBDFjEgHy8OIFLgsqCcCFYXoA1dnUdjnaEVUBqyJRpPkj+5ArAuFcvPQf+Xs
9u7efUeTmFqVWx/aaJ18M/64U0SblfR92vgvrpx6t6rCJIN4zdiXpf0wThgS
ngP1DZ6NfPwXvSYN4s9LFfYTugTZiC0lY4hnsVcoo1Qu5CP4GprPVEfJeEI1
jR95neiKP0SlRLxK6Mc9JteiFTCi6GXs793uvwpbmDbUDUQLJoFqh5CC/UgR
Z9pDK0G+w/SMh8LOT1/Jry91U1Ce3VjBUbVHMpEvRF9a2Vx8ifeljptQOPsx
5qMiexgMyLzUF+j0yHS4UVIw+b/bji7iXgIL/hBZisqHRCZcpWzQYairSFl0
vkzDtN5U7CxKzPT0w9RbbIoMRbR9VK9ZrxIniQfxjH/6+6D/M3sI+RgT1Bz+
PVUQIR77niJOJ0x+gMfQPmZ8TY0lvqIv41fh1KA/KKRjXqBzWYLL3Stadr+e
oddJXE5jkIlVSpNp9EO3pwaUohiZ3fwl3I3incSX2DTyAOIzAgZ7jrH/b89A
19ALqC+4cewxVDtSBvsKdZv6A6mNCJCo+WtYnzLtEjBRRouHCeONAxVjpN9I
FtoUcSyzabBHSH8i5BKe4a//ab+XAwIC4t+HZxgHtAryHKaf2IefwfCTdGha
KE8I4rRctPeobhBv0zVRd1HiiK20fhQe8nECJw0H6Q2xE5/3l/u+jD8aJcRM
/A3sdZIU5TD4ipeym0mcPo3qCOOSwCMuF9YDovZiC7w0nCVyBTxBzLVMe/gY
6WhIYtREGkECPzoBZ/E/ftz4KukoUQ3fQU6jwpOzCczU/DSz5G7CXpoNWiFq
axIHfTq1HyWCcJEGgx/GLaAn/zLn3yEgICAg/rmYEOjwb9AKBCmKPDkX/4Vq
juxI5iY8oO4m0ZFO4Fup0HgN/AesMHQfFwQEBAQEBAQEBAQEBAQEBAQEBAQE
BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
BAQEBAQEBAQEBATEvxxzpCwqHklEB6NU0QaoOowU6jIqGfkGbYmsRN6FLyB/
7/ZB/J9UoZKQPuhxVBuaFiuIj0ELUw6RbxKW8Y/JLwijOCk8LdYQdRAthVpA
fELIINBIa1QYqOFj1O/dboifICKmYTFoPYQw/j7RAq+PM2EZYDKgnKU2Y7xJ
w0TupF3GSaAU0I8x15GBSCfUNfRJpC6oXwvu9243xE9oog7DXVD30ZuECtIx
bDIuhPkAizqlg0yhQ1M3EBhpK3F9qP0YOeI42hB5EqlJ/L3bC/GfQJz9UciS
G4kt2HGSKFcbmzh9kMA0byd3MKOfsA03EwcVfRLPOdYQ+iSKLTMrzRHsNOoc
WfFHBN1A7SBV4TCYNPx37cNfCF9E/g9bWyN++p0e2Y9AwkWR3gq8wnDmA8oR
+wctcsXVwvd6N1i3Sr6PZ9K1ULzOoW8mzO/ALkF1nHsf6zfSPrQsnTr++6c3
MZ2IVrC+c5B+/yK84HdAWxv+zd7dqCwkGa4EEzAwk/7AHKt/LS3XrV52qYT2
SLi/teb9piibPL00Xl9HK8FNjhmyC+sellmyDnqQpoxCDX5ajaSB+giOhHQo
L/0XcRLFipKH+/2w90NQRRJS+IcnPt0VJCXJLKIZlnvTc1p++JhUQU5Am8bj
MwvGSer7OR4aUvO+YyohtNA+ZuwkncEkUx8gff9UD6kNPQh+XhrKR//JMCNW
EFsIOrgB9gncBBGCY6O2w3xFi9Djcc7gu1KwT+o+AsrUsyoR0YluhSrwxn1p
HgektD6edyk4E0ir9/H2eGarz2ENn8vhCUOuXQqsp132MGkz8L4JvE/VCmo3
j4XBPkIx9J+IHYwDIQha2ge0NABjxDjyeJAfoM9zLRL5Qf+xxZ8JyTKk5aL1
c7uWk9FrHjpvf9stm9fGZGXo5kxmkvX9RVIDS9wXg8I3c6faI4/uuvb0kf9b
mzWJt9kDJB/Ql73B3DQHyQ0p+E+kHdYOWpoe/f31ACJf2I2mD20mJM/khYHB
TtMX56k52QlYF+48csr1s9DZFntUlaNgsbaTcrsn45OF3/LZCwKJJEPRdxa1
B6OY9c8+OhR236lPNrK4kXwDHBXuCHbkY0QPpN8/lQzQ00x/zjvFuGuJR5ED
nIVMJ0D74xhfl39yHxV6VmfYLZMVaCy1I/dINDfTHABcb3xOXbZALZCq30Z8
1il5erRUBJwXta5cCRJ3Oib/sfA9sejHXHoZXoq4Aun332YKpYK8jrBA9GOu
IlNQU/ATyBMwNVArAjIRfhu06wbtRZIgIZ+W17RR4jSzn/3JXTFy5wTggQo0
4uh7ODy5yZRd2JC2WtfkJG94tlHPl8im1eQck7uLlW0fc65aA0DIPY50E7As
u6waY2rKtuJSXxZ5xJh5YmG/mKEtF01ACf0SuQ7JjK1FPIfdAtuzhnyBuPUb
8ppWRCiiD34IGYWpwXCjrmCbUBaoa4h+dCzyFLIHvvKXyWsNkLPwdaQJ0gE1
AC9HFyOWwb9dA3WTgJ2GMYHlKPk2gZugRqZxEJc9wyyyt9Ov2VJCCVuzRmOL
WsdfY3ZTvyQoiN2R1W72Tf5mfGhnoFk2vdMEAOI77qe/BP1w8JlKahj4+637
H5LpLQAgqvlJyh3ziOXYpFMuYSKhmdocIYwD+CBqD3C/uigUrOVnX8Tg7qKN
4NSkX2o3J+oxvBCRAYeRXUhvcJfJcUQKrgVTQUpGNIHvaiL+Jcb7A6CB2A/n
QD9F70bNINbQjD/GffJ/iGcOuGaME24CWelMJX+YacyjNyfH/ZNaRhuckQv7
AMfGfUemlNcAXSDo0rU/y9uIsqXY0hf/TF90m+X+h7ivBgabkd3Kye8NAGDs
xd20K2YAEHDvQOaCVcbacEHhgQcyN8tr+WRYPUlGDHgUGbaCOonYB+67HCaA
8MV9BH3I7Rf1e4lBIr2Q6ugmOkeqYOILuhCKJY4bc44k9ePdnX+y1f44XEfc
hsehQ/DGyPfIm5gvP+LOwf+gXxkGh2HBwWCB7tWKr5le+Rw+aeZDr/72uR+z
M3YXhokvWJmBTxzrLhnXI5IbbaK6w3M7PZJZt2P1Q+vuyC3dh/NNLzgSt/QB
YLHbJaXIaG49qvVVGsby6beMIpVDKLnwU1d5C1kqiC8ZttGisPuoI6hboOf4
wmBIBNYXfLVJ+KV247CxiBQkD7qX7i3lMyGATpDciJlEthIe/dCO7087o9Ih
S+FZcGFYEFwNNoywhwlS+nDfMDJ0ovIpXDSUBjWavXyqT5k7QspiNC3i+ANK
tAswrruljC9cqFULStf//KmUz4V9mxUn/72uGNC6ANthBhgsibb3DBBwWmN5
JKBlf4YwGDdRrW1ZGWDp1Z6Q1mEEAGmtH5ORhgBAeBSY/kEPALCPxRI6Vdzm
y0oLPKtlbtbauwdryfMM+goxSpFrMbsZHiGtkBSEMPqX+iGBSoPrgyqFcF1n
pKFC8wKi2jyyTJHqrWRe/D3sGk0negnBBU/90x4f2ANuQqibyBoSnmCAa6aZ
Unbjf0plpZPos63Zx4SMPJceapPPr3eUpuLWvgMyms0RZ8+FsO+qHi2Xdhax
E141/17HQew+rCmtIDMeq80U0tWXdU0/e6W8615mnTEA8Dy5nHEEjJtvO2IS
GjUBwLK1LoFWFwASn5Vl3gL98exLm9QxNYVV/rMG4TkaHvdCYwFHMdmcwnY+
d+ZBkiT/SwICcwdhRv6l9lf9XIbJvOdiZeiS+rBbQ6dd6GvYfZptfD0mjF75
LzADxqPWUQD+MqEev0bqVxcR9qd5rjfoF6EjwrwZgc52tRXnXzuaXi/p/USW
9WFmU2zEsMHryW+yy5INYmRb2+8RCu2Jec1myuxL4OL0en2qKMDwyYLwq7K0
EtDPgp8Qk8y1AWCy7VqUrBoANN1hjFsBf5++L38YDuob88I4eZdm40Jb091o
fR36JzqpJd4LWi9rj/JrsL2jchBV+HGmUOZXzxdaKLhyj9CXyBUESljCJL/k
0NPcwfYjsBSqP20E/Ts0qA50GWEf+T6Rj9Kn/VpMk77H4FLgI1065hPh7dlc
tiV8g8dk69b2O8nmPOS7pBFVbZgwrSl/Sk5SUtPBBrSPHpoH+YrLiLmM6MR9
8fV4kbbh01mrHmx8NajT8Se1sdagbhJtq5EK6uObri1pMS91ACCoxSTtlSkA
dD8qikNqss0sNznGILSnOoxSOg681jWr0edVZxqgUhOx+RE5uX9xHSD+c8mk
wMQjw5Ck4BtywNpQKjmPSNmLroJnYnO/v/kn0rAS3GbA/ijDDsEeIfSQzCxa
lAGsNEe+a4SiF9MHv6mcardd6iq9GTkxwQhHAHh5gD2owQ0Aqv1D/TF7t5dm
cxXcn6h5dfugJhkeYlaZYbBeGAP8C+otvPNHjBOxU5GjZTi0v6z1dkyjatlX
2V6GAjyYb9Z0v8rpBf2R2HmwMAPUTeYFb+F+cD3hc27Ii0dK9qWbaYgQknHG
6fOBfP1eCf/EcU5/GkeSDpcYXPA39auZ7yPTdZKR4LUgHTsmBZ96Hh0B2TMc
gD2Bsg+vg+WjpkFV/Xol/wYwgtsCPOTHiCwBf5KpgwhjaDTtYZ896jzMX0JP
HKf1fqbuNvE8FRO4YA8ASLcvQZUeAHDbJ82v2G10hSO3x91BTazzGNKKbgwl
Ta8A1jGO/H78uQnM8VXgSCtDtUg2wf1NL9tzLuqyrnoM6B81swT9sOd4zmNQ
v+O9z/MXwfkQ0VdXCOjzAZ0nbd3iZV48r1Ad43FgSDC1zyDtblTbX/9ct13I
kLlfj4IQ/Q29skLKce6hC4B1sr8ownoKKTc/2u0qpavEiwtapOjgaFHHiNd+
9kEHlDk4IyL+rT1SEJH4Y1ZfhInB7VA+KCYUEXXX667aB8aDAcjTAgflNXlX
wqKr/fQdAGBkd2PQQ6/lzSivt/4Z7kPrsvld+8xUe5/CYOZ0HkgyrSxoiVC0
MOY+cjfhC9wDr2B+RSeI977P3aeLuc9N7i2ThjiOtoH6ib66ljG1C/TD3r7s
22D+cuONQ1Gn/gOArdjNeY/CdleD+D72bsZ+ncXKCR9h/Y2OJYtkCXfWdkvn
35R/vMXPs1TSwGCyXM+LtNy6FQIeKB9sMA7ly40bpD9PqkUpUdH/rBgjqg58
xfHPM+6/gIvwlz96cwtWD5Z28O9n8ERde5WvMZz31KoePFCuWbKuHKF26Kxd
9ZakU0mQtKfheqx7tL/KPqvNyYLz+2pVLj1uhW3QY9G5DN/zF01sA8YM50sm
ISvIl+x7jSKFUkIuP+vJTjMmrgkMY4vhYPxU7QnKuAzqN997NMcT1G+6x6H4
K7ieOF70wOWdUuzrE8IP2HYx7dOVblTyl9iF6GrfJSREYFTQD/5NnmKAS2CO
pYbBCnhe5nQ7lcr13dEMKDX9wDeclMIIkNuQM9QXEfXg/xFhaeh4sMahf8us
dBPcpLBlKAZUPWFdXp89kyylIh6paHJK+FJNfqJ9wOLu4a3jhqiQ5tgzO3wq
NplTJ99t7dGJLrlZl75znU3EyyW2ZU4+XMtj22j3cgX9BKMp3Jn/p5ovgfZI
/GFpFsINEg242nLjRPAZ0Z3iEvB1chQT30gsuvQ5qFD+zijH88lkBzCfwb3p
TBsF139UV9+ETGvnTYjxStPHkAf546lIaC10OG0V9gMcQBVgAn61V/PffyAv
sCrTD2M0xPQCY/ca6N/ovemn7nxHL6+jwvaxJiNvXugyvRAVHlfGJI+U+LeN
nckIBdDOXjB6pA7ivJQhUwFOUQIVL2Ayw/+ixjfG7FCTg/3aiDY8VC3RbmdK
Pij71qmeTS2NM2UWTfu2HBgUPM7ETn97GbrqMWKsuaZF9qELhF/l/nvtC+CG
QlAj7hEmwJyxjRXB20yjwdIdw74XoXjziPAZU58emde9+u2TibPqAKDdm5N+
B9SvofldeJ7WxfEnnNs0zwljPNdoZ7EHsEuM13D2iHDMbuxv65knCUsXRQFX
g5ws0XyOJ1UPf4jyS3LrML85pBZwzqJXuK1cjOsCwxK2gjsaexSpC654uLHW
4Cgj/eJxgT8ie5AFYJt3wSPAVpcJAbTB2Ou8cVHvdwVwL5ftRN3xfWkju5Co
vjfEJWl6W1ymN/N51Zu1Xcozx1CXgtajGNM9I2PPLN4O3eNRb2SzHoGvpT4E
/8T199prwRy/HNkIHyHUoGLhZiwx7OtkLRb/tOtuTeqjR0Xrjnuj5O/2NN2N
TeDRAIDPL4F0jB5mZ6FVMYpT68zUZ45Jak8cD3cJAz+RFt/N7kSeRV5BG5D1
wZrXf7VnV6iuU02D+e8Yh0X4spWUSvnbDz467qo22VNvogrs66X0r7hzmTHA
sDAeBSIz6j08HN+JCwTH8qV/K/1qkG7geF5AHsWqIGR5v9F04dW4zwbQaHmx
cWS5RpZ7+1odnaZWswoWSkRsI2TvZlSVr6/gFd6UBl9cX/vIeM/rSZzHqnzI
8r4k48F1DpIPTQfcjufvtXOAtuBEKKCkiePIt3BH9kaOVSo3wfb8cd82DffK
99cyg0qVzg613+9JRGgCgH5vdpamvsQ24d6LaLSW51w6hwX1S3QqZxzDNHEF
58PxiPYLBoO6T/O95ie/GvFKqe+QJCg98AXW3FANi91Kzq9T9n9zQ9ksTx+J
zrMjSltfT+Csp8dhRXkuEzVR3+Bnf6Nf/zHgAzdzHD3mHvIs/q16KD8rw5KJ
bGi6vZ7qTHuF87FgHX+/NaxOWXJVQTpAUWUqdGkEAB31VzmWNQprFfJv44yO
AwAjlb334wwAeBLOFvHZGQAu76aT/kwpC4fBdhDiqMl/GMchSH3sM0wMFkc/
8OPYYxvdfUY2/AJd7gOlhAS5+k+9PW2p+TpHtuT76TOf6QPAbn0qySZmMRv3
Hyv19d903i4DgaZZQ+SB+1YneGq1iqWysEewK2TsyXXwHAuUD/HrDbr3Zcnz
5KEG1+6xU/bBOgICXQkejF7UPTgulgXMCcRhhAjqHfomMgqm9If2w/vg+K3B
DaJPoiLIhUaXRVfoCq1PxpGc2lWOdw/bdQTEH+pbsdbaSM0oBgB1jcuFbg0A
4KsikL1e/WTlhMzzmM1jfDvHaeZ8vTIBIDrcJ0J+LwDE2w9IKFMagsFMBaGK
7PiHfE4TnoxPxUUThhjLMDLg/vPoqJkAPIEh80593LZMT7/QU/qkt7qMO6/7
Hx4+COqXopMvkc+yagr/UZPpr+rXhfw+k4vRlaNmwE+QqN9rnRd6QS8TEqDi
a4e1rpxU4LDelxM0MTFnLe2/41e3FhTNtxshW3FLiNuT8Sz2IZ815iHcG+GM
4kCbgJ+f+UPno37IEYQe4gZ8GpGIu2PAK7KXunnX/gROh9tyhs/HLWj9ZA+G
rdBqktN6Qf341WePPDkD5ofK9YezTh1fnpRljuErzdm8TK/sF5gNAIvhnyLs
QP3u2r4QV6Z4B8Fgp+B2iN5/iHBRqGC8OI4df55BH1cF2hrDYcpiTXzB3tl6
O1ZOluH98YfbcbzgOiLj1ak0f3Bd8VGzS+IY64pR84+aDqK4MabYS0gu/C/1
SfKnqy5IeshI0HfkSGvq3gKfGKoOwtUoVl0W3OO0zI5uIkHPpoI0Qw7dCL2/
nhth5ygtd/tOD8dHOm40jicAdw7GDuNHVWKmQe3s/tD+54RKB9uoBGtG3kUr
aK4LBFC7qe9LOeOIlfN+fsHyg1/PgeD1RxqGaWygfk7q8fmbpwGARa07o71C
ZGVbsTzatIhv05/xoZ8aqF9leGLEogvop9YHxSLJZv7g6h0RgYj8D+dn8n4o
oIZWIpzBa2Lj6LrxxeC7IcLTrGWYSraCNtbYTtmPn+ofD8YtaAPAuxerqYqG
N3bG1TrEq1ntDEjg/2bDw/Cf0GroAXQu5pf6VPbDY4wIObDv1x8eIaOUK3gq
6Nk8hXSzLN3Mkr7ssKS4cwS5zJ5QiDrAHR67quWnYPtc1v2qBNMIBUDmMA9h
vx+5Jf9hr68Ygn0/xgmDWaKaEOWILwi4ZDo7me6WCrVPl6W8CrF5yJA7tDKG
fkVKljObo+bUzmNNv6LHdQDwVnko9xBYflUKSMGdBAB/cZ0w1iPzG1dIpgGL
2RtAvcXdxE/xAJBVYe5ULXTllRA+CUuLyMMdRb9EVMLRv+gvLtQ/ledqUg9o
KBLvzo0UHd0xfLm1/GE7iwH0P/poUbNxvkdFiz9GQtdvjmePOcRo15FGirnO
aCcqff4hUY4xl233voUI+iK/pviRuRCVzTT67MRVPuvDLtdtzDrCNcRkB7nb
vNPZXBjfk3mFMaQYXDlGhcYG44AKgVv/4nj5PbAGt1U4HzIKXo06rukraM54
zuJsiLnLuu70m2QdsdDZWNWtVrnQXL4aAEjXZijirSsCPmks5XyrBgCkmkuS
OajfE8HhoMUjcMCDEhIUmgfqaZWR7J4AAPUVh52OC2f2DpJF8AzIT7jTKC9E
PCzkF8/zOND8VL49s3GoTUn0XvBwfoGs3qH1gXcfMpfA+e9wGI+JCn9ibvkP
5VJ+cx9RbOu0RzAp0kV7WOx8tNoHRznx+7AHtNcPUhn6XItnWN/PdyRVvPDw
WpWjUaRuaMAaj9P8rklRzxI7Pm/magJCSBC3AG+Gv0ZLo79nuSf+UGv726At
6mBN8B5EK8Zeh0d4kp7ezDCa1dVX++S7NC3XoGuRslvtcuQ8LKiXoPaRI6E1
MEBVY09maZX1jqrmWuLMCQC4IEAfUlwIAAXk4ZCxAgA4YaWdTAXqZ11R7/xS
nLs/n8KMD0HS4ooRpxHbMJr/Uj8f2C2y7I8rWM7AtJrCAnoVeR5QPn3LndPa
s6b2hjbDG/S//QG+hl585hnyPyz4i6dr/4GrnDZ0rFgOmSRXfmszda7ROJZB
V44Dt5eGmCQO7okzWS1hzY41LeDeuGobGd0ZOb3d4jloEiR+ubaah8jkgNPi
f4nlg6PgB5CC6DNgbQl/KP1+whDGjOTFvJaX5TpF0VM0im92Pq3u3JeosnpQ
L5R2lUN+OffcKQAI16DJbat6veOqejvjSoXZtq/ep1Tpkx923AQlQvOLAICH
sCdkCdSv1iI+0QuMn7jyY3sUxJN7npPzcEuIeYwOkg/JA/f+B/1wtN9/wtnv
oI3BuaYUfv0ylx9GQaWD8LEu11u7eONqj3X6F1C/aV+uXay8lKRP/4+9O8k5
TJuLoZaMcUdY8Cv3jyew1jgX+LCu3OLmC7CPuztnx/4snK0gZyvGck+EVHQ2
cMkz1qRXzLwmiBFLrYS2ZwwkvUQNI8iEcRIcbN/LP8z9ianYAqQiUhTDz6RC
dZEkz37DSkQ1RCQh/YNVk9/JALn5C2JKaZyV6aujcpgs7tOzOwwqojlPQR21
5DOPFID5Z6Uaa3EfmMc0KJekHSwBADZ+mdgboI4w0arMb2AcDTvBEJJqCgCd
yvsF3lEx6H3f53108c/zRwaxEr8PfxIl9re8RgDX+uN1VhiX1iVet9TaLfip
MJOWVeT73Mwq/Y1t72uSh7plmj/UMSiAa+shOuyPmnD/ZV4Yi/2KcaB1xBrC
wvCnoi5aCUvyP7nJ3ug27ovYusR6Zf+3A4ULHtQ3fc/HCc2d5D8eG5d9b4nT
VCi5Mj537pJZmT2DedE1J40utSCpycjz7IrsZ5j6VOrwG5gI9NFfvM7t98AM
jAa2vF9pZcniAg/cWYz75QbPsxnQhXyI6lm/KS2WpXBab8dfjpx14DQNQFBZ
OlxY5QVEKJdmWVaAOmo5HIkAS1NV5pSHYPwcF/CP3QTLb2J1OWSwRJ6MD/Ux
A4CHqg/5vMiv9b/fw+KF2v9z/58QNPGHyF4Ew7+NZwJ84ocW+xJZd5EFAwqr
t1Qrcw2Z1tn6KYcv689sn7zY7lMkLdzHQhsH/p8zFe8P/e78l/khBUshfKad
Aesm42RD+83lJOfvebB4uHX6M+4YcvMc4Ajs+hZHtxVQmsy2eJX/TTxXPgAU
q0dkm4PxY9BmxOfg/qjPOy6WhhiJtfJExQB+NN2RXbU4F4Q+XBItjrjwzxfm
N8EE2wfOfw5ce2jEiBf5aHyR5naKrLfeaMsEvA9/vD4pZ52jBvrXgNzZbER1
+468ema6WvniToC6R1rzMQCQ1x7IvQHmL2nKgkkoUC8PQdm4BtD/1CVf5oNp
DqBxfClcxQIAKGoLPBokUwMYrAN2DPmY8tO+zXG2GAplg/SC+u+t4fhxzIqU
N2r+Tay8NnF15KTRLuY17j6GdFr9la2g86HeGtLEXnZqHlA/0v91AkRinxIO
U10mkmFZGKWwFdMrkrAnpxic99b4AwCt6JSfUpDt9FFWkwjfdN1vBUIH4omg
bjEKBpkx4PpoxrY7iCHYfDE6QMZ2Ro7xrruiHK8AWU4PwDz8w819j1GxyEg6
DGEN/YL2pW+Nkaw01/mXGsO+QcHzK4fkzXN1QP08lJxzpqo2dtg0alL1yl7t
+GuQ0z8dBYCjOneOiFYBgK8SKpEb1C9IoDnmClgKS4Tn04J2kC4zjWK1AgBO
1T6eMZKhIQx2CWaKXKD8cmtKwblxG/7yGLedkdTdyy/mxU9wGMDXVvrup9Ho
PdlcPEfyVZR92zvxYwWS/3+73g8eivtKPkwOJH2Ea6MHQ24ZxIqdeXCL1tNV
zg8A4iQn/fcGqU/ncAtHbaRyTNAI90bDjoDjTH47jQdst7lNYnBz0KMFqggh
e1pZhw4roZtMx7ARCg7YIaQErPQPc50hK/UhYhfuIP2MbD7fHOszM3O7Rlsq
84wHz2T1wl4ki8w+U2xJflcwsNGhMJD7uvzt6inp7CN3TjOPP5XuKw2vm94Q
l3pQ6AzmpVSCB7LbywEAEOiL78s+tybCRR2fCa7jz1hFhymD4/346TCPB3I2
U3lJtBZPhOyzbMU4OLtIROGfWpHIAoPJgJFQmD4YOQLa5jZePCJEs4JrOAMA
vBusHAAgYEosuwPMX14+uR65oey7xMhdC8bFaZ405Cn4s5+j5/TP5QC4FWFr
cAGYQYK3JhNdL+aOoam++W56S83VRvb2oJVYAFjnF4yJT2jb0iBFHtyJH50t
4idG1KflLB/UKUq4kEJcarMIioXHtY8vaAw4Tu/Ouc4hzCjZKn7Mh5dqmahD
omObR/Ih9sFEfzdfrABjpvH3eY/yHheFUydp65dJTXNrHEjci/W9sldsmkPG
LZ42t2jjstKztMdgXiIn3ZgvW+O05SKTmTNQ6Tm5omhdQjndv84ha543AMbP
ReGdtLriqwBS0DH2UObYyjne8wlLoH7KtjwRw+B4z6xcdHOVez1xOvGxeb7Q
cM5LUWeWQiyW96fWKNLBYAZoM7g2WL4AVYgmuqaE7ArlkwE9+XGjmi0A6H/F
Ze0C13+u9+JDOZUM5tfZToAeKMRRjKhDLP/sDaj/4BWlaAnMc6QqIVGbg9EU
K2tyzkjQld0qb8uATTEsNhHMu2R542Pjl5YsmWOCixIvTt3nORQhnRWxI6u8
KzkSzLs+GeGyPuRML5214AsoDHw9LqepoiGoEFIQxYoj7cM6cPD8AaKo+ffj
1fgJ9GfEFOa4wZCUNHfZwU5nLx/+vXRz6TItiXpHVrfh6l/SYaUAUCVxOj+1
zmRHScEx+85JhzlP1S+Fo+Why3NyU5m+pVqb9CK1SRt5mjtC/E+j/TNLlj8I
2CXtzgEAcVuuyAzQ/xJPHnE5L20xQZ/Aa1EmtPcIh7AEIwVFw/5TS06Dq4cP
6MswIVC/JFCFalJAxoqxhWAZOHKONQZaA8DX8cOHvXTBPPc2Jvix4rtvr5j5
wDj7nNkcUYkwRU/+qEX8P+inge5AFyC0cXLaucxV+DLjKoPWvQa2BturpCfB
FqkA8EDTIMkgzmnOn+9CeHEC47glb2fwrcPcgKkyc7rY9/FqkJd/rmR7FWYH
Toexlesddr0mfuqzN6dZXoBxggdsr/fvrqA+2N+HCA34IqwS81C9QfAw80c7
SadIt0n7d6PnpNWSCIVXd7i1lTIWwTxkUG4u9zwYJyuUMg97lVnNe6poFviX
P/92SdYiW7XMa/O54K5E1/z72yF8/FHlGfjlTIHDSRagfvnW/4u7t4Crqtn7
vnez6e7u7u4OKUG6O1UERLq7BBEFJASkLRQDVECkBUFRBAWkuzv2hr3epdf1
vM/73uc+d57neF/PfD57Lz6bmpnv/OM3a2ZWSmjYFTA+FlLbs4qVLltGxRrP
8M7fNOeUpV9ArVL9URN9MB6agLVpoCKCnQP7x4A4PfWuITffzwjLXvsNjJ8N
ywopA2oAcPYqMuC2LM/mA6rPYP7SQ9P+y2cC/792WYF/gQuxjdqGGaMP1AgY
dYkx+tHnQh3VzeawHkj9gLxEAODRsIrPis7fluUaDQ6M0Ztn5rH3s0rEx+3I
Gqd5FQIApfr5rJiCJsyxJWFMX6QIhsk5Ux8jB21zprIE/yMJOHbGfzu/n4WT
5gvpU4JN5jLlBvElXoHAeEWIPdS1eahIPv2aavTU0rTWcdhkfPuopwSP74UQ
3NN6wQbv7aDeJg9JoWS+LKYtFSHbnKoKkBOPY4LenV2sLP+jGNcbD898RCVi
qUD/Oc9CE9YIXjVoNVzv+LXu9sjWXDg5R7rlF6ltyShy+cd1SwIJJUZTczqi
WZBf3Z/5pC5Fh99nxT52tWSuPY/iaNPWhfpdgqwFg76T2B96CQDoRwlV8hl/
kBQZqbOPUxbTvWNu4UCQLZKsUtDwxzDFkYby8es9FA2npPGfuKpnp6Q4tY2i
8fG4eA0AYiXjk0nTXYEnAkdRtxL2T2rQN1zHrnGvuPLg/BwjLuy0qD4MV48R
OSpQ/R4TlkK1oSl9xZnal6yPTpRVcUExJV2Zxp08hkxMoBoeCh2AXP1t3J4T
jKAI8GgJ17ly6AMpDSRqbGIN25TcHpTI81xc9z+3bafXGFuasg7MGtWn4GcX
bMaI3faPjbvXrC6Eu5QYdtqClF3LkivYO84RFcmbqwMAEd7WBHhRGzaC2zAK
P6cAWBD7GLcDcnNmww+bBe0wnkHLleCK2L6ZnKfZ23NPN4nCky1VxLgm1y0L
RJvp7W1YCaZAq0mj/KN27yjd/EtULDn74t+dfa4usFLfITngzPLUX8W2TAgn
XAf5lcqZ0puSGOoWMrmTc9JN0eawlpHsE8uQBQomssmQSfJkmtpJbpNRRtaH
2DmGKBIcpFPNesYEA0Cr2FqyKlgvAZmJ6OW474e81DqepUEk67mcXP4jMZ3H
Pko8CaGZANAsJ5HRXYh3aqyaE+6fiTjm1XxueuUCpD+df5MmltRUSQ8lA+v6
bfR+zpY1wJjBET/GOU2JJZri9/QNtZpQg7bBFRsuawdeOmLUuRWXBvb7/rmb
SU1ZsgdOgqOXKeIPm6MFlC7PhDK1hMoIZEHvtB2qyzTmBlcBAL6gXGLWnTTc
RV7K6IegjnoryZ1gnaEGvGWPCucB+2Oaft91+7LhIUpJ1MJV9+0mXWidZawY
30SMdZbYewaMLRXBGcgPSf1H7SIpUv1kVEM5bsYDwPr9H9a4Q49jhet3dL+e
Xf/GFJ8D5qEjYsw0XMQPVRPp+knKaS9RfmAYInQhEiXK4TNn4yHNZja1zZcu
IOZIOAzetLdSUNwboZJyr74K5p385kk0ID8FKf+olpjx/WSWWS/6QIv1Nxwn
l4ljk4+a5MNTrMD4ZyfLf+Mj2K41eVjaLqif0gye2Vs5563rCF4nl8N/JseB
uAQ/+60edAdmDPK7wlBD3I92ZTznS2AqqqDYGKeG9YsM0MYEaY/EvQP5nddZ
jxPKLD/2FOjzyo3afjnPE+nVGbT04rmMaHr8rZXdBXn2nHowLu4I7STsFQBA
Nf9RdBjID5DUSPTK7AX8ODIiJEF+5XTUbseXWI6MlPrMcdpPNgZDxyxzxC79
sLNZEzVlILE/xW8F+YX+GQ+7KJYv0ao2crxOAjPX+1etBY54MazXX2jN47pG
G+PrdACAVfgxNYaoR5GVspWgmIqHaoHsGGqFJsK/z8bBsEbyjHLDDi2zS9gS
x30tz3ZEfn0niPqec4EfqO8E7BL3UgHggTh3ZF0UxyENu7u3SCDxaiW39KXa
KPFdf+nWZFqwHWFiLlkKoF8JlX+V7X8fvJozOpe63N9HcU4QvIXd54FA8uGH
SN7fHgOpaN3JnAn42XxEAiVyBcmuhgl22Zx3EWosYPLW+3KhISUEqsgQyviE
CwJppOag7AXzrq80U6S1eMtEPnzD3EWCShKtofRJ9YtIEb/oTlD/Bgn6Rb5I
2QYWRc5F28QBQJu0b/xELJj3cwgHZEVoHE9RLlgyeY1sXGMeN2awX8VSeoZd
NjMuWMkPT1Lt4Wt/K8VjRsII9XCjC/fQZRH8BFrAeHG/NdNW4ipvjuA5MO8f
vxI5pDt5kucPUdrl6IuKvnbl3ICAeZqWT5jWtKj6AzojK0MHJZUeCfFlE1Uj
5q33+AqGV+3eHmhTof3fxmQe0ckNpnFlY3HlQo7BLjF8RziS+zbUAQKzn8U0
zBccZsZjte5cKwpu3+rQ4omiirdeNZQ+9iwJZB/ulwrWuavDdq+FRZ3+IfW8
EityCkoO8/tt6ynISAMJOtGy5MVSS9wzjPMXjAzhNnkX7D9OqM759QZ8mmcW
+m4SZx1QOIu3zsbJiROCQASojsmvkUMgI7RfyDeIvSjyxL6LlaowijMmudxK
OwgX841ryCUCLPirIl+nXsAZi12ItwDzPHU52yQG8KrDmuHXHGF7bEC1Yy7v
obGDZXpk8skJAOI8KrzDDcrXFsNvq8cL0r4z4t0nq4U3epiE8ejU8ntWAkBj
6ZFN9g7p2k42D8jv6qh+RPS5Cgz2EqHcXTb64MYgbj0ngdhEQy8Lrfcir+8/
N3xqVK6U1ect9MxkzPDivhn6yNDTIfN4jnrG3zRm69hI1idjB/QPjBL4YeWx
S5hs2jRb3itNswuyy9bHzh4/LulPxJDEvtkJUW1OabrViNmSfhx+NZfxVFN9
3bbECfLjgtRTLmqmOefXJFaIKtjb3zYPk4/HgxhAssJqNDBC/czN7oI2zp7z
tpl79ZqBwewRFgfLImiHV96PX5/Hv8FCw34iAoF8okRR7JCC+oxWlcqBOpcy
W/aWwrHxG4nEdP87S5gBaXiCTK4UbpNHKiIw9egMT7whgTQZtEf5x4k0IL9a
hvrLkMgmjBz1E0tTD7UdTsYlkwcuI7gEzw8+VYba61+icNqEYjVdUF598mL4
tsdIqLz2RZ4HID+Te+Y27nsum7VZn3QB4Hh0P9LbAAD8fQApaZa5gIpAZ50G
/tIYCm+YNr/IyUMjE9z5XoWvH2wFkaa7BlYHTehpfRL7O5haumU/dGTSMYOM
SfohyO+m0H4gVQTXyQCnqZthwNTKlMYHVzJ3lcmD817JXUnaWy7KuRm3SkD9
Kuie8Bj0Atmq51xZL0NONuUS2cNp8l2eEL6AuUNFfpv/FEX6oCxBBSWutisg
wWTjmGL/zV3GRgiTrnEt/GusNI5ahNs1xl968CZ+FtMiy5IUBEJHLkK6gQ+q
fuov5NkUMZRnsk6KzBa8Mp7pHvk3TyPkMQlpoE6s4oFETKQAAJn4RgI+eKWQ
74r3AbOQHNqsyxYR+idZ1K1WJJ6xm96Mtufhzoanb72YfHMM2NceRvdqm4l+
7Mrm3iWdgTq524esanVwG4L86CqLbb7uIbaZs7zAuBc57hkTaggA0V62Uk7M
3VewV6S0NfmZw6h9WrXchJfrvlrLmlnKZw4SCXdfsDEsONjB39TFWodizek+
XqQLu45JkLqRJgPyG+QtvJQTpHe4zJfgvRQgtkp8/oE3maffD0kD7yTpdLIN
GhnbjHNg3vKGly7V6SHYDjU7N9MAcPwIrFHxEwdq8yLpoKywW789/h1TVBJX
4b2i1+ahEKPnqXN8RU+uKK/E6w+BeBE+JswAdbUPHPtLI39DMv26ViLdwEzj
E5QRjwXhAbnKfix5JKNiZyYxHTQdP4TlFDWLJk3JPm2Tqox0jT89xQppBQ/G
aJ91kh/ZNV9W2hdD37Ei8QGATpIMPYSDG+YjbZZJlNXgMYEP1mNMbQJX34GL
X5YB8/wWXFKQ7rkjAFiqbTCrOh5eE75DBdofAKTckNEcOnp0P9ZtUmBt4W7W
TWsBAZ5ZeXZaHX3Vm0vnUNaK2fqJn6uoRs8L2d4fAf2+eq7dnaF60jHv/gTc
2oLsbuJSdt4JE4u/p1to+yEEUsZ1Q3G2sF1ATKpCLjysyin9cp5z64jEecVw
0eDkyReqsxfPrq1NYmR/mLReGHguwX2NvY/JybQGzYTgR1j+tvW9rSSi+I54
dOQ9opM84czL1h5KnyzazF601HISKT/RVIyHQJTwM4lgoJ6mQKz8itKCqNhf
d+ZOkJqI+5A5lD1+C/j5c24WhW9qQT71wvyhBunVwLhga3hosvkJoRw0djiB
GKgUmYnkA/3oZTJphxT/jsN4JM6ixhMAeIl99U8dh04v0S6ZPbQ1x/b77Ljz
qUGwy2/F4rJAfvStQkl1Oha7YAS9f8si+5hgI/iOG6gb4LjqDAn13H35ms+u
DYLsy0UZ7ZbLfOMLzoy8miQqnTMHSDoFp3PAp0uk5w2WrHvGIJB4TVGXhO/e
ZJpeNrFRy1gZtpSJ3FTMIs+My95VXQw4PpmbRB9mUgmJi8SJ9tqEhBlGXnLn
HrfRMY16Fcc0y6ZUGSKfOYxtVbB0ibmoP58pOybczxsWlkn+FVEEq/lt5zvj
kQQjufGYiHbUfaTF+MQj2bQ/uNG4ji18Eu7TsTfqLnwOVSB9TinA+HM1veyv
KN2MWvl1r9QB9RrhBYlDO+MPgfZow52mUKHx1ZtItDuc9DoYV4RHI5SSP59a
yREkAiA3aqHEKC0wX39O9cHp5Mr2rg6izLzGXeXUnTRFn8wp6uwzQ4flB7sj
LOC76ammrorJbnGJxUoDQG/L90Qa3Y4dAEh6gLIaOvmxsZ3fqgEAn47dUuNV
nu7FVr53HRaWWO/IyrLE8JKuKNHbalxSaZ+ORpjIGemiBh4TNusKWUVNQCD3
tRI8YLPepE/c6iLqFwbF0cm423i4QZZSW+SVwSNd2BVqPi6hmGweJTZSdmnF
vsTziRjvk/EJKRL/9XiKYT+RjrDSPFAvSh64DAV67tIrWAoV8KZHbBCSI50R
wr+NnyTRBtwcuYqK0H8jH8wvmCymTuBx02toz1lUzzTT9lrDXcRFyjqGe4I/
z6B7+ovbLpLhl7fAoLKRIdAw/FX8YpDfOvc3eWX1q153xLYivEB+jqL40Qwp
pwCVLGGSNsiNjYc9rBlUcShaTxeZK5ubVxClZgtuZCc9pPLnfjg4nWowxlp+
spU+Xfdh87XT4sfGvuGO1QPtT7oFkWSjR70HAFkPMVYbGMPNT3nTagDw9pg0
tVQ5fJ+h8q0riQhs/Uku2mqL9/FaG52hxm3Vl3MzsHCZde2s3hv44dpXLKLG
QYWrneh1e2mG2MalLixycVSEJ8UrHwCw9LJWK74fDlpRcKpJDqkYNu5u9kTW
MgWKmMxkkoCMH00i1/0uJKp/SuR+HOFaDNZf5JbTLf+AsypJdu5nrAJedITb
CHt4429fRzFGfEpwHdlNRsQQz1JAVSRpQUJM84zEnQMCoUdU/5vqxho9Bkbv
TzBhIgKCcfxCDtz5Cltc6zMR6sDC+JSdFhJVyUBdw9BU+BhJAD0BQz2NCNcz
+nCLp263rmW4xqziYtiSAi5ErgxWpSbrGA1tyIzcLBbVPz2yBJYbtPUAYOtE
8kWV08bR7NrD+3T2AHBlQz33pe4S7s23qcRjdf4jgff7iYuSXcsPHmsHvlE0
XrqQ/Tp4Qml8kSVBMSxYN3icNv/RjUY7xPE76S+yqlKvi9I5Ra3eeaFBo4Sk
RNxT2tyFDJ7/fvHR0s+W9BDZ6xtKOjK30kYLD4dROQ9o1DTc8FkPcfdw7xoT
prCS8zR/cU58xkjarKrhMt93vg/cym5qRNWoL8jq//gCuH9wYSG+jwcgqElp
eAW5fRisDQOlTrXKVBwy5Ii+EV8jjWD9eeI/37+x6rgdYvnLd9TDBYgTiZSI
+1lzL+C7DvbqiE77f4tj3eEgWZXY0069tgxtJfdlcmDOow7jXKCLuVDvXhf0
xMlgWSdqJMHUfGazvFYy1ciIZINn+KRwQvfRQRqu7XkGmKeQHAw8qrLNOEAt
v6ubtgP12qbW7Sow/0RPCaV8V5U9se53S2uQzl5SfdobCJUbnq24JRAWr0yw
4p6Cjhcz6l+2zGe6oWzXjiOV/ij7SNq+Mo1T0pLYQ6GpkK8vTafG6nAVMWN6
6p3z68ZTD0JAAiNpSU9F6s4mk2Pp8Vi9sjnVu/JqkTtj4xzvitN8yOagpNSq
88ol1gUWKU6pHgmpNByVCAGADKExhKf9c4D9i0JAuYaaQ1BS4pRHlIQk+pMM
1M4u2Jk8fYYjekn2jWKGBwLBIQ7/DfsLheD/4meE8CKeJXpBus3KZXHooTZo
K1539VZC6F4tSbX0zXPlYZTQCgocy2W2O3Ts3P30POczvAiDBhyZF8IjbeKv
m59uF95PTbEx/L5aPJR2Z0ynYn8F6HpRAfL7smt4P8k64Uh0abcOA/I73bTJ
/wLyc5jHS/NXWcax9ymlPZP5uCrzqN8/TmZq2j8vP+yLCs26c4pcUrSJ5a7i
jbO0ENtR4JNQv1SzLFXNbe4mS3F3oGmPzSv5qOoiFgLRNmZ1u7/yR2tecfaf
7+S1oAgVe/r0vl+dLvvoqcvppXM+UQ+DqIPNLwRttBtKjnoYBz04fKagI/9d
fqWAkaId/yYemiYfhoAmQP3/6fMwm+TzcB+EJ9lr7XitDbkXhWUa6taM1the
JLkWtSJNsAQE4gTfgpOC9cqGpyM5/sYSJSB4v/jBENNERUTVpHFs3y17vU6G
7olLBvkl8h/UkmRKE+qPhUEgIhT2rNocLgwFPJKMd0zqvPSCXJ1I5mkj0uNz
zLN2JO4HpfAZWq+GfvxQ8Fyn5wAAHr0MBf2nxi5LHbOVNaZpcaBuCOQXvk1z
px7kCl2oSitRAQDS/p60adnyLbu6GT8zGaI5mtttYQJqHFtvknSTSkzjjygz
jJIlbLmBTh4XqVmF1ZoRjmArFg/a1yPM15IXK/PPIBBzfWN76vk/WiPN+cn7
qkwifaW6X09awBfdqPm18+uuUj6qxYEEEgaOfsXPZRT2Pdr9NLGL8koyXlJ2
KcekFfibyMc0kogbEEvo3m9bT0+OokPawvpQH/EweJPwPII2JBtKCeaDugzf
hi1ATv9dffoS5oWuAinrkYxzhAtHnevB+yAK0Y27bIFihDiD0YGbYAM/BF1B
2NfuHnPPULeXoCPXLUl9vCPg0bIbq2RBvet9//BS3fCx4rdDRU22XZOUs4T5
VVY/dR7TrTIw7rkuet6Pc03amBjvTg+Xj9kLm/hSgNOz36GYLIwtk+dcZuk4
CGFWPNp7Ut1ztVTZbkEoyt/xnah5MslCS326Y+Vc/OeCXHkrmrmLYt0CVpzK
0vMidIFDCXd7OGE9GmHWBz1/tGKY7fSCl4Ad7bDkUpWNy4mQbXnDbbv4cmv9
N2WCtxUHtPn8dTlrFb+ou2ZH8rIJdQvK+giTkKIrUKqU/6f5/L1yDp8MRQ5v
ws9n3GVIJrsi9JprjiuV4YJmBnE94QDalsQcdQ/h8B/YdeMOJ8APBfnpU47z
XpV2t6UlEJMYM/gaKoGigDKRHMFDUMdoBfwrBM/aj2IRxni9We8MPQjVv3QZ
3YPbPxYhqTGvHYkwPccxodKufjfShmJCf5Y977PlT35e+Wsgv/MzutWR7nH7
VyagqY8U/HdUJ+7m9+lq7vRP7MYtKAas0PX0RnxQXNoOqycLqVGi33wZd91l
X/xuSvDOm8bLziEbtz8/yso2uzSzIc4iOsA3rfKJSy9kLvP6ZwSkRCZQG+/h
H63QJWe8GCMXwHSsUdC9739TsucNQ3laaqX9/PMULjKpAh0i309Cm6ZJDu96
r0p4q/SrLOQpMAySphMG8R8gVGBffsNzRXyJL+L1wfdInoleFN/muOcAFwkT
6xQMdffCe4POJRoi80FTIcmRXP+uXy+B56EfgbVvopLkJ5DDOHrjk0tWG3dF
dSCuwyhJHfDPIZPw3QlQhEbdQold59vfj7bieWDUa9pXSoqtvYTqKj1qWKN8
9c0nRtvJylxtv07oznPfRvzi51cCdQLj3uRJxRWPqJOE71vJeMpPt9J+rBfY
6RXtdk9GJpxTXFtr7F0IF5JX3QhuoAlByTdt6qSKej6QNM18dkze8spFYCfo
/bOkaKOw4SOJUAl74Q8a/Aw94QG3+mYgkGK+Bcn823+0oofYLIZGp4F93XBx
NizBWaVmZKP4SdSJXVGVMTsN30PFSlsmEXtrD8/EHwpyAdoi50IfTdPTkbYR
hQtfQ6RAY2BS//R57DCKLbxbiFfkBnL6iplis1H7Yi8lSySEgiuQs+gfRLkU
LahvcC644L/L7w78A95L8IpP80GgSX7MzZ3gvGSjcUXMPIIF1kD8EfUD6U6g
T+hPqNPTl5hoYtwv2vLD7Z2G8VviUjdbrFBntXvN7Sgqgxfj+u1xpTF2tT9M
l4Hb8hY/+alU/HAGgNRJnQpXz8QzolHR5CFlr822yXeFYefe7Y5PcyUPKX7e
lO7XigiTTV0HnjOHvpcJ2YzLAS7vyM7mn54Wt0JcBnaKm6UjO3U7ehZEbSVq
RbLVC6jzwjNvx61DIGhmVr6spMxfPe9I8izGQ8+HU8wYeUCfU6ApsYAq7gkW
s3LNfcLczfhUQEZZTP6FTaj7xfVpNTodtDZYb0piwkb0KEcl2EP2kPz/0fty
/62yDYOgacHorYBsQT5CQiBWREm/VL5qqKZvm8RU8kHr6wSI8uPR9+3YdBpz
j+HLhBqQRkgLrJMimK4Xj5UziZWP3lPkae7jNunrHjq8h8ET6Lv35OcOq758
f+eRCQB2i0Xty4VvD8I3U0bZLw8ftW687+OL4TmYWHlUMGlAfnz+RXfIOxXM
SSW5maCrzN30YkQT5CU+BDKjxShDzz7JxDsnVB7i/H6sq+SSz6CC320z9W7d
OWWagCBiN/5ymWfhP+sqjAogzbWLljZkUpZH1TH6XhNfKa14LnrjknV396TS
bXE10TpNNaZtHkNBfdsgjiAeDl5xJyMSKvxdvEba39XvhOgPyDewbrxEUj7i
XdQFijgKFVI02pUaICok0EGN/Yf316hA01G6IDcvRBXqFCT3FP8eqgMcjYlX
+92MxFLD41rY4qBKdh/N3hmlMpp++0iFHwP+1hD0FlkY3R5eP3s1+wsmArHo
XNnWngw97bZ9ronzpUJKKQelX0079jMAgGMR0h1fkHvsuV04Mncp/eDNyuVe
taijDcHlO0UIE14Myct7YcnqlsfkpLb8D6SismYQY5B4MDN+p7sv68AexCL4
w7SEz4l/JKHE1ddVsez2Y2UNnRTl3WvjyOtU95mmfu2ncUXxE/G4F6hUsA+o
+HXix0qpO7V7vhvMY3Qk7IJLknGR8NznE+S4IJYhLxtFJI1T0VN5nO/Kqki1
TDYlA0M5QJsg6f/0+EdEwIk6hJnh+7HsMNaS44nkc95jgFLoiBYSEuIZojj+
w/N6WlAA+XNX+B34NuoKOO5/oDfxnqMUIMWXBByeCasH0LZZx44p9PUxt2mm
dJkKDtH/OWNPTK5Ab43eYnfjrGV5L7aai23GpGpq6u6vjhuWJiglHVR8Zejk
A+2vd5GmpzQPeSK9Sznqe+ntXtGKSK9JlORa09KDIsiFGgxxY0yYrLrooTCx
DV+wZMYNehQSlgPWXt2ATAHNfotda/xLka0DywheSYy3oMKN7HTlEJ1qFfdY
CMQBwUKi/utcKE4UjPqxb5b6V84ulZHv0gWhJmffHXtdbz6wVWkR46qmrmdN
pvgksa/ySa/hWZW4qpqGJmMpnO08GYxUShoB+p7zUI5/Or9l/FSkCQyLj8+H
4yVhONJ9ymPI+IT6WC4AuQvDINr+w/48GDqPtAL5PUIwolVBqz0E8x9tNBW8
3dPA1kwoxufOu/GYlwoX+7hbKZJzLxh9lvpTKbGSR9A7oB+xL3KgWW3EL976
2ByTvK8ueZA07nLXRPHG4eqwU+cYyE9jCdoje3vt+Mae46jMJd4drRWWXs+o
H8tDi1FFORcAzNBLprAItcV9QkJj3iAJspssqCwYLziOpg3rFB6xZnElT8CL
Z+xufXtclOTRJhudek3pUOtE2SP1Zx1EkOrkPGB9SpFS9KWeC8ofuWDKNTMi
JaZmkfPcX2duddpfatHikKCa4xgjCtQS1d8zXPqWLXFBgVk5PLeGWhZfAv8b
V8lfNvL9y/IFOgqOQkb/FMMBoZjk859vZrBYpG4BAPv9LEfm/aRZmzuOZmOr
lGxPKGxhwozh+GcIV4KvfMENeakJSiqvAODocZs6qN7fm5aJu5cva2Fbpmka
d469sLlbsY8pwb8TtpRWdHAGATMb3rqodQD4+L0y5s7p647G/ErbrV1PnRmR
UcZB3z/qwoW6wuxLaoNQIgpuZE7Z0UE9aF8svb9u13DCngn1XZYSLoZAqKnE
2CpEIZAVZAaeLrLZx0tfhMtRR/QtJoFG49wLTAt1HtZK7mOmxQclE5FSzXju
B2z0bLFy92jIGbOZ7+uWEd3BT0ar0//ePv/HFQ2EAfTnsxhyI6GWJhJ5hXrv
M5Pjzy8tA0Be5Zn1jy3rSbz8VJOhJW72h1Se8DEmf/xmZCNBCR/Ps5a0ABWZ
ZurTr4+jtAAguW+iIs5Tb8MD83SGpenFycgJ69bjx8Hb14HjBaGiazi8UynA
q25lFQCuj+XF5pzttjvkr9ls717RvC2sxLDo/UdtcpFKrK8pHPHQxGRN5Kk2
5+wfTi+UPeRznN+vS8x1PSdWnA+BtKJfU72gYkM1ElEhrfCfx5I5s4jHWFgP
W+X1GMn3fXpfWbrgkjoE14OJMvLKcXEyZzLQsj6XcxDoFbsjhoobZjuiGaWk
VPBDIsBWI//p/jMRnx7vE5wHf4lcnEQLrU4ZRfWStAOfhaaKaJxgCO/Sf3pe
XQzJ+Ws1iG/smu2I1IN7ku8exI0ZfJipObta9sXCYIt44uFttMnTpe9sNtQw
BBUzlIAeD0m0LNDwNDatQM27ZeZ44/FrHQCAf4DWNHpF73SflM6yv8rChGAC
tnPq93c2TgUWhYsAwAIjhouobV0BgKzxsrgbOOV25bwnVsq72xqUIqoMXV5/
1MYY8YrDg/opgSIx4pVU+mtDnfq6ObP79Q67e/GhejZwIYk0COQmnJUom6CJ
yoy6HxFLKJvb7iMlt+vMOH94L9CidHRrOKRCw4vhq7BUM7sH9wT5roSmiLs4
e+Aj0VmFXqWtu3a8bHSPqOHqI+ifO+KS/+n8BtDHiCB4AtqEAZ/6AskHDjkW
Wsr3xOPsTgRxKAm89f/0uoDzKDTsp47viD22U5e2rsp4wxUbbnAyMX2yeHfS
omHr6g/DPKxJ1bIYexH1JlyMOZTgO54PsbfweL1J2hd17TdrR0L1n3UDAZEP
Z7XbXkF7tcdls1KvXmFWMR93cp7Q7u1gixblQX41x/tncrWTIL/NceL4NuBZ
OyQvzLJ9975Grkg0w6nnH7WRhd/i2qJBEysSqTRZpOcb3XvSOxdcG223vM8W
VGnhIRAbD4E4QW8gH6OnqPaosUh7vIFcYw8LRWqnrFX3e1xm57+HT/Xfe+PZ
OKQpdpWNnC+UJMdIV0dDY/kxiaiujIOCX34JqxhpCgmJmOivfYgf/7FwfkMZ
hYr+mm1rVUEKqFMLWHhnf7jYb2Q9KH5ryJVCyr4cXnzHlVt5dbhGHE4ljT+l
qBTEb5TE6+RDdNT34LFxwlb3cEi1m+XVraWV1OVrTyox2KO8bcxzjvUETO1i
9dOkLZtNgrVLJQCAwmrul4Ecz7a4x9/nJB0cjvANvk0GgPSkdsdr8r1tf9Qm
iQIpbkh3hXBT7tkr+oQhS+GvkyVkvrbK/E0G2W1e2Qryj/EYjaiw5I78Jog/
pkAfeV+/sCFyZCwx9q3gzDSx//17tZJgm/WxV2E21k8Vk32Q8gWC61xDij9I
lSnKqK1F29EleCu/cf7zH11ewvt++RCMbr/IGs2ZdeDtVT8XQ+c+lyI9b3Yp
zRrhghm3SWXyrw9FC6nTCe4ofg/ONHnHn+RHfgR/uGTEsHPvy6PqcYuRDZcV
slXr+yln8cfeu+HP2TYgmJjFyPrtTcXNlDV3kNsPTMUu6g4AaO7e/B55Y/pA
5Pv6oFsSAMwnCDuOyYm8/aM25hTXZBaYmogD5a50f0wfsO2aSi59dqlKbebN
YuqxM69MzwNuwjDkKH4aGS/NMBgrziFUS9NimrWt41a3DJ/m2mV8M/lyWibu
LDCh6FymqiCE0KRimaAhoiXh8GOvYj5juGBWSztIoko8w49EcoIZ6Ie/fBYq
Akf/4pevTyI6R7NgWXdHOaBUP687tYz98o6M72NIfpnbD+XRoSXhTOq7BCqK
MaE8Zg2CZFe5D5sfEhnT7F78XFXVY8m0lrtiukZZIwL0nDTshb6I3/iE+b74
9LHnFnYTvq5cCAANGPjurXwAKN0DvilnNx54j90etEoAAJeEckcL+bI/+b0j
l5c/ZbEgrZLWGWzKZnQgnZ8o9b54Rc2uaScmznpWJK10Co8GQYqux7dhyaSH
wbcIwvsNyh5a1Ff3nLK9jnWQnL42oHMv2OvhZ9Fz0yKkPDWsT6nfUVDQk7JL
87jxU/ABoW8ENBmTqTs0Cn6t6bL4p/e3C74sng3iE74fcRihK94c6QBxCuED
vBXS22gU+i7y0t99jtDfK9pw/F/8rAxpRUNotixKS9uDSg3Eelsrn/lLKMw9
Yyzgc3+pjPpUL+xEQ05IqVQT+sZsUEg+KOWg9NEV4/idV1+Eql5ZFa+yrcqu
G1cDABOWeh/VKLMxgHVcMnrMtr2xVbxuDfIjxLbtJIP8aPbR39uzsAcXxzU+
nsQDQGA8tZOPAqztj9rMkT2V/8jGSO4iUft5Oue5A/dCUWmwN7vKoycZYf2m
2oKBuRcIXiDEke5EDOxPWQLQTWTPppce4rl4PweAg7fmjrYrlp+jy6K9pntJ
FeW4bbh4SdLZZ+h2mcmlYznUBHSER+KNRCQYHlEdqPv/mqky/R+zH/6/WyjJ
bInpkGUUz6WSRQPYP2j38HnwtzE3CmpLp/K1MUWLdwhsc2jTfeSO+pqSN224
NolcVCoataQ5s5kHel7F5mONcEmHqPsdB1FYicmKIrHN3LOUH8+rn6zVYwo2
fu4nSTpW3Px5/tqzY8hM2w0A6Bwub/WK6ttTeRVflONhOWFNUAJlQVFxVkOn
4M0IP9Qb9q+M1VRljNcFX3B941XVeqEQwm5IqSAlyx5HxoW+R32JTo34BwEx
KXeovJ2RwpSzwNxZ+aFN5sjFqeknFG6Vi8H1pXG25lmlGxdE1aol8cyCiDRI
LCgIWIzhF+Acv56H8H9L+eMJJzFUV8g48IRoaxR3JWa5rus1C+YJ3mRTE6CU
UOI3ZmEQXuUP5YiiDeQR/tpUoGBIPG23KF6Ubsl0dmV2uwsXM3H86Ix2v6n2
7WHb6bW568VXd5dO18ZHq8RX9TAJG9Y1AEB+9mLrbhUAjB5jp5qzASB/WOwt
Imr40KWRoVDN49JEK2EDzApvmlUclo4URN1FYpnOaCHk9jQKgnMcEJ6Hap8k
bRkfkkL55oiLfuVbpyx2ZKbo76QMtZ3JDaaPct/uOj07dXGdKZrZqvvmQLSC
rgFC6Q2najatDJXnBDLsTRk+U22RdchsoTsQ0QhS6jgkGXIAevkvz5EXchF8
z4N+oF4gj0FfY9xQGZYi5q3TXxKNEdZlpxLyFaPlv8nyjl+UX49jk+YNz6th
j8IpQ8pp/aXK4jirC2evZti7PsVUHD07Ddgdq14+eHTWuNhVTHLAdZo/BlS0
rhCeUG5cA7kpA3vbQuAVc2w5mZQFAMvDDa32kRsHU6+uFwV6GE7KE03D+vCa
WbthbnB5JD9qlh5H7UlqS8HFH8mO4gyUec4xTcZIcJH6458RQoBziiGT0J7y
e7/Evfu29xtqT0MbSVy/L9VO4MrVXW6uDeU8c5ZSoslWljXhPaCPUIkQUmd7
T/PJEkJtTjxBdIHX+FfUqP6NPf+PKUaQUPAdCoXSFFJ0oA+YvqsJy1DwHRta
S7iJvGFPEjYQ/cSXyoLPR85/wGFMy867N5xVlGT0cqp2OeXuVeuxs+OZ/i7v
2Poj99PyXddqxoNFHPXKYfHNwyMs5xjqXu9K1XHo+vtKOwAAbHdcQX6nR30/
wq+DeuJrUGtNhMmBdbNBCZOnyhQtURAMgzfFygqPgcog4Cg9mmMqDbIAcm9+
dXYvDgqJGCoLAjheEfrenyfQMAgk8UVRXWZm2CJo7PZg+gRmQi92HYc2fX4k
lRu6tM7bB5PoDwu1un8QGGAMphkRR8p+FtLngF6zYFOgvEzuIZEA8nv5W3v+
v1biEI2QNXgqmH11QpKgbQg0YuXnPBKM+FckJ0bowFugVHjwX+r2DnQPSimt
KlpP/1nkY9dWjpWl5WT2Xso9PwcAoFoargEc5I8UsLTrLjdUMADQvrVwDwD8
Dj/tbpYRn7YfLC83ltrvemJeLTWXEp5Q7IisMZeF4cYWdYe0k0cwn79eaZsD
8xf7AZfW4cgZwFzoPc00jf4lUBNA4JCfT/xDwYLB90yCe9By8JqE/wpPBJ1F
UELJTwYlj6BiFz6hPyOvY25P77mYoaAbG76g+5DU3mnBeU2v4bNb3tyNtwLp
hrbr1WoG8fIYYRetz8gHaBqC5b97fulfpaTBfaHpeGgU6DtgGrBcJA5RB/YO
BRzzK6q4wJjgjyDpeEfg9/Wg9pBD1JRcieQJvadkfbdnPpt5+uz5ve3K144A
MDMvVs3mUHnw6qhkFZFDfDwO3NyKrQSA1aOtI72Ks7PKQ6VlijLILg6zsMxS
Rnyic7CzrlJ2DyBdKh4KTFbHfB/WefuT34P3La9CIgBAVICbOog6whMCaYVI
Qe3A0ZQLdQRr9h195VeE9sBrRi2gLqCUqShInpOeUPPIvOGspfvMNV7dmgQ3
flZCteP0qsCjcUNyK6j7jv/d7cNRsppC39pR1vhxJ0lD05tyZBuE/KSdf557
Av/t+4/+q2UB1gTFoj+C9pcHL4XpIxeQVWBbumDcfyrZC7BdyBGeLdIO8nMN
ohtBo8pVOScmI7mtXrNCPLMf8xd2P1VyOYE6YP5H1WN754PLh/mrczcEjwfP
Wrb4qiYAgpNJzIvKOoDtkHWZqZxwRwtLvXK7jPsYduS4fqG8COBZTh4aSto9
GRm2bhsA9Z/Y+7ZXAyA/Kt5MyjxqTTcIJAPSALMB8wobGCc4pg7/PKHwFDWI
GIPXwpG088TqpF203+QWBR6ylHM2ty4UFVtdeC6+Sfj8o/O1lfIfHS+VfR03
+wbc75Z4n87WxsbY8WlIF+2QSuHHIxHMfLCf7DbxXiPYUKcw/d+2D+K/WnBQ
Bugw+sPPHSwIBzglihTlDv3ZV/x/jkgHKBf0KloMEQBpAz/xIEpTGZKTY34o
d6U3vwhnGrKQsNNZwQvyK5yTrD6wv3fw6NBkzeBG7Unf2fntctD+7DEUp8Vg
nLt8ULHsdK9/2wpbukxc/vSI5ej+mta9UxxiOWfIPckDU/i1tU05EYyK71+8
vhEJAE+4LlNQ0zi4QCBREB/4z/0lPfBahC8k909+Syg/uCrcG0FJlY9SRq6g
6CWURUiZrjF39FtWWDo6tT5dfFArYvtpNWKM6v6JK2p9rDMm/4oH1wJJUKuJ
kbRFjj6pOYEQgojNBgFDFMKaiIURtoheWPT/2POx/7VSCe2CC6DHQN/Egrwo
lcQYTpQj1XfuqZQwR5fDoEmtrCXDtH+iFDFbCFmEDY0mtcwlmgCX90MF5U2W
Icd9OOMacTDuza6PlknbLGHPb3Q/GHcBgOuY8EW8ElNA++T+XGERAAxiOQ+4
HgDA0O7zvdEHioDuNnzHuPomzmyefAmvWAzXOJw6+DKT9uheR/67J/FPj19+
FXsBBTleLqz0sZIf/TzEkIOkhI+IQiBjcDPY2d/k96Xoa5AQ2Ae4M2USmgeq
SmAecN36smDdJee31unL+usdg63h8cuGqU2WEZfAVCXadZFdhf4ttSL9HZgM
AgO79ju6/R9WLsNfIq7j+YP8SOGlUuEslOQqctcM2eWLOCCu2tYw+UO62mvW
Yq70WYQfTLHiEbySJO0GbF+Zq6rMhw8cz6irSewB4PUGb4WMnQPWa22xbtgZ
ACqO2BbDioiAgMNXM7x3AMAOu7STCOo9+K7R9nFtGc5789KWUIUd8H7Bc+Fb
oceZ5BfdAd7M6KPUdyatazEfDsuGYxpmwThYfEfa90wW/WmCXghxC7Yl/HP/
2wb0/N/wk0arQdFILrxR0iBiU0Q3kWEov8djmcs+Sqslzwx8KZd6tibqDS9W
Tui02CeRO5Y/UDMklJYWllDzwzOEJSJ/nhk+DRGHvPsd3f/fLj2IG0gJ5OQv
T1ki3cBGQ31NnsvomZIip6GnlXWQ7EXagGsIYXXqETwd4xMeCdYhAg8Vsq/L
lWizhH34aXfFrC0AmKwvVuzbsWNfr9ys9Qb9qOax29K5ojZg5tB1zq8QAHaw
E9vkNfQA6c7xxofq+FO+DepNyfIAHGpxeZ62qBUrOpwxOJeZf+TTIfH2QmzX
Ae/w4/qqWAD4nufuqSdV1A+lWYctwkIFIRAF+E2o/d+sbyfC34XdQr7Df0md
SVNIcJUmJtIsUEqN5eq1Hd82xYD++bG1nDcsIVTzxl3PU+865b7DWfhL8wmE
nIOB7Cx+thzuAb6/+kvOWx8jzJFSCOdfX9vKnLCb0uAr3DF6rBLJJeHDYn0s
40l7OZReyJDKHyVs3M/Ty1pOBFUx/FRTEWaucNCJ6atQAmWc1MZxJcxeEau+
Aqt5CfrT0xPrZRHQb1YdsSyQ/txvd7q4zVdbfZa93bnRXfUIq70B27hdJnT2
fKFqfqdwC1M6vDOIy2w7CugSbdONe3/Q9oWifjwGAKTzhN39JIrfH1NdhY3A
XgpAIJ7wh1Dk3/DzQCbBJqHtkBN6DnZ5yk7as5sKCWijnZsfdjXb8gPfLXrP
pT+zD7JbbniREcltlfouSqufG49pWOF//X469Od9J/u/VP75BXzZEu3izUEu
El7zOVGIZecP1mgJ96fSFD56NqQbK2cCAFadYWEJhgDwqsnoGq86ADSMfbjF
8Wvf+tDjRrdXWEJsXOk5NwDArKbekwbtcOMHWzm59SBwczF85O6trtO9Jehq
ahYARBwybjvlAwDpgfm6GmiPpRu5c6f5VwDxqfujugVi2LWvvX0p4M9RjmR1
saUCgN63pNdrkR+xGz9csmRMwXym0jyaXyFsOJeWDd8YYvd312nuIv94cniK
CkY4lLZGEeptZ5Ql4R15Yl2uaiPS4cIq1MkmxDjKbUB8h6AW3+0/Pa//P6kM
wbSgGqQdBD+g34hSUmgNoUKIQoehwGukmgBg/VUlyhbkVtC+GZysBwBrD2j9
pxUB4HCoPIdC2+7E7CyvPsmj/JD7LKOUGIx3Q2sMle9sAGB3bKQEYgEARDOq
w7m5gTiCRedllesAYHS0tJkO8ms5HNiYAvlBNnvmbcG4ODJJN4KXX4rN/Krw
/jr4c+wjrh1RyQCwMDrZ1Byxis2fks2iBfnNVTlFRcu8Hdik9wC1tgXd32tT
HMQMbgJeo4VVuWWoLlCxpHc4V6m9yD2JuWBWpCAby6PGJujKYSBAR5pPEEU0
izBBUiG/wN78Jf1mD0wBSkvOR6QFryLpzVs3NxElqhv8cjeYVQMAfrzfv2qj
deUso7k0sFQLAEwrqHyn5cxx7R/nbx5ovd1TO6l/ouAZcyiDpSkpB/2l5FpH
FTlof6+/vb1DA/Z32Xjpp8AcWiBn/v3CYDoA3DuAr9vfBgCfg/h1xwIASN98
PR8N8kuc3Pn6Nb8cSztC8N4G5Dc7bNA+mwTq/a+fX6Ij2LAlk+sZyqAfKKqc
iWST5up/wfAK5Lf0d+1PAK6O/vmU1BEBDoEx2nLqyzcqPOO0NW4Y3aiz79KY
zfY3uiUtLSAgL03mR2BL8ggJw2NHsCE1/5Lz1RpgJEkm+0b0Fr5E3F7cbMUn
WvSI8pNciLFGDnDw1uqKinrc7uPn/JfT1ItPiEqJvOxl3p9YfL5zO0r7/E7+
8cOnDzwIMcmYrGIuMP/kXu+sYQfjoOBo1+1sYwCI/+Y2GHMD9L9zIvO6aQCA
3A9YvZoLABT7qDWePJDz1vrcAMixYdJ2xKCA9xQ28q73Cshvehjdvgrycxme
fXE7nBrTP2mWEXUeHA/3nkWoSPX33qLfBfnV/l1+CYRsZLR4g3B61WYFFe4S
yebM2x7n9GhzNG+U2zdoUmdznneRDRJQV08gFMfDEBTi8aLWoN1w4r+cXo/H
V0eVQZ+hVdyzpCnZswILWsb9bbXvnr1u0fJn1AYAp+fll6y0TLfZX/mFquhF
78He9MSdar3Ykd18XEl0YeQgHetXWOGkils5Gi6LB/k1bZBVVoF+8/ZnvWIB
SxasyffpAUIwjrXPr37mAXlcWTr/qTQlBngzu/cx/HrE2blJqY8Xc5SwZWNq
H2dy9056R73ff8+SP73xteA1Kl4AK9Uj8wB69dWhy4ztXRYH3D4AHNekXQCA
D2UzEZsqHzvNaHGg3in7m353gYf88oVn7Jdo3+K/4iAR+cTVzXRf1ZbFhFaF
SoLzDek74suEgmTTaFp8ART3XzL+NcEhEHOCz/gtiI/4jol459SE3ue5DzWF
7oPc2F4XBtBpFx+fvKC/8lVLauuoMSvUT6fj+O2bqYR0zfwDz6PZumfm1rg6
nFiRi9P1M7qDzyWDoN+U2hauOQXjn/kn4wJbs/NY9W8v+3tTAEB7jvOTHqjD
r6/AP4YlVeG650MHjdNPT/MmX/X7XvfCKn137d3N+nxMMzzR8S2DHVPwmb1p
N/bkeKJX6dGzq0THI7Ml98yd6I5BD1xjbgYA6HLVyFfKL7paGS+CPo/8112H
9H+ljdGM8qQTiAPKeHV7ER9uXqstwXAWWhZ1aXySXnQ94Q10COIhvAuB+0vN
s/xRDiDkqHXoIuEUURzeGeH7QkIrmOTBI7Lvn6Pjf54n8OZWQIVm2R77k01f
dw3NTZt6mSA17X6sZ+PzOE2NuoO+E7kHFJbcQNxpdaGPCxvm4Q6qcNQaAM5v
V9Tag3YoNRB9u9p0GJP2dfC9KWh/ctNfBqRBfmfLkwPziY04vqXXA8ZpDmfo
Gcc+oczF082xwC7ZTNqT3OG2dx/SIk6IPlu8tIv5cgTpwzy0uzp4hJonqAh2
KgL5xdeMgPzcy2FR00r6ndNM/iC/TWII5Afk458U/r83ERwJIYRTeDyEyqoO
3EdMKnr4Mj2cwpxuig0kw2hVkhK8UJgyhBoZ+xfMW1hgEnhmcCMiP+InaH5i
vHJKW0JJ/mdJIzpRaWDe+ak5z39Po22X/5Gjj6Qm4dZANWFAqvaT45tPpiML
1YT2m48F71+0PMaGYn3uPHT1PZrfghR4WQEAbJumjg7MYzTfP7u5ZBJ4UvOZ
obcV5Kc9qfwBH+RXvsw00JWYBHxZVht8n8aHM5qL61PKROMyJ2S77mR8P/H/
evquL03oBPqF+yU0Bv+YoR/56CTQ5ThiDnnPxZEQ5JdaTQXyCy+JChdTjHzL
w/jzGYFMhBCIHJTsX3naTjaRIvEDUilSqGwVw33qWtl6eW9ON/ZbMnOU/YS6
ZOaE90Fycsjsv5z9Ff+qsQEsVTGPeYqKRB1Zau3apVL/qb69PPgGqOsMGiKv
eOnRHDq1xoQ06qExq+96wpX1xoHeDyxJ5w3GzkIx5tU3nLtPP+4K3pv1+oqr
2Yoo9wDjUvV41U01UGfMfrCra/EoxB59PO0wyQCAjPHdD8lgXrIy5dRnkEmG
7Zh60798wxpzdzJyMCPX98Rh2ukTIkfo5NHc1iff6yS4hkmNDrk4UEd8z3zA
6gMAZOtSNSXWvpjCBYXCVNP1U9btuZJZMB+VSnvhfkuQIfv1L3br/28cS8Hj
AjW4Hn4L/xcmbooaJVt2LcYmWgZFFD4WD4dgJshHZCBuwGr/kuuT3MDXGUoP
RQ1LQRY5B0rOsjV4u7T5++upkh4Rt18OegvGv6JmhiBdXRmMd39uZK7eAG6h
xyVqDOTi94k4CXMu4cQZ0KhJdT0+fb1HUPrEgwL3fq29rA60i4MJudtx+qDO
HoBUsDsij1c+kLWwgXlLwKhPL2UmAAiPF/RczBAHoiZa3mOybuBKJlj6l7IB
bP6EYt/YdTdMylR2r2Ha2Rn9N7/mB9EAIDEcUXveGwAs1rWrrazzsQGLVwpf
mT48Vd59cVca1CdJCXZ2GTy+8RO/Zkxc/rfrpEERZCC3qTuNn0uG03+1v2Pg
KLvH/yjgOX0f6VVSKIs9MgiW8peaZfnfpQYcdS7oMXxV1CY6MihAPZpfKT78
/VHAcyUF3LXW4YABTV3sXM/XUF/dehz9J/uoOL2nQGmnRiSR/j1cZ79+4q7+
7tEw0F972/0dMLkHv3vgygaQrsWVngP5DU1H3TExAoDhgbS7X6zbD+P7OpuO
YgFgYPig8y6o/wy/UXax/Ty//vuNniHQHi+MZ/eOX3fDMUx097zKOMCyTSZ2
qCUdnIl/7W7MibwB2H4erKb1DgaiVnsqMVYrJwWLZSWyZk9Ob+8ElNSC9ieY
2urQzEub4v1Lud39teqvFnz1crIynFJe5ulzltec4ioNSPXNNkRINd3+wQej
9qWsE6z8y3nM/1WGoG9RhrBQojYSAkIp0o6YN3p3Rd7koPolAtcUvuAs344H
XNVMwrAOKUfygn4074tuzNVzAGDy9ixC1BAAKHuwiUNGR6f+ON86eXcAuLjX
X8ThDABiq/gluqD/bJ8RLZIBddrVfrwiFSvzw3N9Ti/VQDtaH95vB8A4GPnt
Y/u11CXA5ztFt+X1VIBnrKp7OxMNmE2w9nBk8J4ZTALtg4kMuItfq18SRyJw
vZ/7avq9S4Golb1KE+uvJwNLIaXnzUPP5HbsSgRAfp8zEp0aeQPTCcm8wEi2
T1UIS0MJI9ihesL6PCKsIeLB/lWm7OJpWUrBL83x5TEVLMIWVGUUVMKJoO2V
/gXt7+KfmVYLFT7qO/Im9YnjsvQYt+m1uYd4XlUq/Aumz8MuX1Uf3s9/s39t
TFfy9KQlOWRMz/Ds5suZoBfn3mA2mi2iP56zOmNesS+tAu3MeWurOAHkuzVj
kzmheoLLHlUrfAD2a+jI8cuxMADQnynqHE04OsuYnexUi7t6qjNH2xEY+xTr
Nfe4ZzjuJk55hq1PLVHkrGPCuwuSgD1RHltuEgpjPKP5/qFmAfSbWpPMdwXt
HuLW1jsqKcHxUbLZdp8OHB8jy841ReBVe9Eh5zyYL/sWP3R9zKnQbHlxWbmI
SCwG5mQgL09z4UqY1mc5Jb71IFXqe+Tt5L5Ck3BJsAcOfy+E/2ZhBF/j4pG0
IWTbYh/vOjkMyUN6LdrlA/FVX5xh2iyDVjXvnPF014Wp6Syc7neQXMvUZMPe
burzr9IpwtxuM43JP1d3KrPuXfrYAAC6N68WI8G4KDyneyNaAwCyh60KdMG4
9PGrWJNPBADUzpb37Cfl4lRnnvTAk4zPymevdzyO3T2hnDfp+Rr3BJe+GPgR
Atol73T9x86MLGzzOPBOLj4KC/0286DEDwB+/DguuQLqEfQGSQUC5Me8HlcT
D3LzXCip7gX/D/fc59tzoF94nI62NGQhenDxaop2ElVyHlXxd5cSMb63h7Fq
rmJqXzqnpGE8T9nY7ZdR7VA8mALcFuoFxYfs/G4U/6USDo7AIoPvPGyMXueP
mykvjyrV76x2T101UQX1dc/dEAfN9LN7/cJh5lqnmIoeRFCmBi9G6q1zMNm5
ZsCj4zCxWH/m9N6GdPk1sN9w6+p3fs7T3J0dy8GA/IaGUm/JGv+cf658zhsC
fn+Spws/6Qg38mOpyzFJHAefVH0nGQPFnJ9l6rwcI3IWvcQ0mAvy65xR+Dx1
HYm7MSHcSZvYgcX/dudB9xXQvseB4l/39Vd3yjhAfgqLDys6f86jzatUfQX5
fZh5fucu+Ll5eKvBbYbn+UJBHjo3GFpv8d1PvPxMETNoXJDlr2lAO4rQUOHi
Y+K34QHzVG+EOdIW+gra9hf0n99hAygvUDHtO1jLDPE+9tV5R3NpT671YLLX
NxhQ/QKo9yUHs6nznMoPNoQ2aKqfnv+gExKnNYFl6OwItwfzys6uq2nXQW5B
W1n3tEFOFeuK+W9BvdgyZ3uzEuTnMqSTuwd+n2KE6Ols4DZwNF7TUQ/qvqiJ
4U6xpB+4o3G+t05Rxtgv08/auiOXTpsXhvsoUwCAf9ZraDNTDbCc8OmoT4g4
6/3W+cDQHwAKxzRK5Z0AoGllr8wO5GQ1X13uBfLjXzSsNAT9tPvcTuEx+HlR
CObcQway2zmhxQYErKF5/Y8q/AWVX/fNlC4FkhoNjy5KUbE1MXzTGwf7oAo5
heCEXYSVIv4nPq/43y5jCCLQ+xvDa9mrSYzwWTnLPWxlkzg4kxpuOFhNSi19
fFpjerFcfWzvU/0r/3Wt7dOURxcDVvSkMA3324LKDKJPu1+sRG2Dec230Tu5
slqgX1t5lzujcA9YaevOKgXj4eyAdPUbNwCQnWFphoaC+f0UXwcnmL+Y/XDs
7IwBAOQPh46hmJ96cKhZDLz2fFZ+FgD6Wf8WkQqDQHAcPNDJTgJ/P+kpaeSK
/i2M45uxK16Kd88WBkQjfRS+YWSXqNMN5ABAdZ32jroaAOQu6hSKamJPAhZy
iy0sXp55PeZIs3WOXHC+1GoarUJx9wLNBvV1uly5U9g3+FPEKYECPBjmAEn7
y3H7l8VFnoXhFWmPClnerpWFZPqA7dM33vIKRYcxz5f9T0E7Onnu6WehVnz2
6kG0f6zeyZFCbXUQvrH86ZUXPtFpIL+Q4We3WkC7e7cAzw6VRxwpvL+W4Q5+
3jDoVs4J+runi8avI4LA/HA+sqsZ5Cc6u9c7Eg/mr1ONPTcSAEB8AtpxANol
Zri7MQPkSP/OrvImyO9HfVvGLGhvvg2Mwaq6ZCfPW4UCO5VHcKQf9WMRqqSn
Kgv42X1KAEA+15fHofnzPmN3/g8dnxOWbyFZXeD4Iav7kibk4nvQHW/klWrS
MnQkQyu4yEfspU3QgmdAqE+H+IuT+3kw5s91Hj0mqrynFK+dTB7ieUxItay8
bRS6+P+0d+fhVK2PHsD3XvOeB3vb2zZlCqk0kEgoMpQ4yTwnhAwV2xQiszKm
eVAkFCkpkSaFNKiEOpqkOo6mo5Oi0P4t3fvHfX73d5+n555+t1N3ff5ZD89+
7GV99zut9b7v/m1e4vi82ilhoQskkorj9NWzja6NkiosQhdYHBiCK2wic2zX
jS2sf5M0sd/jnC7Xwmg855InFpuCDE69b2srzrDH28ET1+v23XLFxw/9Facr
8TxePEts8o/H+xl991t98NxqH7dfWY+P5689XNlMxuvNhs6bDWvxXMObN5d+
WiuRrK99klnvMfczUhcYiVoofFRstoheZVIr6b9N33jZJPhzxjOwoAdvpxV6
V21rxMv/orvHdkBLBsfOX4tOHV48Mqxw8FmqnofSx5Sk9AD95aX3pBdqTZPR
vOPbg8ogU2nNX+5zW3znDP4K5D/HD+peU3UnidqjMmrAwCW6I6/RhsqQHYYm
kpHqlyEteH5NVfVBg0aiMcOyw6EaVlFDvx95EOVu+2rs8rmhVEc8P8avGlsu
4q+b/UgzI9dAcVj3Skd6OJ4f+Yr77ncuEsnK3+xOheDtV9NzowuWeP3o2Yu2
ZOL5zX7sdCUGz+/Do3fNNXh+EZ20M9H47ztaNEv34PmVnqrJyHa3H7duMI61
tVo5CrZVrj+Ivw+rk76xxiRCcr3PIP8q/nN9b/DWuXj587vH3uVrXSepuxqX
1r20czBij2tyoMe5j+MJ4oBExwNdM+b6qfeo2ls3ANVAEHYUagFvkf4k//d9
T38UI7CElENOgxaLImhXEFjhvnHA1AC5Pavo4erOyfq36+i73otlbcQvdpX0
xE23axwuPHA2Tm955IhyeW/sdRu38Y0nn8a24ddt9rUzWbvw485WMCUDP5rV
aG2R8ax6N3CjoGxKhMWnS22vy3LF/HcvjrELqlYPPjhaGJeQ5DftUmX8rOCF
rovL5vqdd1xjtSYzz9V3WaElkla/AvDJdjlYLBveH3XA36LVOlOQ8Uug4evj
BwKzEzw/fBqs8Ug8hY8zo1qNEsaNJJKcB9Ss98Z3hp/03MnIWvh8YPCQbWCN
8bXDrUsLZ0/Syl7Ux+ti0qTOcjuhSqCdPB3YSbIlx5PWfe/L/5c9hCbWFPmT
7YXaDDa2U/1P5yqLLVPvFjpsPxe5Z4nZwOkyjWSho0QSW56ZrIYfi4t/TWpw
EX8qO9S+wdR+57jTGd94VTyvhqtKOTR83Py26XTKDrzczWxUK1LzUfls17O7
+qMYb+duKlf4i88NdZ1fsts2pKV/oFgjxcd38OpYOhx2wMX98Mzgp04+lp1p
lV76dm6Wk1NDA3QDQO8FVbqRWMKV4Nsdlza5ZEYGaoz4HXDNeubuO3boZNL6
V3h9yWp1iU6bJ5HMuxeZojM/YzSna1U6ZtYzUFniGFxi+qZu28LomZ81q6zu
iHyl0vignBPWA5VDrO+2j+63JsH/k5mkN0CedIfUKPW+1vPgZk+2odOJ6yWl
G7qWqQ+Nli5Lf4rXf0nlwvRiZ4nkzgGvVJ6nz6f2YsvEaDxPqSZSwgq83bva
fiZv4jlhTJNB8nM8v8Jzp4rJvnj//teG4x4T474b88s9xG/eYy1eRR9DXg0c
O7wz7YXP8A3RpnchoY4NFbNDHjpUmWUnKnm0LRWYHV//yv+xf5F3baWNOCRh
Y2hm94lslcxLq7gj1INTsgbda8YUT9TFuOHv49HyWszD89N+KErzwMvhtruh
GYHm6YMKu6euWmvmVl9isFmrTK3a/JyCOZ8nraAmxm4iPMo4tud7X/hvxPbL
TAM5wErmhEiKXa0+LSTa28q47Wh36fxkbYe6oeUlPVlVnng/vyIwa6If0luc
mvbakzx2raQnUYjnybxyI3Eunt+DDsWCiftWJ85FJfPxei3h7MeDUv54ueyK
ONGHjxtOX28s+yjmjBy9fGTvmpC7v92q0Eop9CZf5W2qCx5Y7lq+LWy3w8uF
mQltbkzrRabrYxJ9s/zmrcCqTqxbFfc5+Ey3R15pevvKO29Plflkprj6jA7X
7o+h4OWP3fpQnI/nR+lzzxzD+zH6PdRsoZX5u5DsM258E4+KoJkvlNcr2c6r
lrXhzRK0qi5GwqAcKpdi8wM+of1XBqGlwEtyEeTMHod14GbWKbkIQRarRmXU
6PPcAbW7rgy/XW5CY5+tjfFRYdxl8+ursxdEqdqX3NOqGkpysDn0YfCyzqaH
+DgevG2S674UlcQ1V2x2dEkZmhXbYi9nLNryTG+bhq2y3CyyLEneXtFYPZQ+
i6XHS2QyUHO0h0oi1SB8eAr+GRqAVKE36MT+CDvAC3idcBx2hie+d0tCtaSd
RTTh4zKH+ItoS7iLpqaoxwqDp7yIyQsIs2zcF3/kc5afK/sueL52i7dH0tvI
xpPpDIe1T2esCDPT136x+iU1nLaUbkjTBLYBW36SzP4rQxoFMAO90Vz6HCQO
MqKL5AWKW3mbNOZ5djpABlEZVxLdI54s12/k52snkb2OddTkT49VdYx61F97
ONPH7sGYZcuejEd4eQu+3Z/hY0n+bHppSWayk+KH1NTjzkpGwzt5i0DduOkD
Ft3Kkap31B7ocNja/MtCN1kS7EjNY2gCKuBKeCeenxJ4EmrC83tKrodSsGxS
DixERWg9qMF4wBjGGrB0BbJsKOetQpSu7szdSpIFdzd7iOtt9E+9ugxu9XLu
f1PZ4rQ1BR9nTrups+WYy90Rt9RMp36dGbu3KR6UvsiKVUTJaiTqT5jfdQqJ
1EGOgFowETIJXkkbFyjINXI/TWKu/sObbYrsSMv8GFvjbH2poxDaCHqktZ/I
RWI/OAL3WHVoVotd9ucVrfopCfj4If12VrqPeZdE1BSRFeV8cWRJQegK44Uv
yxzsBg1zdKe6z9csVvdXH9U7w18rUyVzUSkG8mWALC0qE8hAuXg5DCYfhf5j
9ZAmdB/bQr4FkVF1TA3xYYYzI6jzaY4qlorzBQLNVKP9emfUVy87XCCOcV+W
dAG68qSw2dn2Pa+1P68Nb6fhmwfzAfw4uMF1+btZ0nuKJgl5sXQr+XdfVr2R
SMOwGDxG/nt8J/i30IIZkQyBvZAj8ho0AHWxGJ6bdC/LVjbNx9A9w/Rprleq
a/Ryp32N5VtNE1qdL7SStkhi/nRQu5tfn5bRu0wiWXY1KIWO5/epQyF96SKr
8ccXdDLtnbVH7hZU+0Cmw5W/29+e91SnyMNe3UhlWDlUe4cgWHhV2lThLWzD
XM+ay4TJTagHtY+UTToAvfiSXxSYhzWQbKBK5Aimi2KsQOYi6l66UGVQQV2g
qu5hxjcs0wpxq81fFeX6y/yLcy/35Rs6LRsavyzOnphvY9tBytntIJHk+ZWb
5E5mRVsJxqhySBvDDc+uH5hYOVxM6v0Jy6EZhsJmoCuqyShFVyPWdCeOHsOR
qseVCA5xztMzpS/I+wg+sPpFDXp7ZmqqqJgPpXqLLW30jgbUq+2KXxHTf7ip
oGhxEPdt9kGp+C638Fa1GXQlpgJXVYiWQxF4GbfCr1kv7E7+RB6HBikF/4t1
5SzyFMSOvJXkC2igAcgORjdVTF1BGdS2nHxNMVzH1SvAPmJxat7JEE1/0GP7
kWPmIab7Fqxca0J3Y37m0iepAZcAN3DXDzm/5WsMYoVwHqxDnYyOwnOQx1SA
84bBo+pwKYqhfDorQtQ7OV0xQ6ijcc/isAk0nb3S6Oitggo3gwePrvaV3A7Y
N1547ep+p6A5Y+drNBNj3S7cP6a1XZQgfVPWCt0POeFpnQYiSRil68usom5M
CpQhlUCdaNtXzG82At+DitBcEkSeAp8kD4FmeDkFKdr8FVJtzHqpOounJnmz
rd2XxQ+teetldDY8d2ey0Zqkbv6G9eva/bjNj5RCFfuUrEx3I9vJblDRDzef
+mulwcNgGHKauhVQhy/B6nR99j76O0yVk6siEiKcN/LKmksUUwSpmm8tchdG
T+/yHTh/Y3e+V8zr4YvxezcFSCShrTuKUgMlknUn8xNyneMeH5n2SWZQukT+
DXoAtqfVkkeBQ+TZNN0vNaQSdTcwMSslm1b9L2b4/bM8kgVIIh0gG5B7oELA
ABmAl6P1qIJsicw2TqyM2LvdgbtQJjFtc2GUtFdvi/aO2mR+UPq93M2+MUV+
qnf2TxtT/aRcYX0J/xvzgaSftvwJQAQUIeGUKuA1mAiX0zIYnVRZKpNrprxI
aMZRVexVfinK5P4yaaFB/tzFatq2wa0Ke/s8vYeeNx3dk+4nkcxolt2nv0oi
KTl+OLbSYbRnYHqryFwYpHQDkYCXqRXkg0AnqYAqDVmSgkiV1K3gxB4yM+nt
X7E+pIzUib8aIV8kr4SbgS7EE6lGbsHOIheZEPZk6af+Uc7VphvTNxXcj270
ELZl7+vYqOUn6GnfXB/Z62PRdU6tTzZexsbwCP6JqQd/xpbv68zApKFxuAid
wxBSrbEt2MZpmppbFC1nerqE/6K88ELsdr9rzjrWb3MHLQsN1HQrHfWl6hnP
uRDdE7/2h/4Nd4fPY5/gWZQiJIUSh+7BBlF71iv67zRpRiKfxylgLeKm8F+x
5jBfs+6iN2E9WAV2AeiADTnl/01+26F+SAbUQWwwY8QObkBYaDfZBcTIfTxn
joA+zPzgHu34x4JfY0RpvGix14baO5vIsca+p8+FrSN5ZNt25NtxDtF8WWza
Ozy7Y/+G3no2UE2yRNNJ8nAbMkaFKDlsKvMY05uWJjvG9eTOkrqsUCnYJGjj
edC8aX60p3g57//2J/E3lotloXzUlBqErAT58D3gBroYSMY/vYCsnIyYkyEU
RTuH9tud2mWWHbi+yetGw+1tr+Ouexpe3J/CCUQdncs1GM1YOdMYO4uYflkX
862dAChAKtYLWUG22AZGIDOMLkPfzkqmiWTSOKVSHB6s5CdjLxLKZDNjaI+Y
43i/5cm3P4m/MSEyCoWhOpRXoAtghrwGLEA3gIHnIOCbC0zYSbx7sQOrtZYt
3ROc0x3T736+jrwrLH6dx7omVmbOajUX/8pCehI2yOrFbCmaQCL87cfLNeBN
QJPSh5rDDhRp1jPuE1ohXZajzZwj6pSCpLPlpquelw+U/6gaTc1AjegWP83z
hr/qAxqOtkHz4G2cSrY57RAzQvo+T4NdKEgSHuM6cfYKmLwFjK0sHseLqg5P
p+j9tP31H5U30ojXrPtBK/5RaTpXRegolycqltmsskTxrVSvVIagUbaLt0PQ
IXUEmgbIUu5/79Ml/BMF6BwWSRnEWpk6PB++sryl/E7+LMFaNfakEF61lJ1A
X75HOl10kacMvSOTfvjd+34+IYA1PAPdjG1AUxlh3HWiUpmXbEOpUoWNk0z4
f0q/lbMXzudZi/ZzdoFW5IL/w9pTDjoKDYAk9AK4DcpC0lAncBfwEl4HXofH
wRHI/CvuExAIP44lLAtWL3U6ZwPrD5YbAxCkUoMoDhj5q79PkPB9OKJHEX8o
DhFyV7Et6C+l13OvspTYD+UzqR3IdUoI0eL9zaWiurAmfAGZyw5gdtFmCRdz
9JlitrZ8NzUUfUjbTgPB2fB0hEy0NwQCgfA/UGROYlzG2JxuxgAjmmrA66Ik
YKNIAP17nxfh6+ixbtBOYxWcU5whxiKag4yYEg8zEf8fct8pAoFAIBAIBAKB
QCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQ
CAQCgUAg/Lz+AWAGbLc=
     "], {{0, 168.}, {224., 0}}, {0, 65535},
     ColorFunction->RGBColor,
     ImageResolution->{72, 72}],
    BoxForm`ImageTag[
    "Bit16", ColorSpace -> "RGB", Interleaving -> True, 
     MetaInformation -> <|
      "Exif" -> <|
        "ImageWidth" -> 224, "ImageLength" -> 168, "XResolution" -> 72, 
         "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
         "Created with the Wolfram Language for Students - Personal Use Only \
: www.wolfram.com", "DateTime" -> 
         DateObject[{2021, 1, 1, 12, 33, 45.}, "Instant", "Gregorian", -5.], 
         "TimeZoneOffset" -> -5|>, 
       "Comments" -> <|
        "Software" -> 
         "Created with the Wolfram Language for Students - Personal Use Only \
: www.wolfram.com", "Creation Time" -> 
         DateObject[{2021, 1, 1, 12, 33, 45.}, "Instant", 
           "Gregorian", -5.]|>|>],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{600.5, Automatic},
   ImageSizeRaw->{224., 168.},
   PlotRange->{{0, 224.}, {0, 168.}}]], "Input",ExpressionUUID->
  "b196b845-6179-4e47-a4db-5b32832a3b93"]
}], "Text",
 CellChangeTimes->{{3.818511319483891*^9, 3.8185113354527884`*^9}, {
  3.818757236409433*^9, 3.8187572394564123`*^9}, {3.819785356074299*^9, 
  3.819785377122509*^9}, {3.851860734150322*^9, 3.851860734468246*^9}, {
  3.851864113078863*^9, 
  3.8518641138066177`*^9}},ExpressionUUID->"be87c24d-e61a-4fde-8a92-\
bfc61156c54f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Target Images", "Section",
 CellChangeTimes->{{3.818511409735784*^9, 
  3.818511411335927*^9}},ExpressionUUID->"a4014d4e-489b-4225-82b1-\
e9bb96e6bf22"],

Cell["\<\
Like we said - we\[CloseCurlyQuote]ll use the Generation I pokemon as our \
target images. We set some parameters, and query the Knowledgebase for \
standardized images:\
\>", "Text",
 CellChangeTimes->{{3.818511423072381*^9, 3.8185115010118523`*^9}, {
  3.818757250725135*^9, 
  3.818757250965188*^9}},ExpressionUUID->"c0c662e2-dfa7-4609-b607-\
9d62ca8fb63e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"numChannels", "=", "16"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"prepaddedWidth", "=", 
   RowBox[{"prepaddedHeight", "=", "40"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"padding", "=", "8"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"width", "=", 
   RowBox[{"height", "=", 
    RowBox[{"prepaddedWidth", "+", 
     RowBox[{"2", " ", "padding"}]}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8183543049459887`*^9, 3.818354318112637*^9}, {
  3.818386877252139*^9, 3.818386934109167*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"937d354b-38ae-4bca-9e60-2deb70ae1199"],

Cell[BoxData[
 RowBox[{
  RowBox[{"standardize", "[", "img_Image", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"width", ",", "height"}], "}"}], ",", 
    RowBox[{"ImagePad", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ImageResize", "[", 
       RowBox[{
        RowBox[{"ImagePad", "[", 
         RowBox[{"img", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"width", ",", "height"}], "}"}], "=", 
            RowBox[{"ImageDimensions", "[", "img", "]"}]}], ";", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Round", "[", 
                RowBox[{
                 FractionBox["1", "2"], " ", 
                 RowBox[{"Ramp", "[", 
                  RowBox[{"height", "-", "width"}], "]"}]}], "]"}], ",", 
               "2"}], "]"}], ",", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Round", "[", 
                RowBox[{
                 FractionBox["1", "2"], " ", 
                 RowBox[{"Ramp", "[", 
                  RowBox[{"width", "-", "height"}], "]"}]}], "]"}], ",", 
               "2"}], "]"}]}], "}"}]}], ",", "\"\<Fixed\>\""}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"prepaddedWidth", ",", "prepaddedHeight"}], "}"}]}], "]"}], 
      ",", "padding"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8183147566050787`*^9, 3.8183147869818583`*^9}, {
   3.81831491099899*^9, 3.818314946087246*^9}, {3.81835426678578*^9, 
   3.818354269593165*^9}, {3.818355948626113*^9, 3.818355949625718*^9}, 
   3.8183868869889*^9, {3.818386940669322*^9, 3.818386947526947*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"f22bd225-daa9-49fa-8eb2-4e18e2fa912e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"generationOnePokemonClass", "=", 
   RowBox[{"FilteredEntityClass", "[", 
    RowBox[{"\"\<Pokemon\>\"", ",", 
     RowBox[{"EntityFunction", "[", 
      RowBox[{"p", ",", 
       RowBox[{
        RowBox[{"p", "[", "\"\<Generation\>\"", "]"}], "==", 
        TemplateBox[{"\"Generation I\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"PokemonGeneration\"", ",", "\"GenerationI\""}], "]"}], 
          "\"Entity[\\\"PokemonGeneration\\\", \\\"GenerationI\\\"]\"", 
          "\"Pok\[EAcute]mon generation\""},
         "Entity"]}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"EntityValue", "[", 
  RowBox[{
   RowBox[{"generationOnePokemonClass", "=", 
    RowBox[{"ComplementedEntityClass", "[", 
     RowBox[{"generationOnePokemonClass", ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Partner Eevee\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Pokemon\"", ",", "\"Pokedex0133:PartnerEevee\""}], 
            "]"}], "\"Entity[\\\"Pokemon\\\", \
\\\"Pokedex0133:PartnerEevee\\\"]\"", "\"Pok\[EAcute]mon\""},
         "Entity"], ",", 
        TemplateBox[{"\"Partner Pikachu\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Pokemon\"", ",", "\"Pokedex0025:PartnerPikachu\""}], 
            "]"}], "\"Entity[\\\"Pokemon\\\", \
\\\"Pokedex0025:PartnerPikachu\\\"]\"", "\"Pok\[EAcute]mon\""},
         "Entity"]}], "}"}]}], "]"}]}], ",", "\"\<EntityCount\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"generationOnePokemonNames", "=", 
   RowBox[{"EntityList", "[", "generationOnePokemonClass", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"generationOnePokemonImgs", "=", 
   RowBox[{"standardize", "/@", 
    RowBox[{"EntityValue", "[", 
     RowBox[{"generationOnePokemonClass", ",", 
      RowBox[{"EntityProperty", "[", 
       RowBox[{"\"\<Pokemon\>\"", ",", "\"\<Image\>\""}], "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ImageCollage", "[", 
  RowBox[{"generationOnePokemonImgs", ",", 
   RowBox[{"Background", "\[Rule]", "None"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.818314635022943*^9, 3.818314666708405*^9}, {
  3.818314706223843*^9, 3.818314744875051*^9}, {3.818315010984728*^9, 
  3.818315034632063*^9}, {3.818315078409916*^9, 3.8183151080380507`*^9}, {
  3.8183153426380167`*^9, 3.818315382325733*^9}, {3.818386956502266*^9, 
  3.818386956701021*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"e6fd4f58-1fd2-434d-93b1-36f675103a46"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Cell State", "Section",
 CellChangeTimes->{{3.818315533981371*^9, 
  3.818315543149563*^9}},ExpressionUUID->"92284798-39ce-4e4d-8f72-\
326f391b94b9"],

Cell[CellGroupData[{

Cell["We\[CloseCurlyQuote]ll represent each cell (or pixel) by 16 channels", \
"Item",
 CellChangeTimes->{{3.8185117047474213`*^9, 3.8185117323761168`*^9}, {
  3.8185119035684547`*^9, 
  3.818511912182797*^9}},ExpressionUUID->"fedd8ed3-9942-4ea1-84b3-\
88b9232bdd8e"],

Cell["The first four are \[OpenCurlyQuote]visible\[CloseCurlyQuote] and \
represent the RGBa values", "Subitem",
 CellChangeTimes->{{3.8185117047474213`*^9, 3.818511766352598*^9}, {
  3.819785432378789*^9, 
  3.81978543269077*^9}},ExpressionUUID->"ff160c33-be6c-4e95-b5c9-\
59647d33f4cb"],

Cell["\<\
Layers 5-16 are \[OpenCurlyQuote]hidden\[CloseCurlyQuote] layers and allow \
the neural net to learn our self-assembly or growth pattern\
\>", "Subitem",
 CellChangeTimes->{{3.8185117047474213`*^9, 
  3.818511803483989*^9}},ExpressionUUID->"14de067e-7630-4dd1-b205-\
980f225e3398"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Opacity (\[Alpha]) channel further encodes our cell\
\[CloseCurlyQuote]s state", "Item",
 CellChangeTimes->{{3.8185117047474213`*^9, 3.8185117323761168`*^9}, {
  3.818511825310214*^9, 
  3.818511860443687*^9}},ExpressionUUID->"7bccf2d0-d66c-4991-9603-\
bdb524aebe16"],

Cell["If \[Alpha] > 0.1, the cell is considered \[OpenCurlyQuote]mature\
\[CloseCurlyQuote]", "Subitem",
 CellChangeTimes->{{3.8185117047474213`*^9, 3.8185117323761168`*^9}, {
  3.818511825310214*^9, 3.818511865919038*^9}, {3.818511918032877*^9, 
  3.818511927070259*^9}},ExpressionUUID->"bb02116f-bee2-41d6-a0d8-\
9704bb12938f"],

Cell["\<\
If \[Alpha] < 0.1, but at-least one of the cell\[CloseCurlyQuote]s 3x3 \
neighbors is \[OpenCurlyQuote]mature\[CloseCurlyQuote], the cell is \
considered \[OpenCurlyQuote]growing\[CloseCurlyQuote]\
\>", "Subitem",
 CellChangeTimes->{{3.8185117047474213`*^9, 3.8185117323761168`*^9}, {
  3.818511825310214*^9, 3.818511865919038*^9}, {3.818511918032877*^9, 
  3.818511989175035*^9}},ExpressionUUID->"2e48e69c-b34f-4638-832b-\
3ccf0fe3b9e5"],

Cell["\<\
If none of the cell\[CloseCurlyQuote]s 3x3 neighbors are \
\[OpenCurlyQuote]mature\[CloseCurlyQuote], the cell is considered \
\[OpenCurlyQuote]dead\[CloseCurlyQuote]\
\>", "Subitem",
 CellChangeTimes->{{3.8185117047474213`*^9, 3.8185117323761168`*^9}, {
  3.818511825310214*^9, 3.818511865919038*^9}, {3.818511918032877*^9, 
  3.818512011011056*^9}},ExpressionUUID->"1889e217-fceb-4838-8ae9-\
2c759a868a23"]
}, Open  ]],

Cell["\<\
Note the pokemon images we have use the same scheme (i.e. use a transparent \
background or \[Alpha] channel for \[OpenCurlyQuote]whitespace\
\[CloseCurlyQuote]). 
For visualization purposes we can code this using our Moore neighborhood \
function:\
\>", "Text",
 CellChangeTimes->{{3.818512026068778*^9, 3.818512091901619*^9}, {
  3.818512147334486*^9, 3.818512152956897*^9}, {3.818512215520838*^9, 
  3.818512271393649*^9}, {3.8187572747244463`*^9, 3.8187572751641073`*^9}, {
  3.8197854691392593`*^9, 
  3.8197854872028923`*^9}},ExpressionUUID->"41981c75-94e7-4cb7-a4b9-\
e80750700b38"],

Cell[BoxData[
 RowBox[{"  ", 
  RowBox[{
   RowBox[{
    RowBox[{"Moore", "[", 
     RowBox[{"func__", ",", " ", "lat_"}], "]"}], " ", ":=", "   ", "\n", 
    "   ", 
    RowBox[{"MapThread", "[", 
     RowBox[{"func", ",", " ", "\n", "    ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"RotateRight", "[", 
          RowBox[{"lat", ",", " ", "#"}], "]"}], "&"}], ",", " ", "\n", 
        "     ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "0"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "0"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", 
            RowBox[{"-", "1"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "0"}], "}"}], ",", " ", "\n", 
          "      ", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", "  ", 
            RowBox[{"-", "1"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", 
            RowBox[{"-", "1"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", "\n", 
          "      ", 
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "1"}], "}"}]}], "}"}]}], "]"}], ",", " ", 
      "2"}], "]"}]}], ";"}]}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"781cb364-bb34-4155-8583-d29392ea623c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cellStateVisualization", "[", 
   RowBox[{
   "self_", ",", "east_", ",", "south_", ",", "west_", ",", "north_", ",", 
    "southEast_", ",", "southWest_", ",", "northWest_", ",", "northEast_"}], 
   "]"}], ":=", 
  RowBox[{"Which", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"self", ">", "0.1"}], ",", "2", ",", "\[IndentingNewLine]", 
    RowBox[{"Or", "@@", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "east", ",", "south", ",", "west", ",", "north", ",", "southEast", 
         ",", "southWest", ",", "northWest", ",", "northEast"}], "}"}], ">", 
       "0.1"}], "]"}]}], ",", "1", ",", "\[IndentingNewLine]", "True", ",", 
    "0"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.819785496716164*^9, 3.8197855091238823`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"e6fc06ae-e2bb-4c74-9158-207f33010750"],

Cell[BoxData[
 RowBox[{"ImageCollage", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"ArrayPlot", "[", 
      RowBox[{
       RowBox[{"Moore", "[", 
        RowBox[{"cellStateVisualization", ",", 
         RowBox[{"Map", "[", 
          RowBox[{"Last", ",", 
           RowBox[{"ImageData", "[", "#", "]"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], ",", 
       RowBox[{"Frame", "\[Rule]", "False"}]}], "]"}], "&"}], "/@", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"generationOnePokemonImgs", ",", "12"}], "]"}]}], ",", 
   RowBox[{"Background", "\[Rule]", "None"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "600"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8185121746075974`*^9, 3.8185121897520247`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"da9a5f67-ce60-4fbc-94ab-86d2bab9d01a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Neural Network (Single Update Step)", "Section",
 CellChangeTimes->{{3.818511409735784*^9, 3.818511411335927*^9}, {
  3.818511533012868*^9, 3.8185115406932783`*^9}, {3.818513792697876*^9, 
  3.818513793281996*^9}},ExpressionUUID->"0b13ca31-fcd1-4e40-872c-\
01cc73b40fca"],

Cell[TextData[{
 "We follow the prescription from the blog above quite closely.\nA single \
update step for our cellular automaton can be summarized graphically by:\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsvXd0I9eZ6Kl9+887Z/fs2T92z+47O+/s+u34zdjjOGONZ2fGYfyc33jG
Y41t2WNZli21giV1q7slNRVbVEeRnUV2ZLO7mXMAcyZBMGcSJEASJAESRM6V
qwDsB1yxBgJIdjOAYPh+fQ+7UHUr4Baq6le3vrr3M78//LND/+Gxxx479h/h
z8+eefMfjh59JumJ/xU+/PzVYy8+/+pzz/7o1ePPPf/c0b/5/f8II1/+Hx57
7BoMhIaDCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCILsFyor
K1PC5OfnFxQU0DQdj7XY7XYyoFKpDAZDPFaBIAiCIAiC7G9AXOVhUMrIj3Fa
C4IgCIIgCIJsgiilTElJgb8ajSYzMzM/P1+hUJCPTU1NaWlpKpWKpunMFUj1
7KqZYbEwEvLDGJh04sQJsmQYDxmC4apXWCBMkjcAMpC5YHycKn4RBEEQBEGQ
vUukuA4PD8NHoqZkDCiowWAA1QTDJGNkXyXZ1s8MAyRIQF4LEVcYKc8FH4nf
Hj58mCwZNoOMQRAEQRAEQRCZyhVAMsE8g2GTTE9PV4QBvSSqSapJgytVsjIw
PjU1NSqzrKmylEaJq1zvSkhLS4tccuQSEARBEARBEIQQq4jgjcPDw1Fj1hHX
2MwPFVcw5EhxJctEcUUQBEEQBEHWIVYRI5/+02EixTVyUlRcgZw5UlNJGwJy
8IAcKhApt6SmF8UVQRAEQRAEWYdVFVGlUoGOkqf/UeIKIipPIlIamzk5ORkW
W1BQEBnsCh+Jr8ovZ5GRkS9nkQEUVwRBEARBEGQHQO1EEARBEARB9gQorgiC
IAiCIMiegKZpuZ8sBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEH2FlE9WJGWrBK1
MQiCIAiCIAiyFqRPq7U+rgO+n4UgCIIgCILsJCqVSu4Yy263k74GaJpuampS
KBRy464wifT6ag8DA6mpqaS2FjLDx4KCAjkz6Wwrqi4XQRAEQRAEQbZCZMdY
IKukxwG56wEyQPKQbrPkKlm5xhXGkOgCuesBGBPVSyyCIAiCIAiCbB0ipcGV
OIHI3lrJMAhtZG2qrKnkY2TNKlkCRhEgCIIgCIIg8YDIp8FgAEElH1NSUipX
IN0NyOIqQ+x0eHg4chLpARbFFUEQBEEQBIkTaWlp4JykKlWOdJWJjIONqnGV
dTcYEXWA4oogCIIgCILECVBNUllKgGHQUa1WGxn1qg0jO216ero8CbSWTCJj
UFwRBEEQBEGQOBHbiysoqEqlkkdCBtJQAImGJRkiq2EjM2NLsAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IGtB07RWq5XbdIrFHmb9hciN8CMIgiAIgiBIPCgoKMjPz1epVJmZmfB31Tya
MOsvZ9UuUBEEQRAEQRBkW7Db7ZGdQ0X2ahpZB0vEddUG+eUxB01cx/r6mgoL
W0tKSKrNy1taWEj0RiEIgiAIguxn0tLSooIEwEVhpEqlIjWxwbC4kg5PI3tB
JWPgL+nM9KCJa3NOjvfCJf/Vj0kynDs/2NGR6I1CEARBEATZzxgMBpDPgoIC
GCBjMjMzZZWFYfBY0nspGQOZSc+nct+mMAbyHzRxbcvLEy9fDaZdJ8mWcmFY
qUz0RiEIgiAIgux/wE7l2tTI4AGwU80KZAwZJpkrw4DcgsqiuKK4IgiCIAiC
xI+opgBIbWqkuDY1NUWJq0qlIuIaFe+K4oriiiAIgiAIEj9APiNfyCLDsoLS
NE3GkBhXkofExEbOSDIfNHGtunu39/2TYx+eIqnl7Xd6W1oSvVEIgiAIgiD7
GSKl5NG/HOZKYgDkMSSoFUwVxsh2Ojw8TGYkwa6QQZ79IJBVkpHeknKz8yJJ
l6rOtHU2JnqjEARBEARBkEcFJJZY7r7vjKC4Jf8BlZ4XvE3SraXLqqHORG8U
giAIgiAIsgFUYRK9FXEHxRVBEARBEGSvU1lZ2dTUlOitiDsorgiCIAiCIHsa
EiTwKF3E7nVQXBEEQRAEQZA9wc2s3HdTb713KYOkpHNpLe3tid4oBEEQBEEQ
BIkmq7DhbLY5tdBH0od3tB2dA4neKARBEARBEASJJrekOaXAc7lMIunsPb1S
NZTojUIQBEEQBEGQaFBcEQRBEARBkD0BiiuCIAiCIAiyJ7jzoPyti63vXe0i
6Y1zipbWnkRvFIIgCIIgyN5jbGxMp9PNbxCNRjM+Pr7RuYDh4eHNrW52djbR
RbVJiouLCwoKSlfIzMw8CN0uIAiCIAiCbDv5+fnt7e1dG6Surg4cbKNzAbm5
uW1tbZtYHZDootokLS0tFEVdXmFpaWloCEMFEARBEARBNkxFRYXP59voXPPz
8+CTm1hdZWWl1+vdsdXtBkBcp6enQVlh+Pjx4yiuCIIgCIIgmwPFNd4QcU1O
TvZ4PCiuCIIgCIIgmwbFNd6QUIH6+vq7d+92d3ejuCIIgiAIgmwOFNd4k5OT
c/HixasrnDt3rrOzM9EbhSAIgiDInsdgMGjD0DS9uSWoVCpYyKOvbnNr2UZQ
XONNQ0OD0Wh0rTA5OTkwgF2+IgiCIAiyVfLz8zUaDcgnDGyozSI5M4gZLGGj
cyWQ9cUVBH5VY1zHJIeHhwsKCtYqhIeKK8h8bLHsaXEloQLyRwwVQBAEQRBk
WwCtihyW7ctut0dWw9rDyGPAtTIzM8lHMhepuZUzkwE6DBkmda1yjStZmpwz
uFL3u+mK30dnHXGFbUhOTj506FDspLVMEmY5ceIEuOvhw4dXXeaq4gq3CaQo
YCqsMSUl5RFXtydAcUUQBEEQJB5EiitIIwhVMFwvSnQ0LS2NuCWYFYwkYyAb
EVf4SMQVpg6HgZGQmfwNhvWsqakpGNZUsmRiaJCTLJ8shGwG5CRLiLe7PjRU
YEPiCttPvhTMtWogRKy4gp+DrML3JWUrL+FRVrcnQHFFEARBECQeRIprcEUs
wU7JR+KlwbCCkjFgWcRF5RlhAIQzcnZQXDIG5iISK48hGWAWYqfwFxYoa20w
7LTxDieIFVcQTtgweRviLa6Q//Dhw+Cu5JvuP3EtKytra2vrXqG6urqnB7t8
RRAEQRBkq0SJK3gmaCR4VOUKROeiIgqCnxZXOcCACBipuSWhm8RRZSeMzAAQ
myUVufLqdl5co9hoqEBSUhL83VCoAJSDXGj7T1xLSkqKiorKV4Af1d79LgiC
IAiC7B4ijVSu7ZQ9MzYbaO1DxTW4EiRAggrIm19RGQhNYWD2KH+OKw8V11iN
DK5rknKwxFpTY8UViiUy+je2wPe0uGKoAIIgCIIg8UA2xsh6v8zMTPLUGzSV
DCQnJxPRkjVVfty/qriCjsqRriQ+NjKDHMgKCyeBByR0loyJfGMrHmBzWPEG
xRVBEARBkHhAnuYDkQ/oSWir/GpVMFyDSipO5XpF8n4WSCYJUpWzyVPlBcpv
IckZYPkwL1mvHOwKY0gFbLy/MoprvEFxRRAEQRAkgezko/x4g+Iab1BcEQRB
EARJILuh44DtAsU13mCXrwiCIAiCINsCimu8wS5fEQRBEARBtoXc3Fwwq5YN
olAoioqKNjoXkJ2dXV9fv4nV1dTUJLqoNkkLhgogCIIgCIJsByUlJXNzc6YN
Mjw83NTUtNG5AFidTqfbxOra2toSXVSbJH7i2mv0Nc2762Zdq6ZWvWfE8kkj
YzZamLQx4xZ61TRhZebc3LZsEoIgCIIgiQUMLS1Menr6VjpgJV24ApHtuAJk
jNyI1g6DoQLxJk7imjVuK5p0FE05CidXT6UaV77a0b7gWfYJmaPWfLU9c8Sy
aro3askYttTPbXi/IAiCIAiyqyBVi2TYbrfL3b9uFNLClbxM8npXZNv+MDUh
7oriGm+ghMFdVSsoFIqtf5cWvbdkytFr9D003Rmxpg2YHiVn/oS9TY/uiiAI
giB7mChTJcJJWnYl1afENklLrWQMEd3IJlghM2nilXyEATI1UlxhmZu24q2A
4hpviouLS0pKFCtkZWV1d3dvcZkFk47aWfej6Gj6gClnzPYoORt07ryJ+PZ2
gSAIgiBIXJGrSSOJ7B6L9HsFH+UAADILeCzpnkDuFjZymSTkIKo31VXXFW9Q
XONNPEIF7o3aqqadj6KjV/tMd0esj5Kzcc6TNmDa4oYhCIIgCJJAZB2NJNIw
wU41K5AxRFNBTcm8pLpVzk+eF5NhFNd4r27bsVgsPM9vaBYUVwRBEARBdoZV
QwUibXYtcSXZIkNbg5+OmA3GiOtuCxUA305KSjpx4kRBQUHUpHVMMjnMqsIf
fJi4QvGeCBMV7rt7xHUgDOnYV5KkR5kFxRVBEARBkJ0BVEpWTbkSFf7Klahy
qECsuJL4Abl+1WAwROlcpLiCHJLQgh1mHXEl3x2+6aFDh6ImrWWS8JXJl4JZ
Vm2BYVVxhVlI6YG6k8iKqOCKXSWu/f39g4ODxGBhw1wu1/qzoLgiCIIgCLJj
gG2CnSoUCvhLfJW8SEXGEC9dVVyD4epH2d+SkpIUEQTDwgYDoKywnIRYa3A1
cYXvCFsl+3Z+mKi5HkVcV20kIVZcU1NTDx8+DAUlv/gGBbXRGtfR0dGBnUV2
V2BsbGydauTc3NwLFy5cXuHs2bPt7e3rfJdHAcUVQRAEQZADyKriCnpJNBL+
Rrq3zKOIa2Rkr0ysuMIssApStQsrkg32UVYnQ1GUd0cgytrf30+UdWJi4qFR
r42NjWaz2bfC9PT0wJa7fEVxRRAEQRDkALJOqMDw8DD4Z0FBgUKhiLLQtUwS
spGYWPDPVZe5aqhAfn6+wWAIhkMFYMbI+t71V7fzEF8dHR2FDWYY5lFmwVAB
BEEQBEGQbWH9l7Pk986iKl3XMUky11pdjK3/chbYIFkd8dhHWd0O8yhBrVGg
uCIIgiAIgmwL2BxWvEFxRRAEQRAE2RZQXONNPLp8RXFFEARBEOQAguIab+LR
5SuKK4IgCIIgBxAU13iDoQIIgiAIgiDbQllZmdVqpTeIRqPp6OjY6FxAeXm5
xWLZxOqUSmWii2qToLgiCIIgSPxYtfnNbSHqVXFkN5CdnV1SUlK2QQoKCnJy
cjY6F3D//v3i4uJNrC6qL609BIorskuI37kdQQ4UCoWC9Ewkt+VI6lg2uhzy
4oP80RBmOzd07zA8PJyenh7Z9xAd7qtU7vgpEij/tDCk69Lgpzt+2l4iezhF
dgkYKhBvUFyReBB1On2U8/ZaeeDMj067vYB+EKuRe1cMbrbqJikpKdKIYvtn
kYGd2NTUFNvRIbK9wH6UDyXYNbCLg5/uPfPRgeUkJyfLR9/mFrIPgG8N4gql
Efn1ZSmNgnRGT4bJgRZEcT1goLjGm9zc3NTU1EsrnDlzpqOjY4vLRHFFtlFc
4WKxd59o7E4ir7lQtkRZN3cFPHHiRKSLRu4p2HGRdxyQjfR7uMmNRh4NKHZZ
nIIrzY9nhiHeBWZFPsodUFaGSUtLi+rbHUbCGBgvL/lgiishUlyh0EiL7rHu
KheXnJPMCwNwCMBUshByTxFZZ0vqt0keckiSMZBBnossitTlRh62cvWvPB5J
ICiu8aaxsTEyinhmZga7fEW2zqriCqdWUucmn13lszeMJ3nIGVg+e8MpHTLA
0sj5H87e5KStUCgS8bX2CVCG8gWXVGhD4YOCyrsgcwWSDXYHTCJ7KupKDbsm
8oIe6aVRNVSxGZA4QQ6xSAuVnTOyPla+lZBzRkkX2YMwlZgwiqv89ck5CsbA
36inDFFlGDsvyQBFSg4lcsZbNQ+Mke9B5Jpb+cxJ5iJn2uEw8rq28VsjmwDF
Nd5gqAASD1YVVxgpn6vJeViubYAx5FwNVwE5Dxkj17jKcwUjTuDIJoCig30B
18TIGlF5l8m+KleQyn1kw76IukyTuWQTRnHdJcDuIJV1ZBfIzkluQEjjhyRo
M+q+I3KXyR/JcYriKn99+VQWDEtsZLa1xDV2GA5DMAfYEeQgis0TOwZyym1X
JiUlBVcOQNg7sF5Y2iYimZFtB8U13qC4IvFgLXGVx5DT+6pPmeEkHHk+l8UV
BuBSS07acCWNfB6KbAK4bpKqOfJR3jtwQZQvjmRk7I6TIZPIooIrO5E8fYZJ
sPBYF4rrl0KiAsLlg0gW1yj5fBRxJXeRKK5RNaLy+Mgylw8oAqkIXVVK5TvH
RxfX2BDxyGOTxISsE2eO7AwPFddV39pYxyQhP/yQ1roreRRxja3nQXGNAsUV
iTydwuEWK65kOFZcyasNkefzSHGNisFDNkHUy25QpORKF1njGjXLQ8U1uHJZ
xxrXhAOHT2Sxy48t5KrXyFe3giuBrGRM1K6P3IOQJzU1FcWVDJMYVzIcdURE
lr/82ChWQeWihoPx0cU18kkT2X1kXtge+aCOPX6RHWYdcYXdlJycfOjQodhJ
a5kkzEJeJSB17LGsKq7yTwIGDh8+HPsKw54W1/LycjjQOleAEsAuX5GtE/n6
j9yozvqhAmSMfHzBmChxJfGu8tSd/Dr7jMhLrSyuctlGRsCSvRMZKhBV0R3l
tFF3IiiuCQEKuaCggDyYILuAPEqWK13JVLIr5eCB9PT0qMq6qD0Y+YrQASSq
NOCnDsW4ag0neZBByn/VEJrgyitypC3NteQ2dgwxYVgyedsr+OlQAdIMGta4
Jpx1xJW8TLQhcYVfHdnLMNeqVbWriivMIh/78hIeZXV7gpKSktLS0qoVcnJy
sMtXZOuQdmDgRApnZllmyIs85AF05MtZ5HxLsoFHyWNkv5JfziJnezIV3XXT
yIUc2QY12TXB8L6TL4JkN5H7fbLjYl/OkodJ6Kz8EU6YsfsIxXW3ser9BYIg
68DzvMvlWl5eXvVVi1hxhWypqanypXDT4rrqoRorrodWkB9W7jNxxVABZMfA
Jgf3KLjj9jEorgjyUGRT1Wq14EgDYYaHh2F8bOaHxrhuVFzJM69V5wo+rMY1
iOL6aKC4IquC/rNHwR23j1m1YhxBEBlJksBRwVQHBwfhb38YGFjrlajtFddg
+Ax8+PDhtR5XrR/jGkRxfTRQXJFVwQas9ii44xAEOciABA6sQPR1nf4csTms
eIPiiiAIgiAIsip+v39xcVG2VgCsb538KK7xBrt8RRAEQRAEicXlco2NjYGy
6vV64q4TExPrz4LiGm+wy1cEQRAEQZBIOI7TarVgRPCXZVkYYzQah4eHJUla
f0YU13iDoQIIgiAIgiCEQCAAjjo4ODgyMuJwOOTxoKwMwzx0dhTXeHPQxHXO
xbUvuGtn10wdC243J259RQiCIAiC7C1AAsfHx0lswEMrV1elsLAQPGpigyiV
yurq6o3OBRQUFIBjb2J1jY2N2156O8OBEtdln3h72FKqcRZNOdZOzrR+s4ff
zM8VQRAEQZC9CM/zOp0OlHVqamorbcR1dHQMDw+PbpDe3l6QyY3OBYDFgbZt
YnVbl71EUVpaCtbdsUJFRcV+7fLVy/vBWh9lXW16z/1R2xYLAUEQBEGQ3U8g
EDCZTCByIJw2G179dzvFxcUgq7Ur5OXl7Vdx1Xv4O8OPtC5I1wZMUmCLxYAg
CIIgyK6GoqiJiYmBgYH5+XlRxEDBPcDBCRVY9PDX+k2PKK4fKpf8KK4IgiAI
sk8RBAFkFZR1cnIyUoSQXQ6KK4orgiAIghwoLBbLUBgYSPS2IBsDxRXFFUEQ
BEEOCDRNT05ODgwM6HQ6QRASvTnIhkFxRXFFEARBkH2PKIqkA6yJiYlNtH2K
7BJycnJSUlIurnDq1CmlUrnFZaK4IgiCIAiye7DZbMPDw0NDQyaTKRDAC/we
prGx0el08ivMz89jjWv8xJWmaa1Wa7fbt3/RCIIkFI7jlpeXjUj8wboyZEOw
LDs1NTUwMDAzMwOek+jNQbYKhgrspLgmJSWBtcJN31YaN34ogiDAHWWiry0H
Arjp25ZdZrFYEv1VDgRxfQuDvJ6M7ABjY2Px24/IfkKSpMXFRfjNjI+Pu93u
RG8Osj2guO6kuKakpDQ1Nckfu7q6MjMzFQrF9tbBLi8vJ/rCcoDY+v7y+XyJ
/hIHiPhV1pE+d/R6faL1fJ9DepCP005E9hMOhwN+KvCDgZ8NxgbsJ1Bcd1Jc
wVoPHz5MqltVKlVlZSUMgLWC0G7jWmAnwgVUN6szLhkxxS+Njo5COfv9/i3u
L4/HMxDuZDDRRrDPIc8K41frQsSVYZg4LR8hDA8Po7gi68NxnFarheMR/sJw
ojcH2WZKS0vr6upaVygpKdmvPWclVlwNBkNmZiY4alpaWn5+fjAssXAGJlO3
t8aViKvL5QrCV8AUt0QaVNkucV1cXNyWvY+sBXliiOK610FxRdYhEAgYw9Xy
Y2NjoYsgsh8BU43s8jU3N1elUm1xmSiuUdA0nZSURCpaNRoNqV+Fj5WVlWCz
YLDbG/KK4oriisSC4ro/QHFF1gKO7vHxcXI63fqZGdm1YKjADoirLKtkmNS4
yhgMhuTk5G1bGYoriiuyGiiu+wMUVyQWnudnZmZIbADLsoneHCS+oLjugLjC
mVYW18zMTDBVGKisrJQrWkkUwXatDsUVxRWJBcV1f4DiikQSCARMJhN4C/wq
HA5HojcH2QlQXHcmVADEFe4EVSqVRqMhI0nUq0KhgL9RdbBbBMUVxRWJBcV1
f4Diish4vd6JiQnSmockSYneHGSHQHHdAXHdYVBcUVyRWFBc9wcorkgw3Fw5
OeKmpqbi2i46sgvp7u6urKysXqG4uHh2dnaLy0RxTSworiiuSCworvsDFFfE
YrEMDQ3BL8FmsyV6W5AEEAgEpDDj4+NkYOvLRHFNLCiuKK5ILCiu+wMU14MM
RVHkxDs/Py+KYqI3B0kwarV6uxaF4ppYUFxRXJFYUFz3ByiuBxPQVNKrMpx4
I+MbkYMMiiuKKyYU130Miuv+AMX1AGKz2WC/Dw0NWSyWRG8LsosoKirarkWh
uCYWFFcUVyQWFNf9AYrrgYKmadJZMxxfgiAkenO2n66uLoVCIXejGYshzPoL
UalUD82DrA+Ka2JBcUVxRWJBcd0foLgeECRJ0uv1cExNTEx4vd5Eb05cSElJ
gd8zyDn8XatVTE2Y9ZdTWVn50Dz7km3svAnFNbGguKK4IrGguO4PUFwPAg6H
A/by0NCQyWQKBPbsxXhdSLfv8ke583e73R5ZB0vEFT5G9g4PA/Cxq6uLjDlo
4iqKIvNptn4hRnFdCyjbqNKOR5vJKK4orkgsKK77AxTX/Q3HcVqtFg6lmZkZ
nucTvTnxJSUlJUo4Safw4K4wkJmZScaQDjeBtLS0YNhayRg5z0ETV1VtbePN
m20ZGSRVp6VNT0xscZkormsxNTxck54ulzaUfHdDw7avBcUVxRWJBcV1f4Di
ul+Bc6nRaBwcHBwfH4/fcbqrIBWnoKMKhYLUncKwXK0Kk4idyrWvpPNN+CuP
AWWFPAdNXNvy8sTLV4Np10mypVwYViq3uEwU17UYbG11pFyQS5u/dKWjsHDb
14LiiuKKxILiuj9Acd2XwIE5OjoK1gruul9jA9bBbreT2tTI4AFNBPIYsFbI
k5+fX7kCzIviiuK6k+La8ODBtkcLoLiiuCKxoLjuD1Bc9xk8z8/MzMCxo9Vq
OY5L9ObsHFFvXRH5JPpKaGpqihJXUuMK46NaIUBxRXHdSXGtuHmzqKiora0N
jtntenESxRXFFYkFxXV/gOK6bwgEAiaTaWhoaGxsLHTBOmDQNA2aarfbg+Ea
VzmitaCgIBhuBYtILIxJSUmBDCQ/mRHGyK9lBVFcUVwTESpgNpvh4K0OAwPw
cStrQXFFcUViQXHdH+xCcWVZltnd7MIWUL1e7/j4ODn1bf0sukchMa6gnZEt
BoCCRo4BZQWJJdmI5QZXWiSQx8As9jBkqjywXym9caP49TcUJ5JIynrtaFdj
4xaXieK6Fp21tTnHjsulXXj89fI7dyIzwLGs1Wrb2tqKi4tVKtXc3BycEje6
FhRXFFckFhTX/cFuE1c4A/h2PbIU7QbAosnBMjU1tYkLHLIWxHXBctfpzmB/
kKXI/FibemvxMkmXBs609rRscZkormvR2NV4eeisXNppmpS82qxVc0qSBNfZ
vr6+ioqKxsbGiYkJh8PxiGtBcUVxRWJBcd0f7E5x3c3BmbtHXAOBgMViGRoa
gj346Fc05BGBvaxSqUBfE70hcae4Jf8BlZ4XvE3SraXLqqHOLS4TxXUtOgba
bi9flkv7njetrO3hPe06nU4QV9DX8vLy3t5euJ9a/30uFFcUVyQWFNf9we4R
VzGMIAherxf2u7jLkC8Tu0RcKYqCCxkcI3q9Ph4NmCPBcKUriuvmQHFdi82J
qwzc1M/Pz3d1dRUXF7e2tmo0GnCe2GworiiuSCworvuDXSKuoGGuXQ/xw4SL
K1g0XLlIbMBuUOh9DBwdBoMh0VsRd1Bc95C4RmKxWOAnWlNTU1VVRfrFkyeh
uKK4IrGguO4Pdom4gg3CORZ2N7sr8Xq9sHnknazEiqvNZhsOAwOJ2oYDgt1u
PwjVrUBhQ+6NhQt3rFdJujJ6rqOvbYvLRHFdi7a+lqsT5+TSvj53oaghb4vL
hJPS9PR0W1tbYWGhUqnUhUFxRXFFokBx3R/sKnHdtU3lw+8w4eIKKyUnyfn5
eVEUd34DDhr7vjEBmZsPit5JKXrvYhlJb53LrWvp2OIyUVzXoqa+BUpYLu13
Ugozsku2a+FgUEtLS/39/Q8ePLh161Z3d7fdZt8BfwuEEf2C6OdJgk0Jp2Ao
JVovUVxXRfKL/76/Dgb7RlwDK4SH/X5IfglSIIJ4b0MCSaC4SpI0OztLGoRX
q9UTExOa3Qd56Smx4goFpdfr4XCAkyRFUTu5auQgkFvSnFLguVwmkXT2nl6p
GtriMlFc16JFOXD2waJc2h/luwrKW7d9LaCvra2tvb29TU1NZWVlofe59AZR
ELeqalAin06BcIKrJvzhJRaSIHGCxAckfziFpiZcL1FcZSK8xg97ihPpcGL8
YfkJ7879LDz7SFz/fWdxEsMItJd1+1gvL/CiKATCBhvvbUggCRRXcqjucjTh
hugTKK5gzrCDhoaGLBbLjq0UOVCguO5LcR1YCRXgOX5hfkGlUhUXF7e0tExN
Tnncnu0SV0mU4MTISxwfYH2sExInsIIo+EW/JMAkURL9CddLFFeZsLFKkl+A
/eVkLWbfgtlrNHtNNE8zHCOAyfL7ufZ1X4orK9G04HPRDjft4gQODsewuO7n
5twTKK7w49mZQ3VzSJI0EH4BKpggcYWVwtphG+BY2IVdHiD7BhTXnRTXtp0U
V2d0jKvFbBkZHqmtra2qqhocHFw2Lm9dXHlB4CSWCzAexuZlHBwP4iqCuIqf
iKuUcL3c/eJKroY78CooEVfRz8P+stHGJc/MknvB6F6iOIpmKZ5lhV3cFuXW
2aPiGg4EkCRR5AWe5ViapXk4ygTOQdvMvmUmQLsEx5xrcs6lsdIeD0PBIQmZ
g3449Panvu68uPI8bwwzPT3d2toKazfuMkh4QALFlTQ8DmufmJhYta0bBNlG
UFwPjrjKyef1TWun29vbCwoKOjo6ZmdmaYp+mKeFgunEUKOFkCRO4BiBdrCO
ZXrJyiw5OKOT1jvpJR/npnk6CNdMKQAJJAkyS5IfZl8JfPUH90v8wC4XV9hj
IDBw/+ClfB6f1+1zeSg3z9OLbl2fsXXKOaCnJkYsnb1LTQaH0+h0eWmGYbmg
JASl/fkaxV4U13DdakhcRYH30R4v5XZDou1uBqzVYPTqbKzJROl1rrFZx8Ss
VW/22EMNeMJ9IyQJbh0FKVTHLoUOwpUg2G3cvISw8+KqUChu7nrgh50ocZVj
A0wm0z74gSG7n1uZRW9+mPX2+QKSXv/gTnNr1xaXieK6FjX1bcdPZsil/eap
rLtZ2/ZylsxDxVVOcFk0Lhn7+/srKyvr6upGR0ZtVlussgbDT5hDF0+Rh8QJ
PMPTPtZpp03L3nkLpXfQiy562U2bKdZNc96AGAyIRFxDsQSCFHpvC2aHFL6K
roS/firtvTe5drO4hitX4U4jVFNndhrNzmWL02R2LuntY2pzp0pfObjcNGZR
9hrrVItV/TPqcf2sl6Y5nhd4mofdK3C8GEqwu8Nhk+Ew2PAvYRs3cofZk+JK
wsUDAdgXFteSxWW0ukwLTo3OOTrnGlnwjExZBzS2wVn3oMY20DHZOWvSBUPN
ZgqwBxmWolmfILK8wPJ8KJH9uI2blxB2XlyLiorADOE8uVNhqhujpKQENm95
eXnnxRXWotVqB8KxAfy+DjTaEE1NTSqVqneDtLe3NzQ0bHQuoKamZnOr6+np
SXRRbRIwls7OTvkQqK+v7+vr2+IyUVzXAn5d8MuUS7ujo6Oqqmrb1/Lo4hqZ
IP+kerK5ubm0tLS7u1u/oIeLnyyu4apWnpc4TmJZifVyTie9aPPqLG6NzTPn
8Booyk3Tbppx0azLLwQhgYj6Q1V+HCtRlORjxVAMpRDu0MUvglOFq17lOlgU
1+0VV0kKiBKxFLVxaNI4MrusVS8OVE9erdOktczeatDcq5vMaZ7Lbl3MuddY
UNFd72Mov1/y0g435XD5HC7K4aYdXtpF016/KIYWKIX31J5lj4or3HuAhVKs
1+TULzsgGWatIxpL77Slb8baB76qsQ/MuAYm7f2q2Q6NacpLeyiWYjjG4bOY
PEsu1uFhnQzvY+GWROTgVpK8T7nC3tuhOy+uhYWFYIZbP9LjBFxHdl5c5diA
sbExjA2Iori4WK1Wz24Q0Mi6urqNzgXAjdXExMQmVgeX+0QX1SZpaWmhKOr4
8eOXL18+dOgQOM/Q0HaGChxajfdOnz+Y4gqHOZxeLof58Y9/7PV629q22mpu
LJsTVzmR97nAXcFg4Yc9NTnpdrl4ATSW50PyyTIi7eUcTkbvpBec1LyHWvLS
Zi9l89J2L2eFJITiCSSQnHA9rcAIlId3eTmXj/OwAhPS11C8ATgs0dhwNexK
GwV7qCGCXS+uIsczDEeplwbUS4NTi6OjelWd9kr91LVG9Y26qdvVmoy6uYx6
Q8Z91f3SwdJF64LdbQFlNbqWZizqecfsokdv8ZmclBUWEtKe0Jt3nBDuTDJU
bb7XnGcvimsw4BdEFm4lHF7zolOnt8/MW7WTxs4xQ8PYQuv4fIfW1a9xhpLa
3ttv7hgzDcwuz1jdFi/r09k1Y6a+Be/8os/g5l0+3gMHICPQoVsaSQzdU4YP
vu3c2h1hZ8SVYoMV3VJxRyhdLzFdK1gsahfJx92SlJJuOXQM7ry4YmzA+lRU
VECZb3Qu0i3mJlZXWVkJLrFjq9sNgLjCTx08CoaTk5PjIa4pabdv5JTICaz1
gIsrlDMMQ5nvTnGNTDarbXRkFG4Dy8rLu3t6FvQLnMCCiHp5u4Nb8AlGTrIJ
olsSfQ5qyUEb7ILeLulpgYJsofayQpGuQZrzuhibxbdopZbAYGmRYniO5pnQ
y+w8eGzoZRKJ1P6Em2VKuJHuA3EN+kOBGk6v1excVC/1jRt6huY6++caWucv
Naov1/d9XK2+ppi9Vj5/rdxwLWcqvWjqbvdU6/B0v8XjnDSNN06XqBZbh2yD
027NIjVvpSw2yuphnV7WBZdAhmFFfu85zx4V19CtH+dz07Y52+S0ZWjS1DO6
XD+0XDVsqBrWV426WsfdzVq6ftJbp1yq6TN2TJiGjb45l7CssQwOLHQMWdpH
bV1zlGaRmbVyxmXasOCeW/IumX1mD+theDYc/rqXWkLbGXGdXgrILyPs2lTZ
HerRdSfFVY4NmJmZwdiAtUBxjTcgrvCDP378eH19PfyNh7iWdw5HOiFx14Ms
rlAmarX6ySef3P3iGkrhp/kulxs8ram5KSs7q7G5dmxywOLUMYKFl2yc5GP9
LMvbWMHOSm7W7w01isVzQU4QWYmlgyA6FOt20RYnbXExdickyumkHA4ahh1w
9aQFViTiGvB/EvuaaCnd6+LqF0WJ5ynG7aHsPboa1ayibbqoZSarTne+RnNW
MXJGMXtOYTjfYvtI6Uq5O/FRtvpanba8Xde44Jrr1ytLBu6UjN8s1txoNykG
3B063+SMRz1k6Rsw9Q6ZRmYdc17Gx3CMKIq79vlpLHtTXOFmThIkHm4ZZq1j
anPX0HLDkLly0Fw6YCwcXCroc9cM+apmhJIptqRlsazTWD9o6TUwaldAN2Hq
7pptajMUK42VI57uSWpwiddpPRP9pp4x65jWOWOhLD7eJ4ZBcY1CYwiJa69m
l/68vXQQNq9ctXPiCkc6OYJGR0dDbS0ia4PiGm8aGhoWFhbgPNDZ2Ql/4Te5
vTGuR19/8/TFax2zFvIRBo69cSIl7XZixRXkedUYBtmx4ySuULYTExNwgaut
rYXSnpubg/Lf9rXEQ1xFQeA4zkN53ZRbNz/Z1dNaXllQXVMyNKw0mPRUyDW9
wQAVDITavxJFQeL4IM0JPtHrCTA0L/CMj3V5GYfDZ7H7zCaPCZKFWrZQZhtj
8/GUGLbWcOMDKK7bQOilOI7leNgHdKumoEmTXaVJr9JcqdKdrtSeLJ98R6E/
WW35sIc6PSaeuTV+Cty1dCaner5M6xpT6mqylZdud717re9IyUJ6k7N0nOod
dncp5spLp4sqddXdy7022uFhvDzPw7VyGzc7ruxFcRV4nmUpl9didi1MLneP
LDb16it79eW9+rJ+Y9aA+S4tdZu8TW3aew2TmQ2awvqp0vpJRedMW/98b/es
UjXdVqm+Uam5VbV4v345b9zdo1purNQWdiy1DTtH5nzzJtbC8hwn8P6903ZW
XMVVCHKWoBHSgHXputLQblgiH3dP8gZDP+AdFldY1NjY2ODgoNFo3EP3qokC
xTXe5OXlXb16NW2F1NRUOAq2uMxIcS1s7gIhfPnVw++dOQ8JBiA1qfUJF9fQ
JoWDFuS0A+La0tICJSyX9uXLl4uKirZ9LdssrqIYFAWWoxmWctMuF+1keTfH
e0WBttkWRkbbauvK8/Kz6+uaRkfUbruXpwQ4Z7KhRkF51ifS9oDXwXucjJcS
fLRAsQzF0jbaZqUsYK0OxkYJbk5gJTEgh7miuG4dhvZ6PHazQ2+0zdaP36oZ
SysZPFU8mFw0eqpEnVQ+8/KQI2WBvVs+9tb11heuKd+92v7+xcYzV5suVPQ0
FHWWZbfdu9ry1pmm357pff702Mu15vxyw4MPlK8ntRypNFS1m5XT3tllygy7
eQ91Qb4XxZXnWJr22N1Go2NmwqgcMtT3zpf3zpf1LJQOmLKGbHdFqdfibm4Y
y6wazqhR51WPF1aNljarm5QalVLTodS2lY2ll6nTS+auVxju9NlbWhcVpVM5
LYaGPlu/1jNtYIworpHUB0vzgrd3eWKD9I6JK8dxJDYA/nL7up3nbQTFNd6Q
l7Pkj9seKgAJbPDUhatHX38z6d2TKWm3ZWtNrLjK4Qpy2gFxJaEC8sc9ESoQ
EMWAwJOmdcBaXbSD5T0875NAZjkHzRi8PrPDaRoenGyobyvIK6qrrhsYGjQu
G+Esx/gExu732jm3A8RV8tF+BiSV4x2M3R52VzdjZwUPL3AS6fAnnIJSjLj6
P50Sray7WVxJW50+H+x/85JlZsE0AdaqGLlc1HeysO/9wuEPS9QnKudeGnVe
WGIfFPYlpSieu9h64kJT0tmq9z6qOp3fqshtLX7Qev9K09un6596R/mbN/ue
KtTfyJq9dqLlj0cbni9ZKG1ablG7p5Z8RhTXSOIhrhTtdvusZsfcgnV8SF/X
P1/do6vsmy/p1xfNekuWhFK1rW7QWNU4VVA9kZ0zllY0eq9yqLR1oqVb0wt/
G8fqqqdyK6fu501dyZ26VKi9VTGb3WSorNNVVGnLBky90+5pf/jtSAwVIFQG
c8EMx4ODuzPVBItg89xBxw6IK5zZjEbj4ODg2NgYxgZsiPXFFX7AmZmZsePX
N0mVSpWUlJSenm6326MmrS+um1vdLmcHxJW4a82gJlZHEyWuWdXNoKmRCg1b
CGPkjURxlZNfFP0C72V9HsbjpG1O2srwPo5nwq260jzntlrteoPNZnI4bW6G
401mi3JIWV5dUlScq1S2zWp1XpiZFn20RNGhtrQ4TqK5UL2rF2SWhv9ZxsfR
Xg6un6FaV9EfjO0oFsX1kQmE+nQVbK7lRYtudmlYY+grGjhT1H+2sO9cUd/p
suF3FNoTDabX6w1n6ucv3ev74Gpr0vGG356oe/aU4p2U6jOlqsqc1pz0umtX
mpNT2994q/Xpwy1PvN35h/e7Xro0dPLq8OmLnWezx+73mvsX3AuSIOyh54Z7
UVx9cKvotSzbZ+cto4P66r75qh5dFYjrgL5QT5fbglV9y4ouQ0WTtrh6Mu/+
2OX8kYywuLb2avubx5rqR2pqtUUKTU6O+tKDiZT745dKpjPbl2trZkpLJ/J6
llQa19QnTdKhuIapCOYUBTPjtPCt0xVsDourPd7iSmIDBsL92+6hY3yXsI64
wnk+Pz8fZCN20vommZKSAjsR5gVNjZq0jrhuenW7nHiLKwjhy68eJhGkx944
EaWviRLXjlnL0dffhA07ffHajdyS986cj2ykC8V1DXF1Oxirg7EwPMXxbKip
K4EXecZscurmrHaz3WV3saETpd/Mm22M2ebQT0wMtTa35OTm1ze1jo5rLTYP
y/p5zs/xAsNxYKwMzXKUQHtYys1K4XZHH1Vco0BxlUsiJK68xbG0YNJOGwY0
+u68/g/z+04V9KUU9Z2rGH6reiap2ZakmP+wRPPRnd7kNOXJl+t/8Vrtb08p
3k6pPlveXZndmnWt5tKV5tOXO997u+V3rzT+9OXGJ461PpU+fjZj8tLppncy
+m90LffMu+aDkhTcOxe1vSiuPM+4fdZp0+jYYlfbTFHzbHa9LrNJe6956n6D
OrtenduoK6mdzS2auZ41nXJm8g9vdv3+WcXvckbv9i+p6mebyrX1VZMVZeMF
d3svZvSlFk7fK5vKrVaX1880NC+0q63TRo/FH25Veb0aVzguRYnlqdAdq8DA
AMv54LjleVaUxNDR+Un3FDukvtsvrvCTUFQFy8ohectuespukOFdlMorguHz
ww6IqyiKcmwAy7LbWc4HhlhxhfKH8pRP8o9ukjALzEh2H/xNSkrSaDRReWLF
ddOr2yvEW1xJhMCpC1dBC8nAbhBXSE1qPWwMMWow2CsZWfIbZCiu0eIq8j7e
S8EfPycEODHISkEOznCCX2BEwS14nYLLK3gpwePzO6mgwya6PJIvABl4ifUG
JIa2GKdV3a0l5YUVVYq+4eF54xzD0zwtCR5OtHtFDysy/nD79lKov1FI0eIa
ih8ItwpL8MOqeQkunEw4sYLIQ55wV5dCuE3YAyyufgn2l8tnNbsWh+aVHZrq
jO737vS9dXviyM3RV6+0/vFKy+GrLW98rHonre/kuz2/PdLzz3/X+udfrv7s
Yx//yf9+/bNlkznZgzfSlGfONr7zXvXrL5Y8/VTBv77a/szrHS+ktJ6+2nYx
byS3TtswadWZPGa/xIHTrLkpsNeEAMtQHtrhA/+CRDkg0QxoDxNqLM0f6jtY
3KkeZveiuIIfunw2nWVq0jio0lW1zOXUzqdXa25Uq28o1LcV6oy6udzquftF
M+nZ06kpUy8k9T77h5rf5Uzc7zf1dCyqWgydtVN1ionyrP7L9/tTc9TXS9UP
GiYVjdONzTrllHXO5HXAfam0rriGOh8ReB/r9bJuN+NwUlazZ8lF2fhQcCzH
hXpY4wVR2LEo2e0X1wl1MO36bk+NTcGdqnEF53E4HNtZwgeMWHG12+2glyqV
inx8dJOEWWBGmB32YHJysryESGLFddOr2ysUFRVlZWUVrpCRkbH17yKLK6gg
CRwlLbhmlFSDx+4ScV0/xUlc29vb7969K5d2dnZ2aWnptq8lHuLKCBQj0iCu
kHyhNq98UoDn/Swj0ZTopkQnI3oY0e2RzG5peYGz2Xh3QGDhH+PzszTLsb5w
b7Aeu8s5PjXV2FxfUJjf3qLUjGs9RrvoBcH1hwLtwtIFThoIt29PUqg+R5RA
SMVwo+kETqQZ0efjXV7e5eadtOALdewV7h8hlCWwE6937V5xlQQ3Zbe6jOOG
/l5d692eD2/3v31t4tnLo8+cav71meZnPmp96XLvkbSR42/1/fKV7h99r/3z
X6/788du/Of/5fZ/LdYU5I5nZQ7eudpx6VzDmaMVhw4VP/Fy46+ONv/+StvZ
Gx1Xc/sL66fatLZFs9cuSIx/bXGFDRE4wUO5bR6z2bO87F6at2nnrJN0KF6a
pvhw4qjwm0E7UV+3F8WVYn1uymVyGQ32+Ymlvg5jfuXyudyp0/dHT+eqPyrQ
XFQs3aow3CjRXSuYvXB95uj7Qy890/ZMji5/0DU+RU3r2Pn26b6mqZaikbS8
oYt3Bs4Wj97unG7o0Ha0a/tmrUYHzQoBAdI65U9zlJf1Wn0Oi8++4JzTWicG
jJ06hwaOSBhvo+0e1gP7EX522/jF12H7xXVsPGSG8Hd3YrOFNq8+1P7MjoUK
IFvhoS9nbS5UAMRVoVDEuutDX87af+JKymFwhYaGhu1tDgtKrLC5K/Qy1Jnd
VeMqt4h17I0TWdXNOyOuUNSNjY1yaSuVyurq6m1fy/a/nBWqThEl+C8gsgFh
mV2w8xbWz3EBHx90SkFbMGgNBh2i32rnZs2sts9nnPNagl6vRNEMyzt9ksUT
4CRJJB0ShB72iwLPzc3oO9u7i3JLaqvqJsYn7DYrWBA4ssjR4bVJRFxBQ/lQ
h+scH1Za8NtgQKIEu4c3W5l5MzO3xM5YWKOb83h4r0/0cRIvBmKCDQ6MuBJ8
jNfhsetss1MWddbg5dvD752c/Mlbo997senvj7R8L6njifPjv/p47qkTQz98
qetb/9b9Vz9s/dJjWZ95LPdzBXPVJQstVcah/PGGzK7is43H36p+4rnyH76q
+HmG8kJu153s9prGsYFFt89K+2g/Bc6z1jbwAvizz+gyzdn1I8vD/YvdtdNF
FVPZYKpuxrPgNizCTQtlp3hKDOxEA/h7UVxhP3ool9VtXnLo1cbBVkNu0Xxy
9uQH98ZO5kyeytOerVi8Xm5IK5m7lKs7d2n61XdGXnyu85l703fbTaphcFfv
TNf8RMdsT9n47cLRqxn950vHMnpnm3rn+vvmJxdsNocv1BUIIzCiCAdodHvy
/tBjED/cZXhoz6LTuOAwDC719Bja2+YV/caOeffsondxmbI4WZeX84rr1L1v
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
XlAdHw0/IoryzuoXRmcmC3uL7qvu3+q6cqXufGrp2Y/KT7+b8/bbt95+//bJ
srqKju7O1vbWppZGuKA0NjbW1dVVV1fD9bS0tLSoqKigoECWTBgPU5uamlpb
W8G4VCpVT0+PLJkTExPgXTMzM3Nzc3q9Hk5l4Lc2m83pdHo8oNo+lmX7+/sh
89bLlohr0Xh68cT1R0/lk3eVC229S72PnroXu+p1VVFqun6qni0tV5ShuO5R
UFzjDdyowvabV9j2Ll/Ja1kkgSteychaS1zJI/tY4iGuoKlHX3+TvDsGRG1V
/MQVynZ8fFwu7dnZWTiBb/tatrvnLAkSiCvHi5Qo+kTBxjhtjNXOG8NvRbFe
xuelvSvBq6TUFkTJzAgcL4hBIbi47BrULHrNPO/w+/mwuIbqc7gABwYqfKp9
q5WVGpaWLTY7eWUHrlcajbalpbWgsKBD2a6ZmXbTPiEYEIJ+SHxAYESPF/yH
ttkZm51zeHgvIzIHV1xhe0QJbiYYH+VxOl12W+7gx2nd7z9d+51/q/3Gy+3f
f7v7Hy+OPPHx2D9fn/jJvZGncocOHRn52kuDf/Wk8i9/3vHXf1A+d7I/qWjq
eqOmuks7+GDi1IWx33z/7pf/KePr7xceuVx52uNysG5fEM7Kn+5FBy6adpfT
bLc57W673WGzW2f1us6R3mt16a/kvvp0/q9/W/DLP5b/4bDi+V/WP/H7lt8n
9X94byafCsIdjttCW/mYAMttZy+KqyQJHAsGYrfYjRrjeOd8c8V03u3x81eG
37kz/sF99anKudQaXVr7TEnbdHGl9uP7o+9f6D2UMnDs/NDbt7puPlAWlg7W
FA2W3hv+OGPkwscjSbcHz+X13huY7jaZjQxFw8En8iy4MR86WrkAH+AYwe3x
2ez2ZdOy2Wyx2GzdU/1NY+33uu7fUN5Ib7n0yofPn61461L12UulV5PvJ79z
9733PzrZPz04Mz9jWDJYLBaHwwGFDBduKAoQp23vFHi7YlxRXJE4geIab/Ly
8q5du5a+wrZ3+RqZYvurihRXEgoLCZQSssEAiUGN08tZJJV3Dke2ghVvcSVd
vsqlTR54bftatllcpVDDqjxpUED0s6KfpoVQE6ySl5N8gp/iJUqQ6EDoJR2R
KCgvMXbGrXGZ5h2uZRvncHBeN0d7aNpLsywLzur2uX0UFXodRBD9QUEQRVi4
P9Ttq+APJZGC0y6YbejlrCAYcehF+VDTScKC3tDT01deVl5bWwdXL5PVTPt9
RlFn4ZZcIK6sHcTVK4TE9ZOeYw+guIZ9nWM5iqItVtOSUd81rapVVyR3HTvW
/ruf1H3t3xr+vz+2fuednn88O/iz273H83rOXen+xYcdP/556ed+UPhf/+zB
X/3gwU8OZ73zel7y20VnXq14/oWaXzzZ+He/qfv20YI/vFNwdHpmymwyBuGC
SRL59qzfT4tuh89h98zr5ufmFuYM+u6J/nst+e+Uvf+7rGd+e+/Xv33w5O8U
//y7+p+8NnDsSP/xI71vpqqvdDv6Z71zLs6FNa6rIoJWsrTDaTPbjLPL2j69
qk5XcWvso9TBpLSR926OnSyZvaCYua6cVqi0la3ajPyR5BTV70/3/DG578jF
losf193LUGbf6rz3cc/la30p6eq3bg2fedBzUznZrFuYdrgdrMBJYjhsnLTs
wPo5SgDrtFis+kX9otG4ZDK3jKuqhxpud2akdaSlN186lvryLfXp/Jk7zUsd
ZQsV9zUPrmVdm6f0cFbYmZbNUFxRXHc5KK7xJt6hAiEXzQ2lq3ezj71xgjyg
Xz9UgFhr70pvVnEKFYiq15U7e8VQgRhxDT28XxHXQCjRAZaDCx4D1ioGfFKA
loJMIPjvIayMEDTR1LB9ccpqWzDTHo8Y5IIM5aMpMFea4Win1+mlfCLnFwVJ
CvKcIDIc6CofkDi/xEMKt331SasCYEcBuK76QXJDr11J4ebSbVb72Nh4fUN9
2s1r9yvutA402nyhUAE776AEHxtqpikcPOuPY7tYu1Rcw7BhcTVZjPrFufH5
SeW08trAufe7jny3+qs/rX386Ya/P9b54/f7fnar5+2C7qt3VC9eaP3Vzwr+
7NtZ/+U/3PzsV9K/8ctrL//6+ku/ufXik9m/+kXRT3/T+c2n277zYv6/vZbz
Qs9Il3Z+ysfRLB+OJibxqZQkeUW3nXLavNOaaa12RqPTNQ+rPq7NOF6U9Ov7
T/327q+fvv/kb2t/+JuW7yZNvPfG6NtH+l4/O55SZ26ccms8PIYKrA7Ph8TV
63N6vFaHa8lgHZsydhRP37qpPpeufjtd/UbW1KlCzYWWmazO2cIRXX2FJv38
+Muvd7/8Yvsrr7cfeaf96LHqo8dqjh5veOPN5jcujh473/t6css7l1vO32r9
+G5XzoP+snmL0WAzexmW5kTaK3pcrM3qXlq2zi0uafULUwvzdT3K0o766/W3
rtRey+y6eOLjF7Ot7xXYriocCoW5WqGvTs++vkgv+ngvL+5EX/bb2KqA6BdQ
XJFt58GDB7m5uXkbJDs7+/79+xudC8jMzNzc6srLyxNdVJtkJ2NcwVoLm7vW
EVewR9KJVUra7d6VjlnjIa6wZNBjkmCrjr7+JrYqsL64CqLICwLFcz6OC7XP
yooUK7FC6J2tkG6GM8kP/b1c0EoLOq/PTFMsz4iiAFMYwccIXkHySf5QI1lc
qEI15KBiMFTtynOBACuAEAdoFpI/EKp3DU0P9UoQDBus/xMXFUNJCjWT5Wd8
VEbGzabeivuFGRMLagfrdPMeRmB4sN+DLa5w2fJ4vQ6H2W5fMpqndUsDSk12
6diFp1t/9OvWf3ii9euHOr59RPX9jOFXqtWnFf13bncnf7P2L/+L4nOP5f35
/5T9uS/e/+JnPv78f/roz/+vK1/6k7Sv/rj+a/+95mvfuPv1v7v5t0/d+dWz
WX98rSzlbleZZnF+2eEMvx3HeRyMyeBcWrCPaXQD6qmOkaHi1qbz2Rmv3jzx
6ytPvZT7y1fLnnh15L8dnv72+4YPPpw/naq5kqG732HpnPHMgvNIKK6rwXE8
LJCmXRTl8HnNNsfUormnSpd5d+rC9cm30iaPZqo/yJs63zybodTlTs13Vs3c
Pac5crj7lWdaXn6l47ljqt8/W/67P1T84fnqV16pP5w68lpy95E3G4++W/Pm
B4q3k2s/OtWQpl7UaZf1Th/thePTI7ocTKjvCqN1dtE4OT8/PjdbrVQWtzSk
Vd+6rLia1Xvhresv5nnfKfRcLHOXVttq641NN3JuLNFLsBM5cSc6Wjog4jox
NQ4/p9BWorjuNSoqKjwej3+DzM3NqVSqjc4FwOrgtLa51SW6qDbJDrQqsOqz
+FhxJYEB4JBk4NgbJyJf5oprBwQvv3oYX85aM4UfuouSyIu8j2M8HCNyPIir
jwmyQlAMBFlIoYzyDEEPG7QxkoHmnTxMYcM1sUFW8rGSVwpQgSDNcaHeAkLX
jSCIqz/U4BYfDDBCgOYCPgYSzBIKGwg1weWXtyFIuhWQQiEJoRFSgPXSWVn3
ukcbs0vujS1MgLj6eF+o2wNJkPsvOJjiSjOM2+Nxuyxul8lum1k2Dat1pS1T
N19Q/utTHd/75/a/fqbjGy8rv5M5+kLD9MmmobL7fdceb/76/1z/hcdKPvdY
wWf/t9zPPHbtTx47/Z8e++gzj1388+9Wf+W7lV/5/O0v/GnaX3zt/ONfv/C9
b6U9+54ibWBGPW+22L2cy8k6bfTivE0/axnRzPWMTzYM9OY21J3JuPvytRO/
Tv3tqwW/OFb1s+Pa77xu/Fay+cNzSx+l627n6Au6rN06zxzF+3ag+fq9KK7B
UMyyxPMczdBWh33ZMr1o7F009erN3ZVTdzNGUu6Pn8hRv1cxfbF5/o7VM6Z3
DUw6u6rMV+4Zj34weuRo9+HDqmde7fr94b4/HO8/lDr4Vmr/mxd6j58fOHJ2
+NWzQ0fODr32rvLY+8q3UzvvXesq6tFPtWtGavq6sjqKLjdc+bDm9FvV759X
pl7qunin/9q9wbRsdcob6S9+PHPygf56k72109HTY+3LKcyRQs0th+4mt/e7
r8oBEVdOWrkLQHHda2CoQLyJt7hmlFSDfIK7vnfmPLholB9GiuupC1dv5JQQ
yyXRsGCwsvRur7iGOvPK/fcYBjDkqD4IUFwjxDWUeCHUvSMbSnA6dYt+mpOC
rBiKCgD1BJnk/aH2BBwM+Itz0eewsXYh6AjFEoif9GbPcUGWCXgpyUNJYqjl
HIoXXaJIheIQuABc7UOhAf6AAB+lgBCKq/2k/atQpwWSP9RbusBQQuhdaJ/E
iS636PFOT01dv56WmXOrvr3W4rNQgpfzM3Ax8odm+oSDKa4AfHcf5XO6nUtL
4wsLvROasnFNkVpXlN3/wXM1//Ri/bdebvz6+x3//Vz3k/PWeo25WrlUUGW4
/sLU4z/s/Op/LPj8Y1n/72OZ//dj+Z95rPRPv1v+1z8s//qPi776w6Ivf7v6
C9+o+OLXi7/6l3lf/tKDL33zwZM/ynrrbn9d7mDLnSbFzbryf0n7xXcv//fP
nf+br1z55rfv/ehXBU+8XPHUa61PHFH+9A+9P3i6/3vJ08kp06l3Z+/Xmxq9
fh8bbgwWm8Nai1B0N89StM9kMxuWNbOGnvml7rklVbO2oGTids746Tz1ubLp
S7W6GxpLy5StbcLV3ma7X2W5cG3yZPLAiZNDL703+OKb/c+d6D90dvDE2YHX
z/UfOdd/GNKZgcOnBl9L7jp6quvEeeXVi8rb5erawsGqe20laY23zteefb/q
5InKd863nrvQkXKr71rGYHrGWMprF5//oPyN1OozV4uv5bbkFzQX3c+5Hw4Z
QXFFcUVCoLjGm7h2+UpCBcAJIb386mFQ04c2hwVKWa5a5YWpuMa4khYGdkBc
92KXr58WVx7cNRDwipKPExia57ycKIBlhlTTy0suL2N105ZlyuZgHbzkFESf
BJMlKegPsHSApgJOn9/uhfMrBUsQJDcMhOblAxwbslO4+AkSpIC4Iq7+T4sr
LdC0yHh431h/f1F+fpeq02I1Olmzm7W7OU+4U1o2FGGA4hoWVy/lc7hdc/oR
ra6rbyyvZyyrV51d2Hfug6ZDSU0/Pd70395V/vRU9y+Vc3fa5+80LWZULV47
p/vXF/p/8Hjl418q/dLnij73/5R89v8o+9Nvlj/+7fLHv1X6pX8o/eL3yr7w
rdIvfq34y48Xfunx/C9+K+vH37v3zNuNKR80Xn6z8Pzx3LPfv/L9b1z49ufP
fO2vLv7dP9z+/i/y/uW5it+82PivL7X+7JDqZ891/+zq7LU7ujvlCxVd5m6f
SHF+Tgrvr+39+rHsaXH10h6DdWHKoB6a6Z2Y7ZycbVfPdUzMKyvUOWVTmYUz
VwpnLpdpP25eyh7z1U37uvXUaONiTt70pcLFD7Lm3zk3/MKHA8+/P/jGe0NH
3h558VTvKynKIx/2Hnl/8LVLo4cvDB451fb6h82vJzW8drzq6CuFrx8rOfpW
xZE3y46+UfL62ZoPUhpOp/Wm3Ri8mTZ06bLy0tXGtHsdD4raSlPTLjR1NFpt
lnA3yzvRGG8QxRXFddeD4hpv4trlK2lvCgaS3j0JrghSCvq6lrg2qfWQTZbJ
qCrQuIYK7FirAnuxy1cirqF+qwSREyROBIlkBdHF8QYfa3UwHk7kwkGoTr/f
KrHzEq1zszYfiCvnEXlPUPAERBbslPL4PW6/2e03uiGzLRBwgFgFAkyQhK9K
YWX1k7DWAGnJCpTwk5edQw24BkCebU5rd58qryh3aHTAx7gZgWYFWpDo0KaF
uuYi8hvwBwIoriFxpWmH2zM629c72VzZlV6mvFLW8XF1963mwQd3Ot8913ro
XdW/nej5RXLnb1L6ni0xJNeYLgw7a4vmLr7R/fPXuv/p1Z4f/VP9l/+24rNf
qfjqlyu+8mc1n/9c9ed++v+z9x5AcVxpw+7e+m/dun/VX3Wr/vuF+urb+327
a8uylWXLcpIc1mFtr1eWd22v43qdZOUcAEkgoYAQIAmEJDISCETOOec8QxrC
kAcYJsfOYWbu6W6JZUkiDTDoPHUKjYZOdE93P33mPe8bteGdmPUbkta9lrbu
w6x1b0ZteDVw03O31z7tt/Zfz6/7f86sX+/x7LpLz61zW//i5S3v+r75ccSO
L1K//iL9s68y/7q/8PCxYqecwcKy4UqpsmNIP0jRBFfcQjhSdsZxxZUgcTNm
BOIqHWpv6msQd5WKpIX1fEuVRCZKQiLbvSM7rsZ0eWUNB9Wbkjqxsn5CXKdO
KRq+V6YKyB32DWw95dt47KLoxLnmQ6c7dp+r33uh7MClukMejUf9mw/7iY96
lp+8XHLqWN7eg+l79zzYdyTxwOm0Qy5JR10STlzLueJX4BNWG3ZPFBnVdi+2
IyazJ7tsqLLL0Nur7k/JSAF/NS+ui2GttoUTV67MQX0NFFfIggPF1d7YO1QA
mKqgo0Lq1Is+ftPEuIKJhXSvYDIwy9he0IUVVyF0AYg02KpL124GRCcujrg6
ZKgA32iGpmgaiCsXPwpupLQRI+RmQqPHjZy4ct/zmxnWwJDDDDFopPQoZaAp
hKURGxcMQAFxNSNWg9miNLEjRtZqMwKrsrGYzcJLr4W1WhigxCQnn5zGctbF
j64SBliBdxQKZVFxUXJqSptUQlm4wWE4g6IUigFxtXAbxTAWzlstj6ow2b85
grhyhQCae+vrOotTa4ITKm5FFHg/KPFNqgy8XeLsUbjrRPGn+0r+eLxih1vd
55GyYymKc1Iku1gRGNx+KKDtwK22fftK3vkkfeO2tBdeytj8bPHaVSVr3r6/
5vexa9/MWP9+5vq/ZG94P2bT78Ne+O2tVf/u+9T/dfY3v3L6zYYrqzddeu4F
1w1vXHp5p98fv438dnfavv25ew4XHLhU5eFV61s1UteobB7UyTQmFVfZYqHz
fE6Fg4orEHuUQIyofkQ7OKDq6lG0lHXkZTemxNZGRlaHJohvRjX4+Nae9hO5
3B04Gzd8KUfjV43HNFkzNdYq2tpkQbrMenFNz4P8jqBboqPe0v1u2l1HW3/c
U/KDV+P+8M7joU0nQhqdbtdfvFl36UjZ7gPZP+958N2p5D2Xso97JJ/wjHeK
Lr6bUB6T05Bf0Fjaoeno0kplhgG5Sa7D9GYCIWgKnAiZGZncBWdReELSYUFx
XYaAvQp877GWOI24dnZ2TnWpn8YktVqtVCqd6iBOI65zW90i09PTA/7AWc1i
b3HlEgVc8hQKqgIdHTd4f1wBAqFXVoiJHZeiamHFFWwPkGSwMcClR70aius0
jWIokk9TjlO0mcINOKpFET1uMpNGigV3agZhrAhjwRmCYHEzS+AsYbGSljGF
7JU0O0IxKpRSIxS3SPAblBuyZbMCd8VBQzDKhAJBZrnMsezDGlpAaXv7BrJz
c/KLCroHZCaSYSjWxljVmFqDa3SkyUijtIWmuZ5aqxBlx+d+heLKx7jiZj2i
6xhsbuqtzW1KS6y9fyHllEvCkSOxu52T/+6W8fVXCdvejdn4jejVn5tev9K7
M2Dom2FbgMYaSViyULICwZpSGn2u5P7yXfbLnxW+sL5r0697N/4q6rcvpTxz
pHzT/sLNP2dv+S7tzW+SP1wV/sy/B/z2f7n++/889S/bfNa/4bH+/bObPvP4
w4HAw5diPAMzw2Ib41I6UmqGqpoU4mGjXGlSm3EUJ8mx1SfsjcOKK20mjDpE
3afubh2qr+4tSG6Mvl8THF59J6T6VmprUEzTzRu1btcanAN6jgb1ngyTnUlR
+xUY74qwhA4yw4A3qJHaTmVRqzy3qi88p+9m9MAFv95T7t2HLon3eVTvDRQd
vFN/5Hr5WZ8yt3MVR5wLDh5O2eOUfuB81hH3xGMXY048yI1OKU6vaxU3S9uH
DcNyg1xlVupRLUZhJE0KaetQBM3JyWltbV3Yv31SnhBxhemwliHglt3A09LS
Aq7YFDV52ZSpxBUYppeXl7u7O/DJib+dyiTBsXNycgoPDwfzTrq6qcR1bqtb
fIRdCs7rmTwUCCxCVgHgh/eziuIKqyZGro4bnOV1KxjI6rGTTq6XPccFFSys
uIIVAUkGsir06wJVhoOzHiOuNElQBEJiZgLVEQYtZtSgqB5HENJMssA+GS1G
6DCCH9FPmLlqriTNFYvlrqv8gGN2EENlKKLFUBOGMRaS5nITMDRB2UiCC3Jl
uehVBAV3adrGglktLMW0S9qTk1PLKqqUGi1p4wrOgtlYmrXSLEohCIWYKBSh
cWCtzENxfRgmAMXVxourBlUPGQbLugry2tIiqm7dLPb4Ofqbn6O/3hX79dHk
b1zSv/1r4lvvxG39rGbz57XPf9f42n7J2+maEzl611LUuxWNGMSyKvruprXc
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
F377q8tPrQrYsD5088thm9+N2P5N/Jd/S//0p9KP3835/XOpr2xP/vOO1B/u
V8QU15dw4sol4IXiOkcsfMQARqBmzDisHxrUyfrUvQPafp1ZZUR1KIFSNME/
IXInIoWziBnvGZFJBjsymlLvV969nuVxNePM5fRjFzKOn8867pp8CDS3lINn
Uw7uTz58MO3Y0Rxnp/yTboVHL5SfulR9JrDVN0jie11y3kdy1r328h1xcEln
Wedwu40igEM/POPmDdhvBQUFzc3Nj50SiuvMxRXc3MELKK6LDBRXe7N8BmdN
3+wtrkJhLyiuM2wj8pGS4uKsrMzubinFkiRL0sBRLQwQUYqhuIoBXB0BrpOP
Ae/QXA8sQ3P/YTh3BVNwI7y4erBAV/liW/y0wGkJ1iqIIBdQy1VoZ8HsVooC
jRNX0EjKRhA2HNybaaC7DJcblBdXi1WoALt4AQMOJ65Wq5WmaRQzawzKbqW0
dbipfqCuuq8aKKtcN6RHtCbMwNA4wx0IlsIYwsR0yvqqOxt8cr3Op5z52v/j
ndfefuvquje91m/32bjda+12z9UvX37mxYtP/8el1f/i8dy/3tj8r35bXgxa
91Lo5u1Rr/4x6b3vC7/6OPeDt7K3v5L07ltJH3sW+YSV37PhqI3Ebda5D+2Z
GytGXG38oSQpHCMQlUmpNnJNa1KTFMY18CzIBeUwD1PmEjYSoWTKkc6h7hRx
wr2KIO+s85fTnS6kHnFLP+KWdfR0yiHQzvLtcPLRg6knDmSdPpl70q3gyNmy
w2eqj9xuuRkkuXWn48IdqZtb7TlfkV9me07zYBN3HtL0QomrAJCuzMzM6Y8R
FNeZiyu4xSA8i/OxhAhAcbU3T6a4clVooxPHNtfLnsdOOkFxfWzr7enNzsou
LSlVjCisFiHJAKesD3s+WauQYx5YJy+uHLy4MjQtSCuf6ZWzTdpmwbmKA3wl
Am67WdzKonykAAf3viCuDHd7ZHlxZVgbRnDZsVCKxGggzDTFLYqrDMvnfYXi
Oh1cwADL4gRmNOuGtIM9qp4eZS9oOIZgGILiCBAhi4WyWPianqTNhthkwyNN
3R1XMi+4JBz93Petj7y2brv83Guea1+/vvF1n7Wve69++cozWy4/8/Tltf/l
sf5/em/5H9de2hKwZnPw2nWRG95KeOP7gh8+y9/xUf4bW5Pe2Jb43uk8V59i
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
MFghryzw2Cc5qwCKoKIGUXx8fEtzC0mQC6V2XM1W7ptD4KQ0QhkMpFaJyUfQ
ITNuQggEo3Cc6y3lamMB1yS5MgRcMiacE1eGy0LJiSvQV4pLLcDl0BIqDnA/
CArHSNxIYmYCBxtMcWkLWL5TliFJHCdRlKvYBcV1LoDdiGNEt1Ja1VcSKw65
U3n5p/hPvovZ8eW9P31x909fRn74acQ7O+9u+2P49rfD3vg8cseP0V9FlEcl
12VUdNbX9zSXisuCi8M+jvzq92F/XHtry7MBL6wKfv692E8+Sf7mUJmTU835
i2Lfa+LgCHFqUmtBVV+zeLitUy1Voio9aeDrVtiLJ1BcKYoaMgz2abvEg2Xl
vVn+lR5AXO/W3Ipq8I9r8g+quXqj4uId0bVgkV9ic0RaS2xjf6N0pFuLmOQ6
bZ9CUdRZHtuUcDH/imvO+dP5Li6Fzu7Vnn7igIy+zIz+rIyh3Iy+0ozummZl
r1Q7NGhUyM0qmh87aae/SKFQJCYm5uTkLKC4pg/eTh+aRcscDi5TZ1dqi2bR
NMUN6hqxun7mrVHdwMxSXIuLixt4RrumFxbwcQKqA5YPfoLX9ljFigGmw7I3
4CLQ3d09/AiRSLTgJV+BuKZUNo6+HqujSyWuwFRHSxuA1xd9/IBUj3YO209c
wUMxeG4d3dtSqTQvL2/B1zIrcVWr1OXl5ZkZmV1dXQuudlw6LG7wD0FZcB2h
0uDg1jY4bJYRFIKRZpQ0IwSK4CROcfVbCZqrAIvRNMrw3xcDIaQZG03aGJQr
D8s+LK1FcyN5GJzrU0XMJFgOZqWt3LgukmH4pLA4QaAEbmZQjIHiOhdomgaP
6lKVpHygIFJ8y6/C9esHf/wq+sNfYr/YF/f1oaTPf4j56KN7b+yIfucviX/c
n/bjmeyTqaLUIklJ18jAoFbV3teRKc45ke76bfSuLX5vbrj1ytrALVui/vBG
/CfOFWe9G7yvNt68UhfgURoVWJ9RLpOIRjrbNX0jqEpL6O3UWSfwZIqrVN3e
pmyukRWV9WZHNQRFi0JixeEJzWHJktC4luAHoLVGJEjuF3RklkrzO4Y6ZepB
M47rzSa1Xtc63FnRWxNaG3GnOsi31u963Y2zJe4elT7BzRFxXSllmuparUis
a+02DcnMCg1hMFBm2sJlvLPr3xUdHR0ZGTn/5YCDVddQkyD1T+iaRUvpCS5X
FNRqqmbTqpu14jZ968xbu17CWB/J4czEFfiqmWf+V6RpAD7W1tYG7mIasFWQ
KYDiam9iYmJu3boV9Ihr164tbFYBIY0AwPWypxDpuv/godFO16USV7ABwqgx
oQStELoAVHZ0w+wkriUlJTdu3Bjd2/7+/nFxcQu+lhmKq2xAlp+XX1RYNDw0
bCe1E3pcKa42FoGQRhNh0KBqNaoy4yYzbjTjBvDThJtAM3Mei6AkinPjsLhM
ohbGauVKDjA2vgYQMFAujwAFlBc1o2aSxgkK4xtOEowZozVmyoyTGFegHUeA
uAL54pfEQnGdJTRDYzjWpmgp6Ml+0BQUVOu5P+lvexO/PZz8w9GUn87m7nLO
+fk41345nrvfs/h8QJlfUWtRjbRuSKPUmkyDikFRT1NkbZxH/vW/Rv3w59iv
Pk78bOvdd7bcfefz1B++z9ofIo0Ok8ZFdGYm9BRXjrS16wdGcLWeMpvA4eXC
Suz1dz2J4kpTzQqxWF5bMZBf2pud1hqX2hqbKolNa49O77yf3RWX15uUKU3N
kWZU95aJ+qr7FP1KnZL7BgTHERQZ0iq6lP2pbVmxrcn3JPfvtkWezj/rVnzp
SrV/REd8o7m5m+gYZnvlhGKE0CAWjLBR4CGSWaA6sFMBrElIaAkO6HyWA2Qv
IOjOshVXtVb18Ou5qcU1tgiTy+XZ2dngb1Eo5nV/nBUqlUosFnd0dMCCXJMC
xdXeLEKMK3BXIIRHT5wCygoUcWwh1yUcnAW2BIgr2Cqg02U9qidqcBa44KSm
pIIPrU6rs5PUCU2IcQV3T264P0ngBA4c1YgbDRhoejOuM+E6I67TYlrQTHz8
AMnlDrCxpI0r/mN5mJTVytc0wCjCTKA6o06j1/A1DQguyoAiUJxSmymZgVSj
uJHAzASGkDjCdd4SfIoCKK6zgxNXAmsZacrpyohrCbsn9nNJP3Qqbf+p9H3O
Gfs8y455Vzr71124UX3Rp+LyvZrA5IaYms7apt4WjcGAYKRWr+1TyKq6xQ8a
ko9muB7IPbmv6MhLoW+vvfPaqxE7Xo/+NH4wI2k4N0tVXqCuqVa39aEjiI3L
NYFzxdcsLBTXBYL/voORG4eGDQMDuo5+bVuvulUir6vqL24YLG+RV0lGatuV
9Z3Kpo6RprZBcftgo1qv0pt04LEFw1AMRfQmvcqobVd0NQw2P2hJCBNF3G+J
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
AAAAAAAAAAAAAAAAAAAAeO4/bnOiUQ==
     "], {{0, 364.}, {915., 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag[
    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
     MetaInformation -> <|
      "Comments" -> <|"Software" -> "gnome-screenshot"|>|>],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{676.5, Automatic},
   ImageSizeRaw->{915., 364.},
   PlotRange->{{0, 915.}, {0, 364.}}]], "Input",ExpressionUUID->
  "d61c5f2a-ecd8-49fa-9bc7-a2ccf73c80c5"]
}], "Text",
 CellChangeTimes->{{3.818511423072381*^9, 3.8185115010118523`*^9}, {
   3.818511556501314*^9, 3.8185116007911253`*^9}, 3.818511641084518*^9, {
   3.818511691202632*^9, 
   3.818511692834632*^9}},ExpressionUUID->"05d1d768-d458-4b14-97b2-\
7866e7716e79"],

Cell["Which consists of the following steps:", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 
  3.818511702346891*^9}},ExpressionUUID->"af3cfe4a-fb7a-4267-a1ac-\
75dbcd91401a"],

Cell[CellGroupData[{

Cell["1. Perception", "Item",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 
  3.818512581960203*^9}},ExpressionUUID->"13c0d3bb-6db2-4730-ab35-\
3cfb1a9fe3e5"],

Cell["\<\
We use three fixed kernels to allow the cell  to perceive its \
\[OpenCurlyQuote]local\[CloseCurlyQuote] environment\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 
  3.818512334366872*^9}},ExpressionUUID->"c1586e6a-fc7c-42ef-b8d9-\
d651475ee6b6"],

Cell["In particular we use Sobel kernels to encode the gradient", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 
  3.8185124003365707`*^9}},ExpressionUUID->"bb551d81-2b1b-4631-9c53-\
95a5050898ac"],

Cell[CellGroupData[{

Cell["\<\
and concatenate them with the cell\[CloseCurlyQuote]s identity to give a 16*3 \
= 48 dimensional vector (for each cell)\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 
  3.81851243659704*^9}},ExpressionUUID->"5a999b69-39fb-4d0e-8446-\
5fcf12c536a2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"kernel", "[", "\"\<sobel-x\>\"", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2"}], ",", "0", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"kernel", "[", "\"\<sobel-y\>\"", "]"}], "=", 
   SuperscriptBox[
    RowBox[{"kernel", "[", "\"\<sobel-x\>\"", "]"}], "\[Transpose]"]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"kernel", "[", "\"\<identity\>\"", "]"}], "=", 
    RowBox[{"BoxMatrix", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"conv", "[", "\"\<sobel-x\>\"", "]"}], "=", 
   RowBox[{"ConvolutionLayer", "[", 
    RowBox[{
     RowBox[{"\"\<Weights\>\"", "->", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"KroneckerDelta", "[", 
           RowBox[{"i", ",", "j"}], "]"}], 
          RowBox[{"Reverse", "[", 
           RowBox[{
            RowBox[{"kernel", "[", "\"\<sobel-x\>\"", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "+", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"0", ",", 
           RowBox[{"{", 
            RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "numChannels"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "numChannels"}], "}"}]}], "]"}]}], ",", 
     RowBox[{"\"\<Biases\>\"", "\[Rule]", "None"}], ",", 
     RowBox[{"PaddingSize", "\[Rule]", "1"}], ",", 
     RowBox[{"\"\<Interleaving\>\"", "\[Rule]", "True"}], ",", 
     RowBox[{"LearningRateMultipliers", "\[Rule]", "None"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"conv", "[", "\"\<sobel-y\>\"", "]"}], "=", 
    RowBox[{"ConvolutionLayer", "[", 
     RowBox[{
      RowBox[{"\"\<Weights\>\"", "->", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"KroneckerDelta", "[", 
            RowBox[{"i", ",", "j"}], "]"}], 
           RowBox[{"Reverse", "[", 
            RowBox[{
             RowBox[{"kernel", "[", "\"\<sobel-y\>\"", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "+", 
          RowBox[{"ConstantArray", "[", 
           RowBox[{"0", ",", 
            RowBox[{"{", 
             RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "numChannels"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "numChannels"}], "}"}]}], "]"}]}], ",", 
      RowBox[{"\"\<Biases\>\"", "\[Rule]", "None"}], ",", 
      RowBox[{"PaddingSize", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<Interleaving\>\"", "\[Rule]", "True"}], ",", 
      RowBox[{"LearningRateMultipliers", "\[Rule]", "None"}]}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net", "[", "\"\<perception\>\"", "]"}], "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<sobel-x\>\"", "->", 
       RowBox[{"conv", "[", "\"\<sobel-x\>\"", "]"}]}], ",", 
      RowBox[{"\"\<sobel-y\>\"", "->", 
       RowBox[{"conv", "[", "\"\<sobel-y\>\"", "]"}]}], ",", 
      RowBox[{"\"\<catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "3", "]"}]}]}], "|>"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
       "\"\<sobel-x\>\""}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
       "\"\<sobel-y\>\""}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", 
         "\"\<sobel-x\>\"", ",", "\"\<sobel-y\>\""}], "}"}], "\[Rule]", 
       RowBox[{"\"\<catenate\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", "\"\<percepted\>\"", "]"}]}]}]}], "}"}], ",", 
    
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"width", ",", "height", ",", "numChannels"}], "}"}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.818512467908074*^9, 3.818512471110112*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"9fec43b7-f05e-4128-ae5e-0dbf29d19de1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"net", "[", "\"\<perception\>\"", "]"}], "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"56", ",", "56", ",", "16"}], "}"}]}], "]"}], "]"}], "//", 
  "Dimensions"}]], "Input",
 CellChangeTimes->{{3.818512517918598*^9, 3.8185125334403133`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"eda04a70-5948-4495-bc93-af9f6dff2cbe"]
}, Open  ]],

Cell["\<\
Note this part is fully-initialized (i.e. has no trainable parameters)\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.81851243659704*^9}, {
  3.818512488710101*^9, 3.818512501605937*^9}, {3.818512540012044*^9, 
  3.818512540012166*^9}},ExpressionUUID->"b751051d-4ebc-4c60-9161-\
0415b281ef9b"],

Cell["\<\
Also note that we use Interleaving for convenience (and keep the channels as \
the last tensor dimension)\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.81851243659704*^9}, {
  3.818512488710101*^9, 3.818512501605937*^9}, {3.818512540527011*^9, 
  3.818512577191772*^9}},ExpressionUUID->"fa23d721-2303-4c76-a0fe-\
944192264e62"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2. Update Rule", "Item",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 
  3.818512618910511*^9}},ExpressionUUID->"0ee484bc-eeac-4be1-b4a3-\
7bd858757cd3"],

Cell["\<\
For each cell, we then apply a dense feed-forward network to go from this \
perception vector back to a state vector\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 
  3.818512749324685*^9}},ExpressionUUID->"6f0d4eca-bb2b-4e84-a0f1-\
31897f119b52"],

Cell["\<\
In particular we use a 128 Dense layer, followed by a ReLU activation layer, \
and a final 16 Dense layer\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512754849477*^9}, {3.81851279848423*^9, 
  3.818512858154705*^9}},ExpressionUUID->"4a201d7b-bf1a-4c55-aec5-\
bfe4adfd4418"],

Cell[CellGroupData[{

Cell[TextData[{
 "We then use  ",
 Cell[BoxData[
  TemplateBox[{"\"NetMapOperator\"", "paclet:ref/NetMapOperator"},
   "HyperlinkPaclet"]],ExpressionUUID->"37021618-60a3-4872-a602-215563c9b21b"],
 " twice to apply this at each cell"
}], "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512754849477*^9}, {3.81851279848423*^9, 
  3.8185129062302856`*^9}},ExpressionUUID->"4b00f3c8-f944-4267-bb46-\
a203e8895007"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "[", "\"\<update\>\"", "]"}], "=", 
  RowBox[{"NetMapOperator", "[", 
   RowBox[{"NetMapOperator", "[", 
    RowBox[{"NetChain", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"LinearLayer", "[", 
         RowBox[{"numChannels", " ", "8"}], "]"}], ",", "Ramp", ",", 
        RowBox[{"LinearLayer", "[", 
         RowBox[{"numChannels", ",", 
          RowBox[{"\"\<Weights\>\"", "\[Rule]", "0"}]}], "]"}]}], "}"}], ",", 
      
      RowBox[{"\"\<Input\>\"", "\[Rule]", 
       RowBox[{"numChannels", " ", "3"}]}]}], "]"}], "]"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.818512777410714*^9, 3.818512796444355*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"66364680-2135-44f5-8a2d-8f9cecd4ce8e"]
}, Open  ]],

Cell["\<\
Note we\[CloseCurlyQuote]ve initialized the weights of the last dense layer \
to 0. This is to ensure \[OpenCurlyQuote]do-nothing\[CloseCurlyQuote] initial \
behavior and keep the gradients low.\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.81851243659704*^9}, {
  3.818512488710101*^9, 3.818512501605937*^9}, {3.818512540012044*^9, 
  3.818512540012166*^9}, {3.818513075713346*^9, 3.818513126426053*^9}, {
  3.818513165727839*^9, 
  3.818513165728281*^9}},ExpressionUUID->"7b09e80d-4e48-4f3d-9989-\
8aaf3e9014cf"],

Cell[CellGroupData[{

Cell["Also note this is the only layer with trainable parameters", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.81851243659704*^9}, {
  3.818512488710101*^9, 3.818512501605937*^9}, {3.818512540012044*^9, 
  3.818512540012166*^9}, {3.818513075713346*^9, 3.818513126426053*^9}, {
  3.81851316582728*^9, 
  3.8185131860991488`*^9}},ExpressionUUID->"d18ee3b6-f67d-466d-b6fe-\
0a7afbab2ef1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"net", "[", "\"\<perception\>\"", "]"}], "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"56", ",", "56", ",", "16"}], "}"}]}], "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NetInitialize", "[", 
    RowBox[{"net", "[", "\"\<update\>\"", "]"}], "]"}], "[", "%", "]"}], "//",
   "Dimensions"}]}], "Input",
 CellChangeTimes->{{3.818513137270825*^9, 3.818513139666483*^9}, {
  3.818513208700239*^9, 3.818513222588676*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"212a975e-e66e-4d9c-bf62-bb7d4e063ba1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3. Dropout layer (per cell)", "Item",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512618910511*^9}, {3.818513278434306*^9, 
  3.818513290496519*^9}},ExpressionUUID->"ce58bc19-ddf2-4941-ad9e-\
8f0dcc653cb1"],

Cell[CellGroupData[{

Cell["\<\
Next, we apply a per cell Dropout layer to simulate the lack of a global \
clock in self-organizing systems (see blog post for more details)\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512618910511*^9}, {3.818513278434306*^9, 
  3.818513299914135*^9}, {3.81851334343384*^9, 
  3.818513380289859*^9}},ExpressionUUID->"2bf3889c-a9c3-4182-935f-\
ba3194dacb12"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "[", "\"\<cell-dropout\>\"", "]"}], "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NetArrayLayer", "[", 
      RowBox[{
       RowBox[{"\"\<Array\>\"", "\[Rule]", 
        RowBox[{"ConstantArray", "[", 
         RowBox[{
          RowBox[{"1", "/", "2"}], ",", 
          RowBox[{"{", 
           RowBox[{"width", ",", "height"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"LearningRateMultipliers", "\[Rule]", "0"}]}], "]"}], ",", 
     RowBox[{"DropoutLayer", "[", "]"}], ",", 
     RowBox[{"ReplicateLayer", "[", 
      RowBox[{"numChannels", ",", "3"}], "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{3.818513319200354*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"e0850b30-f209-4c00-b7e1-e85575f12ea5"],

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"net", "[", "\"\<cell-dropout\>\"", "]"}], "[", "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.818513498153348*^9, 3.8185135032338743`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"61573687-1bca-4d28-9aee-5ae5cd85989b"],

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"net", "[", "\"\<cell-dropout\>\"", "]"}], "[", 
    RowBox[{"NetEvaluationMode", "\[Rule]", "\"\<Train\>\""}], "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.81851342556175*^9, 3.8185134783835382`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"f7dffe81-302e-4a0f-9a8c-c8b434bc9cec"]
}, Open  ]],

Cell[TextData[{
 "Note we used a constant array of 1/2, since \[LineSeparator]DropoutLayer \
sets the input elements to zero with probability ",
 Cell[BoxData[
  StyleBox["p", "TI"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "c445b119-654b-4b36-955f-bfbebd3b0b79"],
 " during training, multiplying the remainder by ",
 Cell[BoxData[
  RowBox[{"1", "/", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     StyleBox["p", "TI"]}], ")"}]}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "7d4c6000-707b-4177-997e-98daf98362ee"],
 ", \[LineSeparator]and we used the default  p=1/2"
}], "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512618910511*^9}, {3.818513278434306*^9, 
  3.818513299914135*^9}, {3.81851334343384*^9, 3.818513380289859*^9}, {
  3.818659225387384*^9, 3.818659281853856*^9}, {3.819785577146277*^9, 
  3.819785583132578*^9}},ExpressionUUID->"a0f82ece-c985-418c-b8be-\
72f5c931160d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["4. Living cell mask", "Item",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512618910511*^9}, {3.818513278434306*^9, 
  3.818513290496519*^9}, {3.818513388049714*^9, 
  3.818513393641758*^9}},ExpressionUUID->"abbbcdd2-3fe6-492b-82b2-\
a18a20ec271e"],

Cell[CellGroupData[{

Cell["\<\
And finally, we apply a pre-update and post-update living cell mask\
\>", "Subitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512618910511*^9}, {3.818513278434306*^9, 
  3.818513299914135*^9}, {3.81851334343384*^9, 3.818513398961626*^9}, {
  3.818513585105322*^9, 
  3.8185136014148703`*^9}},ExpressionUUID->"f0773fa0-aff5-402c-8e1f-\
17600d414bec"],

Cell[CellGroupData[{

Cell["where we\[CloseCurlyQuote]ve defined \[OpenCurlyQuote]living\
\[CloseCurlyQuote] as either \[OpenCurlyQuote]mature\[CloseCurlyQuote] or \
\[OpenCurlyQuote]growing\[CloseCurlyQuote]", "Subsubitem",
 CellChangeTimes->{{3.818512289566124*^9, 3.818512292518613*^9}, {
  3.81851258162405*^9, 3.818512618910511*^9}, {3.818513278434306*^9, 
  3.818513299914135*^9}, {3.81851334343384*^9, 3.818513398961626*^9}, {
  3.818513585105322*^9, 
  3.8185136176795187`*^9}},ExpressionUUID->"17bcd126-8235-40fe-990b-\
ebcd74ac019a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "[", "\"\<living\>\"", "]"}], "=", 
  RowBox[{"FunctionLayer", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"PartLayer", "[", 
       RowBox[{"{", 
        RowBox[{"All", ",", "All", ",", "1"}], "}"}], "]"}], "[", 
      RowBox[{
       RowBox[{"PoolingLayer", "[", 
        RowBox[{"3", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", "1"}], ",", 
         RowBox[{"\"\<Input\>\"", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"width", ",", "height", ",", "1"}], "}"}]}], ",", 
         RowBox[{"Interleaving", "\[Rule]", "True"}]}], "]"}], "[", 
       RowBox[{
        RowBox[{"PartLayer", "[", 
         RowBox[{"{", 
          RowBox[{"All", ",", "All", ",", 
           RowBox[{"4", ";;", "4"}]}], "}"}], "]"}], "[", "#", "]"}], "]"}], 
      "]"}], ">", "0.1"}], "&"}], "]"}]}]], "Input",
 CellChangeTimes->{3.8185136272494392`*^9},
 CellLabel->"In[27]:=",ExpressionUUID->"596743fa-401b-45f0-98df-437219b6596a"],

Cell[BoxData[
 RowBox[{"Image", "[", 
  RowBox[{
   RowBox[{"net", "[", "\"\<living\>\"", "]"}], "[", 
   RowBox[{"ImageData", "[", 
    RowBox[{"generationOnePokemonImgs", "[", 
     RowBox[{"[", "25", "]"}], "]"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.818513678833671*^9, 3.818513711234274*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"a97de355-0d7a-49e1-a661-464d2922651e"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["Putting it all together, we have our single update cell net:", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 
  3.818513745122015*^9}},ExpressionUUID->"76440cb2-8f91-4ac5-8cb5-\
de21816d6b97"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "[", "\"\<single-update\>\"", "]"}], "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<perception\>\"", "->", 
       RowBox[{"net", "[", "\"\<perception\>\"", "]"}]}], ",", 
      RowBox[{"\"\<update\>\"", "\[Rule]", 
       RowBox[{"net", "[", "\"\<update\>\"", "]"}]}], ",", 
      RowBox[{"\"\<cell-dropout\>\"", "\[Rule]", 
       RowBox[{"net", "[", "\"\<cell-dropout\>\"", "]"}]}], ",", 
      RowBox[{"\"\<dot-plus\>\"", "\[Rule]", 
       RowBox[{"FunctionLayer", "[", 
        RowBox[{"Apply", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#1", " ", "#2"}], "+", "#3"}], "&"}], "]"}], "]"}]}], ",", 
      RowBox[{"\"\<pre-living\>\"", "\[Rule]", 
       RowBox[{"net", "[", "\"\<living\>\"", "]"}]}], ",", 
      RowBox[{"\"\<post-living\>\"", "\[Rule]", 
       RowBox[{"net", "[", "\"\<living\>\"", "]"}]}], ",", 
      RowBox[{"\"\<times\>\"", "\[Rule]", 
       RowBox[{"FunctionLayer", "[", 
        RowBox[{"Apply", "[", 
         RowBox[{
          RowBox[{"#1", " ", "#2", "#3"}], "&"}], "]"}], "]"}]}]}], "|>"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
       "\"\<pre-living\>\""}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
       RowBox[{"\"\<perception\>\"", "->", "\"\<update\>\""}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         AdjustmentBox["\"\<cell-dropout\>\"",
          
          BoxMargins->{{-0.07271074755737332, 0.07271074755737332}, {0., 
           0.}}], 
         AdjustmentBox[",",
          
          BoxMargins->{{-0.07271074755737332, 0.07271074755737332}, {0., 
           0.}}], "\"\<update\>\"", 
         AdjustmentBox[",",
          
          BoxMargins->{{-0.07271074755737332, 0.07271074755737332}, {0., 
           0.}}], 
         RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}]}], 
        AdjustmentBox["}",
         BoxMargins->{{-0.07271074755737332, 0.07271074755737332}, {0., 
          0.}}]}], "->", 
       RowBox[{"\"\<dot-plus\>\"", "->", "\"\<post-living\>\""}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<pre-living\>\"", ",", "\"\<post-living\>\"", ",", 
         "\"\<dot-plus\>\""}], "}"}], "\[Rule]", 
       RowBox[{"\"\<times\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", "\"\<Output\>\"", "]"}]}]}]}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"width", ",", "height", ",", "numChannels"}], "}"}]}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"width", ",", "height", ",", "numChannels"}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[29]:=",ExpressionUUID->"670d7677-d892-43d7-8b84-47bc30bdd7c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NetInitialize", "[", 
    RowBox[{"net", "[", "\"\<single-update\>\"", "]"}], "]"}], "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"56", ",", "56", ",", "16"}], "}"}]}], "]"}], "]"}], "//", 
  "Dimensions"}]], "Input",
 CellChangeTimes->{{3.818513772673892*^9, 3.818513785178081*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"1baa47bc-becd-4cd6-9886-079b9d626dc3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Nested Network", "Section",
 CellChangeTimes->{{3.818511409735784*^9, 3.818511411335927*^9}, {
  3.818511533012868*^9, 3.8185115406932783`*^9}, {3.818513792697876*^9, 
  3.818513805337872*^9}, {3.8185140190188704`*^9, 
  3.818514023939152*^9}},ExpressionUUID->"d19bd63b-d9ef-4f14-bc33-\
67105738502c"],

Cell[TextData[{
 "We now wish to nest this network, using the same set of trainable \
parameters.\n ",
 Cell[BoxData[
  TemplateBox[{"\"NetNestOperator\"", "paclet:ref/NetNestOperator"},
   "HyperlinkPaclet"]],ExpressionUUID->"e7200513-b33c-4b1d-a46d-c67d61d816f3"],
 " seems like a perfect fit:"
}], "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
   3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
   3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, 
   3.851864290921343*^9},ExpressionUUID->"0af5f690-4f84-4250-9e4d-\
16a188c442eb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "[", "\"\<nested\>\"", "]"}], "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NetNestOperator", "[", 
      RowBox[{
       RowBox[{"net", "[", "\"\<single-update\>\"", "]"}], ",", "64"}], "]"}],
      ",", 
     RowBox[{"PartLayer", "[", 
      RowBox[{"{", 
       RowBox[{"All", ",", "All", ",", 
        RowBox[{";;", "4"}]}], "}"}], "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{3.818514120724539*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"2ead90f6-d50d-4e25-8ec9-e663f7bc0cdc"],

Cell["\<\
Note that after we iterate n times, we drop the hidden layers (to allow \
direct loss comparison with the visible channels of the target image)\
\>", "Subitem",
 CellChangeTimes->{{3.818514132037798*^9, 
  3.818514192356412*^9}},ExpressionUUID->"168c8294-c306-457a-96ca-\
cb6585f72161"],

Cell[CellGroupData[{

Cell["Training", "Subsection",
 CellChangeTimes->{{3.818514216813692*^9, 
  3.8185142214934053`*^9}},ExpressionUUID->"55dfce9a-e157-44d7-8c05-\
e1c0c7218bc5"],

Cell["\<\
We could now train this starting from a single seed against a single target \
Image:\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 
  3.818514271373528*^9}},ExpressionUUID->"d9f88634-5976-483c-9772-\
d65cf1522ae8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"singleSeed", "=", 
   RowBox[{"Normal", "@", 
    RowBox[{"SparseArray", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"width", "/", "2"}], ",", 
           RowBox[{"height", "/", "2"}], ",", "i"}], "}"}], "\[Rule]", "1"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "4", ",", "numChannels"}], "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"width", ",", "height", ",", "numChannels"}], "}"}]}], 
     "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"targetPokemon", "=", 
   RowBox[{"ImageData", "[", 
    RowBox[{"generationOnePokemonImgs", "[", 
     RowBox[{"[", "6", "]"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.818514248061767*^9, 3.81851424898905*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"5252b675-10d3-428e-90da-2085237de856"],

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{"NetTrain", "[", 
   RowBox[{
    RowBox[{"net", "[", "\"\<nested\>\"", "]"}], ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Input\>\"", "\[Rule]", 
       RowBox[{"{", "singleSeed", "}"}]}], ",", 
      RowBox[{"\"\<Target\>\"", "\[Rule]", 
       RowBox[{"{", "targetPokemon", "}"}]}]}], "|>"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "10"}], ",", 
    RowBox[{"RandomSeeding", "\[Rule]", "1996"}]}], "]"}], 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{
  3.818514280999319*^9, {3.818659513968412*^9, 
   3.818659516336213*^9}},ExpressionUUID->"162344cc-59e3-49b7-ac8b-\
6922a50b0375"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parallel Nesting", "Subsection",
 CellChangeTimes->{{3.818514386591069*^9, 
  3.818514395805378*^9}},ExpressionUUID->"b6843923-e536-428f-817f-\
a91d15053b1a"],

Cell["\<\
However, while this will likely learn the target image well - the fixed \
number of iterations will mean it\[CloseCurlyQuote]ll have very little \
predictive power beyond the 64 number of iterations. I.e. the growth pattern \
will not be stable.

The authors of the blog post deal with this in two ways:\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}},ExpressionUUID->"0e3761c6-ab00-4ac3-b688-\
645d5cc7ce79"],

Cell["\<\
Using a Pool/Batch technique in their second \[OpenCurlyQuote]persistent\
\[CloseCurlyQuote] experiment\
\>", "Subitem",
 CellChangeTimes->{{3.81851447098253*^9, 
  3.818514496684842*^9}},ExpressionUUID->"951f7e38-940b-4d4e-9a6f-\
f9ff05420f06"],

Cell[CellGroupData[{

Cell["\<\
Nesting for a random number of iterations between 64 and 96 iterations\
\>", "Subitem",
 CellChangeTimes->{{3.81851447098253*^9, 
  3.8185145206770887`*^9}},ExpressionUUID->"97e2b914-2b5d-41a8-a6e2-\
22be3c58fd4b"],

Cell["\<\
This should at-least ensure the system is stable for a limited number of \
iterations\
\>", "Subsubitem",
 CellChangeTimes->{{3.81851447098253*^9, 
  3.818514539854784*^9}},ExpressionUUID->"9caa5eb8-c87a-465a-972a-\
b2739ad5f83c"]
}, Open  ]],

Cell[TextData[{
 "We\[CloseCurlyQuote]ll use a (much more expensive) variant of the second \
technique since I couldn\[CloseCurlyQuote]t figure out how to get ",
 Cell[BoxData[
  TemplateBox[{"\"NetNestOperator\"", "paclet:ref/NetNestOperator"},
   "HyperlinkPaclet"]],ExpressionUUID->"5f53c90e-53d5-48f9-be67-89001b80f377"],
 " take a random number efficiently."
}], "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}, {3.818514548302979*^9, 3.8185145964179707`*^9}, {
  3.851865599294628*^9, 
  3.8518656008794203`*^9}},ExpressionUUID->"b1ac948d-d1b7-4aa0-bebc-\
7852e4705e3e"],

Cell["\<\
We\[CloseCurlyQuote]ll nest three nets in parallel for 50, 64, and 78 \
iterations each and assign the maximum deviation as the current loss function.\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}, {3.818514548302979*^9, 3.8185145964179707`*^9}, {
  3.8185147141548977`*^9, 
  3.818514757715315*^9}},ExpressionUUID->"7473c52f-99d6-4fd8-846d-\
5208824274ef"],

Cell["\<\
This should at-least ensure the system is stable for a limited number of \
iterations\
\>", "Subsubitem",
 CellChangeTimes->{{3.81851447098253*^9, 
  3.818514539854784*^9}},ExpressionUUID->"1e1aa4f1-a496-48c1-a77d-\
bc0b2fa1199e"],

Cell["\<\
We must ensure our parallel nested nets will share trainable parameters:\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}, {3.818514548302979*^9, 3.8185145964179707`*^9}, {
  3.8185147141548977`*^9, 
  3.818514798499524*^9}},ExpressionUUID->"0cbcf96c-f551-4a04-9096-\
d2aa10348a75"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"net", "[", "\"\<single-shared\>\"", "]"}], "=", 
   RowBox[{"NetInsertSharedArrays", "[", 
    RowBox[{"net", "[", "\"\<single-update\>\"", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net", "[", "\"\<nested-parallel\>\"", "]"}], "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"Association", "[", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<nest-\>\"", "<>", 
            RowBox[{"ToString", "[", "#", "]"}]}], ")"}], "\[Rule]", 
          RowBox[{"NetGraph", "[", 
           RowBox[{
            RowBox[{"<|", 
             RowBox[{
              RowBox[{"\"\<nested\>\"", "->", 
               RowBox[{"NetNestOperator", "[", 
                RowBox[{
                 RowBox[{"net", "[", "\"\<single-shared\>\"", "]"}], ",", 
                 "#"}], "]"}]}], ",", 
              RowBox[{"\"\<part\>\"", "->", 
               RowBox[{"PartLayer", "[", 
                RowBox[{"{", 
                 RowBox[{"All", ",", "All", ",", 
                  RowBox[{";;", "4"}]}], "}"}], "]"}]}], ",", 
              RowBox[{"\"\<loss\>\"", "->", 
               RowBox[{"MeanSquaredLossLayer", "[", "]"}]}]}], "|>"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<nested\>\"", "\[Rule]", 
              RowBox[{"\"\<part\>\"", "->", "\"\<loss\>\""}]}], "}"}]}], 
           "]"}]}], "&"}], "/@", 
        RowBox[{"Subdivide", "[", 
         RowBox[{"50", ",", "78", ",", "2"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<max\>\"", "\[Rule]", 
         RowBox[{"ThreadingLayer", "[", "Max", "]"}]}], "}"}]}], "]"}], "]"}],
     ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<nest-50\>\"", ",", "\"\<nest-64\>\"", ",", "\"\<nest-78\>\""}], 
       "}"}], "\[Rule]", 
      RowBox[{"\"\<max\>\"", "->", 
       RowBox[{"NetPort", "[", "\"\<Loss\>\"", "]"}]}]}], "}"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8185148104446983`*^9, 3.8185148105840273`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"1b41c198-4ecc-4edc-96f2-cee07b8ee7fd"],

Cell["\<\
We ensure we only have the one set of trainable parameters (which only amount \
to ~8k)\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}, {3.818514548302979*^9, 3.8185145964179707`*^9}, {
  3.8185147141548977`*^9, 3.818514798499524*^9}, {3.818514832844393*^9, 
  3.8185148786291857`*^9}},ExpressionUUID->"0cd0c6cb-498f-440f-9e11-\
6b792a28a175"],

Cell[BoxData[{
 RowBox[{"Information", "[", 
  RowBox[{
   RowBox[{"NetInitialize", "[", 
    RowBox[{"net", "[", "\"\<nested-parallel\>\"", "]"}], "]"}], ",", 
   "\"\<ArraysDimensions\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Information", "[", 
  RowBox[{
   RowBox[{"net", "[", "\"\<nested-parallel\>\"", "]"}], ",", 
   "\"\<ArraysLearningRateMultipliers\>\""}], "]"}]}], "Input",
 CellChangeTimes->{{3.81851488702106*^9, 3.8185148871584044`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"840e799c-7482-4032-8943-fd3ae2f81b24"],

Cell["\<\
We train a net for each target image (~1hr per net on  my GPU) and obtain:\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}, {3.818514548302979*^9, 3.8185145964179707`*^9}, {
  3.8185147141548977`*^9, 3.818514798499524*^9}, {3.818514832844393*^9, 
  3.8185148786291857`*^9}, {3.8185149755015993`*^9, 3.818515036006954*^9}, {
  3.818515076967311*^9, 
  3.818515079287026*^9}},ExpressionUUID->"32eaeb98-fbf1-4d50-ad18-\
c5bcaf8f3bf8"],

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{"NetTrain", "[", 
   RowBox[{
    RowBox[{"net", "[", "\"\<nested-parallel\>\"", "]"}], ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Input\>\"", "\[Rule]", 
       RowBox[{"{", "singleSeed", "}"}]}], ",", 
      RowBox[{"\"\<Target\>\"", "\[Rule]", 
       RowBox[{"{", "targetPokemon", "}"}]}]}], "|>"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "25000"}], ",", 
    RowBox[{"RandomSeeding", "\[Rule]", "1996"}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}], 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.818514935217626*^9, 3.818514961197528*^9}, {
  3.8185150550949917`*^9, 
  3.818515061974812*^9}},ExpressionUUID->"651c0f1c-9459-4c57-bc38-\
d2699948da6f"],

Cell[BoxData[
 RowBox[{"CloudImport", "[", 
  RowBox[{
  "\"\<https://www.wolframcloud.com/obj/gvarnavi/gifs/differentiable-cellular-\
automata-animation.gif\>\"", ",", "\"\<Animation\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.819786192109997*^9, 3.819786227890388*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"fdfdd3ca-fa9b-45d8-8a59-0efefb64093d"],

Cell["\<\
As we can see - while some growth patterns are stable (like Charizard, \
Venusaur, and Arbok), others like Rattata, Caterpie, and Spearow are not\
\>", "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
  3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
  3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
  3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
  3.81851446955212*^9}, {3.818514548302979*^9, 3.8185145964179707`*^9}, {
  3.8185147141548977`*^9, 3.818514798499524*^9}, {3.818514832844393*^9, 
  3.8185148786291857`*^9}, {3.8185149755015993`*^9, 3.818515036006954*^9}, {
  3.818515076967311*^9, 3.818515079287026*^9}, {3.818515171040354*^9, 
  3.818515281481512*^9}},ExpressionUUID->"709f418e-b11e-4282-8fe9-\
93083cf8f85e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Folded Network", "Section",
 CellChangeTimes->{{3.818511409735784*^9, 3.818511411335927*^9}, {
  3.818511533012868*^9, 3.8185115406932783`*^9}, {3.818513792697876*^9, 
  3.818513805337872*^9}, {3.8185140190188704`*^9, 3.818514023939152*^9}, {
  3.81851529772126*^9, 
  3.8185152983693247`*^9}},ExpressionUUID->"0d97ad07-18df-4b07-9a35-\
1688b3f18ee3"],

Cell[TextData[{
 "I get the sense we ",
 StyleBox["cheated. \n",
  FontSlant->"Italic"],
 "The blog post mentions back propagation through time in training this so I \
assume one ought to use ",
 Cell[BoxData[
  TemplateBox[{"\"NetFoldOperator\"", "paclet:ref/NetFoldOperator"},
   "HyperlinkPaclet"]],ExpressionUUID->"8270f92a-4e35-47a6-a769-3357b44f9905"],
 " instead of ",
 Cell[BoxData[
  TemplateBox[{"\"NetNestOperator\"", "paclet:ref/NetNestOperator"},
   "HyperlinkPaclet"]],ExpressionUUID->"1eda58bf-aca5-4289-92e8-479aa80fdd48"],
 ".\n\nNaively, it seems to me that one could also solve the constant \
iterations problem outline above, by providing a (dummy) \
\[OpenCurlyDoubleQuote]Iterations\[CloseCurlyDoubleQuote] sequence of 1s with \
the required length. "
}], "Text",
 CellChangeTimes->{{3.8185116743297997`*^9, 3.818511702346891*^9}, {
   3.818513732193461*^9, 3.818513745122015*^9}, {3.818514030378931*^9, 
   3.8185140343552723`*^9}, {3.8185140714980507`*^9, 3.818514114922675*^9}, {
   3.818514227452839*^9, 3.818514271373528*^9}, {3.818514354046915*^9, 
   3.81851446955212*^9}, {3.818514548302979*^9, 3.8185145964179707`*^9}, {
   3.8185147141548977`*^9, 3.818514798499524*^9}, {3.818514832844393*^9, 
   3.8185148786291857`*^9}, {3.8185149755015993`*^9, 3.818515036006954*^9}, {
   3.818515076967311*^9, 3.818515079287026*^9}, {3.818515171040354*^9, 
   3.8185154140963182`*^9}, {3.818515452826192*^9, 3.818515509570326*^9}, {
   3.818575718645668*^9, 3.818575718805747*^9}, {3.818575759206249*^9, 
   3.818575782222622*^9}, {3.818576418019964*^9, 3.818576428287108*^9}, {
   3.818659326094056*^9, 3.818659346758048*^9}, 
   3.819785670669161*^9},ExpressionUUID->"24cf4ccb-a8d5-4930-abcd-\
2e52af9dd71c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"net", "[", "\"\<folded\>\"", "]"}], "=", 
    RowBox[{"NetFoldOperator", "[", 
     RowBox[{"NetGraph", "[", 
      RowBox[{
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<single-update\>\"", "\[Rule]", 
          RowBox[{"net", "[", "\"\<single-update\>\"", "]"}]}], ",", 
         RowBox[{"\"\<dummy-input\>\"", "\[Rule]", 
          RowBox[{"ThreadingLayer", "[", 
           RowBox[{"Times", ",", "1"}], "]"}]}]}], "|>"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"NetPort", "[", "\"\<State\>\"", "]"}], ",", 
            RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}]}], "}"}], 
          "\[Rule]", "\"\<dummy-input\>\""}], ",", 
         RowBox[{
         "\"\<dummy-input\>\"", "\[Rule]", "\"\<single-update\>\""}]}], "}"}],
        ",", 
       RowBox[{"\"\<State\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"width", ",", "height", ",", "numChannels"}], "}"}]}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"width", ",", "height", ",", "numChannels"}], "}"}]}], ",", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net", "[", "\"\<graph\>\"", "]"}], "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<folded\>\"", "\[Rule]", 
       RowBox[{"net", "[", "\"\<folded\>\"", "]"}]}], ",", 
      RowBox[{"\"\<loss\>\"", "\[Rule]", 
       RowBox[{"MeanSquaredLossLayer", "[", "]"}]}], ",", 
      RowBox[{"\"\<state-seq\>\"", "->", 
       RowBox[{"SequenceLastLayer", "[", "]"}]}], ",", 
      RowBox[{"\"\<part\>\"", "->", 
       RowBox[{"PartLayer", "[", 
        RowBox[{"{", 
         RowBox[{"All", ",", "All", ",", 
          RowBox[{";;", "4"}]}], "}"}], "]"}]}]}], "|>"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Iterations\>\"", "]"}], "\[Rule]", 
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<folded\>\"", ",", "\"\<Input\>\""}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<InitialState\>\"", "]"}], "\[Rule]", 
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<folded\>\"", ",", "\"\<State\>\""}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<folded\>\"", ",", "\"\<Output\>\""}], "]"}], "\[Rule]", 
       RowBox[{"\"\<state-seq\>\"", "->", 
        RowBox[{"\"\<part\>\"", "->", 
         RowBox[{"NetPort", "[", "\"\<Prediction\>\"", "]"}]}]}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<part\>\"", ",", 
         RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}]}], "}"}], "\[Rule]", 
       "\"\<loss\>\""}]}], "}"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",\

 CellChangeTimes->{{3.8184051101184387`*^9, 3.818405119005425*^9}, {
  3.818575880110058*^9, 3.818575892065795*^9}, {3.818576068244289*^9, 
  3.818576177515418*^9}, {3.8185763215268087`*^9, 3.8185763502543697`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"502e141e-8e1d-41e8-a520-b04b09975a1d"],

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"net", "[", "\"\<graph-trained\>\"", "]"}], "=", 
    RowBox[{"NetTrain", "[", 
     RowBox[{
      RowBox[{"net", "[", "\"\<graph\>\"", "]"}], ",", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<InitialState\>\"", "\[Rule]", 
         RowBox[{"Table", "[", 
          RowBox[{"singleSeed", ",", "3"}], "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "\[Rule]", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"targetPokemon", ",", "3"}], "]"}]}], ",", 
        RowBox[{"\"\<Iterations\>\"", "->", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ConstantArray", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"RandomInteger", "[", 
                RowBox[{"{", 
                 RowBox[{"64", ",", "96"}], "}"}], "]"}], ",", "1"}], "}"}]}],
             "]"}], ",", "3"}], "]"}]}]}], "|>"}], ",", 
      RowBox[{"MaxTrainingRounds", "\[Rule]", "10000"}], ",", 
      RowBox[{"RandomSeeding", "\[Rule]", "1996"}], ",", 
      RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.81851553305954*^9, 3.818515541754099*^9}, {
   3.8185762196253147`*^9, 3.818576246387735*^9}, {3.818576306757676*^9, 
   3.818576312564877*^9}, {3.818576358228922*^9, 3.818576384403867*^9}, {
   3.818576464838314*^9, 3.81857647589393*^9}, 
   3.8185792575700207`*^9},ExpressionUUID->"f619f914-191a-423a-b80f-\
3de044075494"],

Cell["\<\
This takes longer to train - but gives similar results.
The growth patterns showed good stability b/w the \[OpenCurlyQuote]seen\
\[CloseCurlyQuote] training set (i.e. 64-96 iterations), but were unstable \
afterwards..\
\>", "Text",
 CellChangeTimes->{
  3.818659352044465*^9, {3.818659402974571*^9, 3.818659501128038*^9}, {
   3.818737321634192*^9, 3.8187373218748417`*^9}, 3.818757413174541*^9, {
   3.819785681597157*^9, 3.8197856832367973`*^9}, {3.851865719704167*^9, 
   3.851865732503785*^9}},ExpressionUUID->"9253afc2-fc66-42ad-a562-\
1fcaf03cf706"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440, 786},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
PrivateNotebookOptions->{"CloudPublishPath"->"/Published/03_differentiable-\
cellular-automata.nb"},
FrontEndVersion->"13.0 for Linux x86 (64-bit) (December 2, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"ac058d56-8cc4-4a5d-923a-ad3ffc6d93ef"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 395, 7, 98, "Title",ExpressionUUID->"46f0ebb6-da31-46ef-9c45-71befa538d10"],
Cell[CellGroupData[{
Cell[1000, 33, 261, 4, 68, "Section",ExpressionUUID->"de87d933-2457-4f35-a065-f6c53bb382a9"],
Cell[1264, 39, 839, 12, 29, "Input",ExpressionUUID->"4361f01e-889f-4967-a9db-ea2b92bf8c25"],
Cell[2106, 53, 208, 6, 35, "Text",ExpressionUUID->"3f2f9f5b-4803-4d2b-977c-2cee168d949e"],
Cell[2317, 61, 500, 9, 29, "Input",ExpressionUUID->"aee06d82-363b-4b0f-a7a1-50dc2a947075"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2854, 75, 86, 0, 68, "Section",ExpressionUUID->"ffc3a815-1b09-436c-8413-03ed89068b8f"],
Cell[2943, 77, 1169, 21, 81, "Text",ExpressionUUID->"274cc22a-5f52-4754-bb3c-5a7b686103b0"],
Cell[CellGroupData[{
Cell[4137, 102, 94, 0, 54, "Subsection",ExpressionUUID->"57054323-69c2-4e41-9de6-1c1db67f2b72"],
Cell[4234, 104, 78163, 1298, 600, "Text",ExpressionUUID->"be87c24d-e61a-4fde-8a92-bfc61156c54f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[82446, 1408, 158, 3, 68, "Section",ExpressionUUID->"a4014d4e-489b-4225-82b1-e9bb96e6bf22"],
Cell[82607, 1413, 370, 8, 35, "Text",ExpressionUUID->"c0c662e2-dfa7-4609-b607-9d62ca8fb63e"],
Cell[82980, 1423, 640, 15, 92, "Input",ExpressionUUID->"937d354b-38ae-4bca-9e60-2deb70ae1199"],
Cell[83623, 1440, 1817, 43, 119, "Input",ExpressionUUID->"f22bd225-daa9-49fa-8eb2-4e18e2fa912e"],
Cell[85443, 1485, 2514, 55, 139, "Input",ExpressionUUID->"e6fd4f58-1fd2-434d-93b1-36f675103a46"]
}, Open  ]],
Cell[CellGroupData[{
Cell[87994, 1545, 155, 3, 68, "Section",ExpressionUUID->"92284798-39ce-4e4d-8f72-326f391b94b9"],
Cell[CellGroupData[{
Cell[88174, 1552, 267, 5, 32, "Item",ExpressionUUID->"fedd8ed3-9942-4ea1-84b3-88b9232bdd8e"],
Cell[88444, 1559, 288, 5, 26, "Subitem",ExpressionUUID->"ff160c33-be6c-4e95-b5c9-59647d33f4cb"],
Cell[88735, 1566, 291, 6, 26, "Subitem",ExpressionUUID->"14de067e-7630-4dd1-b205-980f225e3398"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89063, 1577, 277, 5, 32, "Item",ExpressionUUID->"7bccf2d0-d66c-4991-9603-bdb524aebe16"],
Cell[89343, 1584, 329, 5, 26, "Subitem",ExpressionUUID->"bb02116f-bee2-41d6-a0d8-9704bb12938f"],
Cell[89675, 1591, 448, 8, 26, "Subitem",ExpressionUUID->"2e48e69c-b34f-4638-832b-3ccf0fe3b9e5"],
Cell[90126, 1601, 418, 8, 26, "Subitem",ExpressionUUID->"1889e217-fceb-4838-8ae9-2c759a868a23"]
}, Open  ]],
Cell[90559, 1612, 599, 12, 58, "Text",ExpressionUUID->"41981c75-94e7-4cb7-a4b9-e80750700b38"],
Cell[91161, 1626, 1580, 44, 133, "Input",ExpressionUUID->"781cb364-bb34-4155-8583-d29392ea623c"],
Cell[92744, 1672, 919, 20, 113, "Input",ExpressionUUID->"e6fc06ae-e2bb-4c74-9158-207f33010750"],
Cell[93666, 1694, 818, 19, 51, "Input",ExpressionUUID->"da9a5f67-ce60-4fbc-94ab-86d2bab9d01a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94521, 1718, 277, 4, 68, "Section",ExpressionUUID->"0b13ca31-fcd1-4e40-872c-01cc73b40fca"],
Cell[94801, 1724, 63107, 1042, 327, "Text",ExpressionUUID->"05d1d768-d458-4b14-97b2-7866e7716e79"],
Cell[157911, 2768, 182, 3, 35, "Text",ExpressionUUID->"af3cfe4a-fb7a-4267-a1ac-75dbcd91401a"],
Cell[CellGroupData[{
Cell[158118, 2775, 203, 4, 32, "Item",ExpressionUUID->"13c0d3bb-6db2-4730-ab35-3cfb1a9fe3e5"],
Cell[158324, 2781, 269, 6, 26, "Subitem",ExpressionUUID->"c1586e6a-fc7c-42ef-b8d9-d651475ee6b6"],
Cell[158596, 2789, 204, 3, 26, "Subitem",ExpressionUUID->"bb551d81-2b1b-4631-9c53-95a5050898ac"],
Cell[CellGroupData[{
Cell[158825, 2796, 271, 6, 26, "Subitem",ExpressionUUID->"5a999b69-39fb-4d0e-8446-5fcf12c536a2"],
Cell[159099, 2804, 4614, 125, 257, "Input",ExpressionUUID->"9fec43b7-f05e-4128-ae5e-0dbf29d19de1"],
Cell[163716, 2931, 467, 12, 29, "Input",ExpressionUUID->"eda04a70-5948-4495-bc93-af9f6dff2cbe"]
}, Open  ]],
Cell[164198, 2946, 317, 6, 26, "Subitem",ExpressionUUID->"b751051d-4ebc-4c60-9161-0415b281ef9b"],
Cell[164518, 2954, 352, 7, 26, "Subitem",ExpressionUUID->"fa23d721-2303-4c76-a0fe-944192264e62"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164907, 2966, 204, 4, 32, "Item",ExpressionUUID->"0ee484bc-eeac-4be1-b4a3-7bd858757cd3"],
Cell[165114, 2972, 317, 7, 26, "Subitem",ExpressionUUID->"6f0d4eca-bb2b-4e84-a0f1-31897f119b52"],
Cell[165434, 2981, 351, 7, 26, "Subitem",ExpressionUUID->"4a201d7b-bf1a-4c55-aec5-bfe4adfd4418"],
Cell[CellGroupData[{
Cell[165810, 2992, 468, 10, 28, "Subitem",ExpressionUUID->"4b00f3c8-f944-4267-bb46-a203e8895007"],
Cell[166281, 3004, 762, 19, 29, "Input",ExpressionUUID->"66364680-2135-44f5-8a2d-8f9cecd4ce8e"]
}, Open  ]],
Cell[167058, 3026, 539, 10, 26, "Subitem",ExpressionUUID->"7b09e80d-4e48-4f3d-9989-8aaf3e9014cf"],
Cell[CellGroupData[{
Cell[167622, 3040, 396, 6, 26, "Subitem",ExpressionUUID->"d18ee3b6-f67d-466d-b6fe-0a7afbab2ef1"],
Cell[168021, 3048, 678, 18, 51, "Input",ExpressionUUID->"212a975e-e66e-4d9c-bf62-bb7d4e063ba1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[168748, 3072, 263, 4, 32, "Item",ExpressionUUID->"ce58bc19-ddf2-4941-ad9e-8f0dcc653cb1"],
Cell[CellGroupData[{
Cell[169036, 3080, 435, 8, 26, "Subitem",ExpressionUUID->"2bf3889c-a9c3-4182-935f-ba3194dacb12"],
Cell[169474, 3090, 782, 19, 29, "Input",ExpressionUUID->"e0850b30-f209-4c00-b7e1-e85575f12ea5"],
Cell[170259, 3111, 317, 7, 29, "Input",ExpressionUUID->"61573687-1bca-4d28-9aee-5ae5cd85989b"],
Cell[170579, 3120, 380, 8, 29, "Input",ExpressionUUID->"f7dffe81-302e-4a0f-9a8c-c8b434bc9cec"]
}, Open  ]],
Cell[170974, 3131, 997, 22, 66, "Subitem",ExpressionUUID->"a0f82ece-c985-418c-b8be-72f5c931160d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172008, 3158, 304, 5, 32, "Item",ExpressionUUID->"abbbcdd2-3fe6-492b-82b2-a18a20ec271e"],
Cell[CellGroupData[{
Cell[172337, 3167, 413, 8, 26, "Subitem",ExpressionUUID->"f0773fa0-aff5-402c-8e1f-17600d414bec"],
Cell[CellGroupData[{
Cell[172775, 3179, 521, 8, 25, "Subsubitem",ExpressionUUID->"17bcd126-8235-40fe-990b-ebcd74ac019a"],
Cell[173299, 3189, 992, 25, 51, "Input",ExpressionUUID->"596743fa-401b-45f0-98df-437219b6596a"],
Cell[174294, 3216, 392, 8, 29, "Input",ExpressionUUID->"a97de355-0d7a-49e1-a661-464d2922651e"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[174725, 3229, 253, 4, 35, "Text",ExpressionUUID->"76440cb2-8f91-4ac5-8cb5-de21816d6b97"],
Cell[174981, 3235, 2868, 71, 113, "Input",ExpressionUUID->"670d7677-d892-43d7-8b84-47bc30bdd7c7"],
Cell[177852, 3308, 510, 13, 29, "Input",ExpressionUUID->"1baa47bc-becd-4cd6-9886-079b9d626dc3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[178399, 3326, 307, 5, 68, "Section",ExpressionUUID->"d19bd63b-d9ef-4f14-bc33-67105738502c"],
Cell[178709, 3333, 609, 12, 59, "Text",ExpressionUUID->"0af5f690-4f84-4250-9e4d-16a188c442eb"],
Cell[179321, 3347, 564, 15, 29, "Input",ExpressionUUID->"2ead90f6-d50d-4e25-8ec9-e663f7bc0cdc"],
Cell[179888, 3364, 296, 6, 26, "Subitem",ExpressionUUID->"168c8294-c306-457a-96ca-cb6585f72161"],
Cell[CellGroupData[{
Cell[180209, 3374, 158, 3, 54, "Subsection",ExpressionUUID->"55dfce9a-e157-44d7-8c05-e1c0c7218bc5"],
Cell[180370, 3379, 433, 9, 35, "Text",ExpressionUUID->"d9f88634-5976-483c-9772-d65cf1522ae8"],
Cell[180806, 3390, 934, 25, 52, "Input",ExpressionUUID->"5252b675-10d3-428e-90da-2085237de856"],
Cell[181743, 3417, 691, 17, 71, "Input",ExpressionUUID->"162344cc-59e3-49b7-ac8b-6922a50b0375"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182471, 3439, 164, 3, 54, "Subsection",ExpressionUUID->"b6843923-e536-428f-817f-a91d15053b1a"],
Cell[182638, 3444, 697, 13, 104, "Text",ExpressionUUID->"0e3761c6-ab00-4ac3-b688-645d5cc7ce79"],
Cell[183338, 3459, 255, 6, 26, "Subitem",ExpressionUUID->"951f7e38-940b-4d4e-9a6f-f9ff05420f06"],
Cell[CellGroupData[{
Cell[183618, 3469, 224, 5, 26, "Subitem",ExpressionUUID->"97e2b914-2b5d-41a8-a6e2-22be3c58fd4b"],
Cell[183845, 3476, 240, 6, 25, "Subsubitem",ExpressionUUID->"9caa5eb8-c87a-465a-972a-b2739ad5f83c"]
}, Open  ]],
Cell[184100, 3485, 847, 15, 36, "Text",ExpressionUUID->"b1ac948d-d1b7-4aa0-bebc-7852e4705e3e"],
Cell[184950, 3502, 646, 11, 35, "Text",ExpressionUUID->"7473c52f-99d6-4fd8-846d-5208824274ef"],
Cell[185599, 3515, 240, 6, 25, "Subsubitem",ExpressionUUID->"1e1aa4f1-a496-48c1-a77d-bc0b2fa1199e"],
Cell[185842, 3523, 568, 10, 35, "Text",ExpressionUUID->"0cbcf96c-f551-4a04-9096-d2aa10348a75"],
Cell[186413, 3535, 2185, 56, 154, "Input",ExpressionUUID->"1b41c198-4ecc-4edc-96f2-cee07b8ee7fd"],
Cell[188601, 3593, 631, 11, 35, "Text",ExpressionUUID->"0cd0c6cb-498f-440f-9e11-6b792a28a175"],
Cell[189235, 3606, 538, 11, 51, "Input",ExpressionUUID->"840e799c-7482-4032-8943-fd3ae2f81b24"],
Cell[189776, 3619, 718, 12, 35, "Text",ExpressionUUID->"32eaeb98-fbf1-4d50-ad18-c5bcaf8f3bf8"],
Cell[190497, 3633, 790, 18, 71, "Input",ExpressionUUID->"651c0f1c-9459-4c57-bc38-d2699948da6f"],
Cell[191290, 3653, 353, 6, 29, "Input",ExpressionUUID->"fdfdd3ca-fa9b-45d8-8a59-0efefb64093d"],
Cell[191646, 3661, 835, 13, 35, "Text",ExpressionUUID->"709f418e-b11e-4282-8fe9-93083cf8f85e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[192530, 3680, 357, 6, 68, "Section",ExpressionUUID->"0d97ad07-18df-4b07-9a35-1688b3f18ee3"],
Cell[192890, 3688, 1729, 31, 105, "Text",ExpressionUUID->"24cf4ccb-a8d5-4930-abcd-2e52af9dd71c"],
Cell[194622, 3721, 3263, 78, 174, "Input",ExpressionUUID->"502e141e-8e1d-41e8-a520-b04b09975a1d"],
Cell[197888, 3801, 1584, 36, 113, "Input",ExpressionUUID->"f619f914-191a-423a-b80f-3de044075494"],
Cell[199475, 3839, 566, 11, 58, "Text",ExpressionUUID->"9253afc2-fc66-42ad-a562-1fcaf03cf706"]
}, Open  ]]
}, Open  ]]
}
]
*)

